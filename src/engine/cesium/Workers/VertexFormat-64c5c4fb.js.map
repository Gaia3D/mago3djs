{"version":3,"file":"VertexFormat-64c5c4fb.js","sources":["../../../../Source/Core/VertexFormat.js"],"sourcesContent":["import defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\n/**\r\n * A vertex format defines what attributes make up a vertex.  A VertexFormat can be provided\r\n * to a {@link Geometry} to request that certain properties be computed, e.g., just position,\r\n * position and normal, etc.\r\n *\r\n * @param {Object} [options] An object with boolean properties corresponding to VertexFormat properties as shown in the code example.\r\n *\r\n * @alias VertexFormat\r\n * @constructor\r\n *\r\n * @example\r\n * // Create a vertex format with position and 2D texture coordinate attributes.\r\n * var format = new Cesium.VertexFormat({\r\n *   position : true,\r\n *   st : true\r\n * });\r\n *\r\n * @see Geometry#attributes\r\n * @see Packable\r\n */\r\nfunction VertexFormat(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  /**\r\n   * When <code>true</code>, the vertex has a 3D position attribute.\r\n   * <p>\r\n   * 64-bit floating-point (for precision).  3 components per attribute.\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   */\r\n  this.position = defaultValue(options.position, false);\r\n\r\n  /**\r\n   * When <code>true</code>, the vertex has a normal attribute (normalized), which is commonly used for lighting.\r\n   * <p>\r\n   * 32-bit floating-point.  3 components per attribute.\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   */\r\n  this.normal = defaultValue(options.normal, false);\r\n\r\n  /**\r\n   * When <code>true</code>, the vertex has a 2D texture coordinate attribute.\r\n   * <p>\r\n   * 32-bit floating-point.  2 components per attribute\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   */\r\n  this.st = defaultValue(options.st, false);\r\n\r\n  /**\r\n   * When <code>true</code>, the vertex has a bitangent attribute (normalized), which is used for tangent-space effects like bump mapping.\r\n   * <p>\r\n   * 32-bit floating-point.  3 components per attribute.\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   */\r\n  this.bitangent = defaultValue(options.bitangent, false);\r\n\r\n  /**\r\n   * When <code>true</code>, the vertex has a tangent attribute (normalized), which is used for tangent-space effects like bump mapping.\r\n   * <p>\r\n   * 32-bit floating-point.  3 components per attribute.\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   */\r\n  this.tangent = defaultValue(options.tangent, false);\r\n\r\n  /**\r\n   * When <code>true</code>, the vertex has an RGB color attribute.\r\n   * <p>\r\n   * 8-bit unsigned byte.  3 components per attribute.\r\n   * </p>\r\n   *\r\n   * @type Boolean\r\n   *\r\n   * @default false\r\n   */\r\n  this.color = defaultValue(options.color, false);\r\n}\r\n\r\n/**\r\n * An immutable vertex format with only a position attribute.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n */\r\nVertexFormat.POSITION_ONLY = Object.freeze(\r\n  new VertexFormat({\r\n    position: true,\r\n  })\r\n);\r\n\r\n/**\r\n * An immutable vertex format with position and normal attributes.\r\n * This is compatible with per-instance color appearances like {@link PerInstanceColorAppearance}.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n * @see VertexFormat#normal\r\n */\r\nVertexFormat.POSITION_AND_NORMAL = Object.freeze(\r\n  new VertexFormat({\r\n    position: true,\r\n    normal: true,\r\n  })\r\n);\r\n\r\n/**\r\n * An immutable vertex format with position, normal, and st attributes.\r\n * This is compatible with {@link MaterialAppearance} when {@link MaterialAppearance#materialSupport}\r\n * is <code>TEXTURED/code>.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n * @see VertexFormat#normal\r\n * @see VertexFormat#st\r\n */\r\nVertexFormat.POSITION_NORMAL_AND_ST = Object.freeze(\r\n  new VertexFormat({\r\n    position: true,\r\n    normal: true,\r\n    st: true,\r\n  })\r\n);\r\n\r\n/**\r\n * An immutable vertex format with position and st attributes.\r\n * This is compatible with {@link EllipsoidSurfaceAppearance}.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n * @see VertexFormat#st\r\n */\r\nVertexFormat.POSITION_AND_ST = Object.freeze(\r\n  new VertexFormat({\r\n    position: true,\r\n    st: true,\r\n  })\r\n);\r\n\r\n/**\r\n * An immutable vertex format with position and color attributes.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n * @see VertexFormat#color\r\n */\r\nVertexFormat.POSITION_AND_COLOR = Object.freeze(\r\n  new VertexFormat({\r\n    position: true,\r\n    color: true,\r\n  })\r\n);\r\n\r\n/**\r\n * An immutable vertex format with well-known attributes: position, normal, st, tangent, and bitangent.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n * @see VertexFormat#normal\r\n * @see VertexFormat#st\r\n * @see VertexFormat#tangent\r\n * @see VertexFormat#bitangent\r\n */\r\nVertexFormat.ALL = Object.freeze(\r\n  new VertexFormat({\r\n    position: true,\r\n    normal: true,\r\n    st: true,\r\n    tangent: true,\r\n    bitangent: true,\r\n  })\r\n);\r\n\r\n/**\r\n * An immutable vertex format with position, normal, and st attributes.\r\n * This is compatible with most appearances and materials; however\r\n * normal and st attributes are not always required.  When this is\r\n * known in advance, another <code>VertexFormat</code> should be used.\r\n *\r\n * @type {VertexFormat}\r\n * @constant\r\n *\r\n * @see VertexFormat#position\r\n * @see VertexFormat#normal\r\n */\r\nVertexFormat.DEFAULT = VertexFormat.POSITION_NORMAL_AND_ST;\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nVertexFormat.packedLength = 6;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {VertexFormat} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nVertexFormat.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  array[startingIndex++] = value.position ? 1.0 : 0.0;\r\n  array[startingIndex++] = value.normal ? 1.0 : 0.0;\r\n  array[startingIndex++] = value.st ? 1.0 : 0.0;\r\n  array[startingIndex++] = value.tangent ? 1.0 : 0.0;\r\n  array[startingIndex++] = value.bitangent ? 1.0 : 0.0;\r\n  array[startingIndex] = value.color ? 1.0 : 0.0;\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {VertexFormat} [result] The object into which to store the result.\r\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided.\r\n */\r\nVertexFormat.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  if (!defined(result)) {\r\n    result = new VertexFormat();\r\n  }\r\n\r\n  result.position = array[startingIndex++] === 1.0;\r\n  result.normal = array[startingIndex++] === 1.0;\r\n  result.st = array[startingIndex++] === 1.0;\r\n  result.tangent = array[startingIndex++] === 1.0;\r\n  result.bitangent = array[startingIndex++] === 1.0;\r\n  result.color = array[startingIndex] === 1.0;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Duplicates a VertexFormat instance.\r\n *\r\n * @param {VertexFormat} vertexFormat The vertex format to duplicate.\r\n * @param {VertexFormat} [result] The object onto which to store the result.\r\n * @returns {VertexFormat} The modified result parameter or a new VertexFormat instance if one was not provided. (Returns undefined if vertexFormat is undefined)\r\n */\r\nVertexFormat.clone = function (vertexFormat, result) {\r\n  if (!defined(vertexFormat)) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    result = new VertexFormat();\r\n  }\r\n\r\n  result.position = vertexFormat.position;\r\n  result.normal = vertexFormat.normal;\r\n  result.st = vertexFormat.st;\r\n  result.tangent = vertexFormat.tangent;\r\n  result.bitangent = vertexFormat.bitangent;\r\n  result.color = vertexFormat.color;\r\n  return result;\r\n};\r\nexport default VertexFormat;\r\n"],"names":["VertexFormat","options","defaultValue","EMPTY_OBJECT","this","position","normal","st","bitangent","tangent","color","POSITION_ONLY","Object","freeze","POSITION_AND_NORMAL","POSITION_NORMAL_AND_ST","POSITION_AND_ST","POSITION_AND_COLOR","ALL","DEFAULT","packedLength","pack","value","array","startingIndex","defined","DeveloperError","unpack","result","clone","vertexFormat"],"mappings":"6FAwBA,SAASA,EAAaC,GACpBA,EAAUC,eAAaD,EAASC,eAAaC,cAY7CC,KAAKC,SAAWH,eAAaD,EAAQI,UAAU,GAY/CD,KAAKE,OAASJ,eAAaD,EAAQK,QAAQ,GAY3CF,KAAKG,GAAKL,eAAaD,EAAQM,IAAI,GAYnCH,KAAKI,UAAYN,eAAaD,EAAQO,WAAW,GAYjDJ,KAAKK,QAAUP,eAAaD,EAAQQ,SAAS,GAY7CL,KAAKM,MAAQR,eAAaD,EAAQS,OAAO,GAW3CV,EAAaW,cAAgBC,OAAOC,OAClC,IAAIb,EAAa,CACfK,UAAU,KAcdL,EAAac,oBAAsBF,OAAOC,OACxC,IAAIb,EAAa,CACfK,UAAU,EACVC,QAAQ,KAgBZN,EAAae,uBAAyBH,OAAOC,OAC3C,IAAIb,EAAa,CACfK,UAAU,EACVC,QAAQ,EACRC,IAAI,KAcRP,EAAagB,gBAAkBJ,OAAOC,OACpC,IAAIb,EAAa,CACfK,UAAU,EACVE,IAAI,KAaRP,EAAaiB,mBAAqBL,OAAOC,OACvC,IAAIb,EAAa,CACfK,UAAU,EACVK,OAAO,KAgBXV,EAAakB,IAAMN,OAAOC,OACxB,IAAIb,EAAa,CACfK,UAAU,EACVC,QAAQ,EACRC,IAAI,EACJE,SAAS,EACTD,WAAW,KAgBfR,EAAamB,QAAUnB,EAAae,uBAMpCf,EAAaoB,aAAe,EAW5BpB,EAAaqB,KAAO,SAAUC,EAAOC,EAAOC,GAE1C,IAAKC,UAAQH,GACX,MAAM,IAAII,iBAAe,qBAE3B,IAAKD,UAAQF,GACX,MAAM,IAAIG,iBAAe,qBAa3B,OATAF,EAAgBtB,eAAasB,EAAe,GAE5CD,EAAMC,KAAmBF,EAAMjB,SAAW,EAAM,EAChDkB,EAAMC,KAAmBF,EAAMhB,OAAS,EAAM,EAC9CiB,EAAMC,KAAmBF,EAAMf,GAAK,EAAM,EAC1CgB,EAAMC,KAAmBF,EAAMb,QAAU,EAAM,EAC/Cc,EAAMC,KAAmBF,EAAMd,UAAY,EAAM,EACjDe,EAAMC,GAAiBF,EAAMZ,MAAQ,EAAM,EAEpCa,GAWTvB,EAAa2B,OAAS,SAAUJ,EAAOC,EAAeI,GAEpD,IAAKH,UAAQF,GACX,MAAM,IAAIG,iBAAe,qBAgB3B,OAZAF,EAAgBtB,eAAasB,EAAe,GAEvCC,UAAQG,KACXA,EAAS,IAAI5B,GAGf4B,EAAOvB,SAAsC,IAA3BkB,EAAMC,KACxBI,EAAOtB,OAAoC,IAA3BiB,EAAMC,KACtBI,EAAOrB,GAAgC,IAA3BgB,EAAMC,KAClBI,EAAOnB,QAAqC,IAA3Bc,EAAMC,KACvBI,EAAOpB,UAAuC,IAA3Be,EAAMC,KACzBI,EAAOlB,MAAiC,IAAzBa,EAAMC,GACdI,GAUT5B,EAAa6B,MAAQ,SAAUC,EAAcF,GAC3C,GAAKH,UAAQK,GAab,OAVKL,UAAQG,KACXA,EAAS,IAAI5B,GAGf4B,EAAOvB,SAAWyB,EAAazB,SAC/BuB,EAAOtB,OAASwB,EAAaxB,OAC7BsB,EAAOrB,GAAKuB,EAAavB,GACzBqB,EAAOnB,QAAUqB,EAAarB,QAC9BmB,EAAOpB,UAAYsB,EAAatB,UAChCoB,EAAOlB,MAAQoB,EAAapB,MACrBkB"}