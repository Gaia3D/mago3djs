{"version":3,"file":"createTaskProcessorWorker.js","sources":["../../../../Source/WorkersES6/createTaskProcessorWorker.js","../../../../Source/Core/formatError.js"],"sourcesContent":["import defaultValue from \"../Core/defaultValue.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport formatError from \"../Core/formatError.js\";\r\nimport when from \"../ThirdParty/when.js\";\r\n\r\n// createXXXGeometry functions may return Geometry or a Promise that resolves to Geometry\r\n// if the function requires access to ApproximateTerrainHeights.\r\n// For fully synchronous functions, just wrapping the function call in a `when` Promise doesn't\r\n// handle errors correctly, hence try-catch\r\nfunction callAndWrap(workerFunction, parameters, transferableObjects) {\r\n  var resultOrPromise;\r\n  try {\r\n    resultOrPromise = workerFunction(parameters, transferableObjects);\r\n    return resultOrPromise; // errors handled by Promise\r\n  } catch (e) {\r\n    return when.reject(e);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates an adapter function to allow a calculation function to operate as a Web Worker,\r\n * paired with TaskProcessor, to receive tasks and return results.\r\n *\r\n * @function createTaskProcessorWorker\r\n *\r\n * @param {createTaskProcessorWorker.WorkerFunction} workerFunction The calculation function,\r\n *        which takes parameters and returns a result.\r\n * @returns {createTaskProcessorWorker.TaskProcessorWorkerFunction} A function that adapts the\r\n *          calculation function to work as a Web Worker onmessage listener with TaskProcessor.\r\n *\r\n *\r\n * @example\r\n * function doCalculation(parameters, transferableObjects) {\r\n *   // calculate some result using the inputs in parameters\r\n *   return result;\r\n * }\r\n *\r\n * return Cesium.createTaskProcessorWorker(doCalculation);\r\n * // the resulting function is compatible with TaskProcessor\r\n *\r\n * @see TaskProcessor\r\n * @see {@link http://www.w3.org/TR/workers/|Web Workers}\r\n * @see {@link http://www.w3.org/TR/html5/common-dom-interfaces.html#transferable-objects|Transferable objects}\r\n */\r\nfunction createTaskProcessorWorker(workerFunction) {\r\n  var postMessage;\r\n\r\n  return function (event) {\r\n    var data = event.data;\r\n\r\n    var transferableObjects = [];\r\n    var responseMessage = {\r\n      id: data.id,\r\n      result: undefined,\r\n      error: undefined,\r\n    };\r\n\r\n    return when(\r\n      callAndWrap(workerFunction, data.parameters, transferableObjects)\r\n    )\r\n      .then(function (result) {\r\n        responseMessage.result = result;\r\n      })\r\n      .otherwise(function (e) {\r\n        if (e instanceof Error) {\r\n          // Errors can't be posted in a message, copy the properties\r\n          responseMessage.error = {\r\n            name: e.name,\r\n            message: e.message,\r\n            stack: e.stack,\r\n          };\r\n        } else {\r\n          responseMessage.error = e;\r\n        }\r\n      })\r\n      .always(function () {\r\n        if (!defined(postMessage)) {\r\n          postMessage = defaultValue(self.webkitPostMessage, self.postMessage);\r\n        }\r\n\r\n        if (!data.canTransferArrayBuffer) {\r\n          transferableObjects.length = 0;\r\n        }\r\n\r\n        try {\r\n          postMessage(responseMessage, transferableObjects);\r\n        } catch (e) {\r\n          // something went wrong trying to post the message, post a simpler\r\n          // error that we can be sure will be cloneable\r\n          responseMessage.result = undefined;\r\n          responseMessage.error =\r\n            \"postMessage failed with error: \" +\r\n            formatError(e) +\r\n            \"\\n  with responseMessage: \" +\r\n            JSON.stringify(responseMessage);\r\n          postMessage(responseMessage);\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\n/**\r\n * A function that performs a calculation in a Web Worker.\r\n * @callback createTaskProcessorWorker.WorkerFunction\r\n *\r\n * @param {Object} parameters Parameters to the calculation.\r\n * @param {Array} transferableObjects An array that should be filled with references to objects inside\r\n *        the result that should be transferred back to the main document instead of copied.\r\n * @returns {Object} The result of the calculation.\r\n *\r\n * @example\r\n * function calculate(parameters, transferableObjects) {\r\n *   // perform whatever calculation is necessary.\r\n *   var typedArray = new Float32Array(0);\r\n *\r\n *   // typed arrays are transferable\r\n *   transferableObjects.push(typedArray)\r\n *\r\n *   return {\r\n *      typedArray : typedArray\r\n *   };\r\n * }\r\n */\r\n\r\n/**\r\n * A Web Worker message event handler function that handles the interaction with TaskProcessor,\r\n * specifically, task ID management and posting a response message containing the result.\r\n * @callback createTaskProcessorWorker.TaskProcessorWorkerFunction\r\n *\r\n * @param {Object} event The onmessage event object.\r\n */\r\nexport default createTaskProcessorWorker;\r\n","import defined from \"./defined.js\";\r\n\r\n/**\r\n * Formats an error object into a String.  If available, uses name, message, and stack\r\n * properties, otherwise, falls back on toString().\r\n *\r\n * @function\r\n *\r\n * @param {*} object The item to find in the array.\r\n * @returns {String} A string containing the formatted error.\r\n */\r\nfunction formatError(object) {\r\n  var result;\r\n\r\n  var name = object.name;\r\n  var message = object.message;\r\n  if (defined(name) && defined(message)) {\r\n    result = name + \": \" + message;\r\n  } else {\r\n    result = object.toString();\r\n  }\r\n\r\n  var stack = object.stack;\r\n  if (defined(stack)) {\r\n    result += \"\\n\" + stack;\r\n  }\r\n\r\n  return result;\r\n}\r\nexport default formatError;\r\n"],"names":["workerFunction","postMessage","event","data","transferableObjects","responseMessage","id","result","undefined","error","when","parameters","e","reject","callAndWrap","then","otherwise","Error","name","message","stack","always","defined","defaultValue","self","webkitPostMessage","canTransferArrayBuffer","length","object","toString","formatError","JSON","stringify"],"mappings":"4DA4CA,SAAmCA,GACjC,IAAIC,EAEJ,OAAO,SAAUC,GACf,IAAIC,EAAOD,EAAMC,KAEbC,EAAsB,GACtBC,EAAkB,CACpBC,GAAIH,EAAKG,GACTC,YAAQC,EACRC,WAAOD,GAGT,OAAOE,OAhDX,SAAqBV,EAAgBW,EAAYP,GAE/C,IAEE,OADkBJ,EAAeW,EAAYP,GAE7C,MAAOQ,GACP,OAAOF,OAAKG,OAAOD,IA2CjBE,CAAYd,EAAgBG,EAAKQ,WAAYP,IAE5CW,MAAK,SAAUR,GACdF,EAAgBE,OAASA,KAE1BS,WAAU,SAAUJ,GACfA,aAAaK,MAEfZ,EAAgBI,MAAQ,CACtBS,KAAMN,EAAEM,KACRC,QAASP,EAAEO,QACXC,MAAOR,EAAEQ,OAGXf,EAAgBI,MAAQG,KAG3BS,QAAO,WACDC,UAAQrB,KACXA,EAAcsB,eAAaC,KAAKC,kBAAmBD,KAAKvB,cAGrDE,EAAKuB,yBACRtB,EAAoBuB,OAAS,GAG/B,IACE1B,EAAYI,EAAiBD,GAC7B,MAAOQ,GAGPP,EAAgBE,YAASC,EACzBH,EAAgBI,MACd,kCChFZ,SAAqBmB,GACnB,IAAIrB,EAEAW,EAAOU,EAAOV,KACdC,EAAUS,EAAOT,QAEnBZ,EADEe,UAAQJ,IAASI,UAAQH,GAClBD,EAAO,KAAOC,EAEdS,EAAOC,WAGlB,IAAIT,EAAQQ,EAAOR,MAKnB,OAJIE,UAAQF,KACVb,GAAU,KAAOa,GAGZb,EDiEGuB,CAAYlB,GACZ,6BACAmB,KAAKC,UAAU3B,GACjBJ,EAAYI"}