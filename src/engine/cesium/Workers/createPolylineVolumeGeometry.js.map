{"version":3,"file":"createPolylineVolumeGeometry.js","sources":["../../../../Source/Core/PolylineVolumeGeometry.js","../../../../Source/WorkersES6/createPolylineVolumeGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingRectangle from \"./BoundingRectangle.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryPipeline from \"./GeometryPipeline.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport oneTimeWarning from \"./oneTimeWarning.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\nimport WindingOrder from \"./WindingOrder.js\";\r\n\r\nfunction computeAttributes(\r\n  combinedPositions,\r\n  shape,\r\n  boundingRectangle,\r\n  vertexFormat\r\n) {\r\n  var attributes = new GeometryAttributes();\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: combinedPositions,\r\n    });\r\n  }\r\n  var shapeLength = shape.length;\r\n  var vertexCount = combinedPositions.length / 3;\r\n  var length = (vertexCount - shapeLength * 2) / (shapeLength * 2);\r\n  var firstEndIndices = PolygonPipeline.triangulate(shape);\r\n\r\n  var indicesCount =\r\n    (length - 1) * shapeLength * 6 + firstEndIndices.length * 2;\r\n  var indices = IndexDatatype.createTypedArray(vertexCount, indicesCount);\r\n  var i, j;\r\n  var ll, ul, ur, lr;\r\n  var offset = shapeLength * 2;\r\n  var index = 0;\r\n  for (i = 0; i < length - 1; i++) {\r\n    for (j = 0; j < shapeLength - 1; j++) {\r\n      ll = j * 2 + i * shapeLength * 2;\r\n      lr = ll + offset;\r\n      ul = ll + 1;\r\n      ur = ul + offset;\r\n\r\n      indices[index++] = ul;\r\n      indices[index++] = ll;\r\n      indices[index++] = ur;\r\n      indices[index++] = ur;\r\n      indices[index++] = ll;\r\n      indices[index++] = lr;\r\n    }\r\n    ll = shapeLength * 2 - 2 + i * shapeLength * 2;\r\n    ul = ll + 1;\r\n    ur = ul + offset;\r\n    lr = ll + offset;\r\n\r\n    indices[index++] = ul;\r\n    indices[index++] = ll;\r\n    indices[index++] = ur;\r\n    indices[index++] = ur;\r\n    indices[index++] = ll;\r\n    indices[index++] = lr;\r\n  }\r\n\r\n  if (vertexFormat.st || vertexFormat.tangent || vertexFormat.bitangent) {\r\n    // st required for tangent/bitangent calculation\r\n    var st = new Float32Array(vertexCount * 2);\r\n    var lengthSt = 1 / (length - 1);\r\n    var heightSt = 1 / boundingRectangle.height;\r\n    var heightOffset = boundingRectangle.height / 2;\r\n    var s, t;\r\n    var stindex = 0;\r\n    for (i = 0; i < length; i++) {\r\n      s = i * lengthSt;\r\n      t = heightSt * (shape[0].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n      for (j = 1; j < shapeLength; j++) {\r\n        t = heightSt * (shape[j].y + heightOffset);\r\n        st[stindex++] = s;\r\n        st[stindex++] = t;\r\n        st[stindex++] = s;\r\n        st[stindex++] = t;\r\n      }\r\n      t = heightSt * (shape[0].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n    }\r\n    for (j = 0; j < shapeLength; j++) {\r\n      s = 0;\r\n      t = heightSt * (shape[j].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n    }\r\n    for (j = 0; j < shapeLength; j++) {\r\n      s = (length - 1) * lengthSt;\r\n      t = heightSt * (shape[j].y + heightOffset);\r\n      st[stindex++] = s;\r\n      st[stindex++] = t;\r\n    }\r\n\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: new Float32Array(st),\r\n    });\r\n  }\r\n\r\n  var endOffset = vertexCount - shapeLength * 2;\r\n  for (i = 0; i < firstEndIndices.length; i += 3) {\r\n    var v0 = firstEndIndices[i] + endOffset;\r\n    var v1 = firstEndIndices[i + 1] + endOffset;\r\n    var v2 = firstEndIndices[i + 2] + endOffset;\r\n\r\n    indices[index++] = v0;\r\n    indices[index++] = v1;\r\n    indices[index++] = v2;\r\n    indices[index++] = v2 + shapeLength;\r\n    indices[index++] = v1 + shapeLength;\r\n    indices[index++] = v0 + shapeLength;\r\n  }\r\n\r\n  var geometry = new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    boundingSphere: BoundingSphere.fromVertices(combinedPositions),\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n  });\r\n\r\n  if (vertexFormat.normal) {\r\n    geometry = GeometryPipeline.computeNormal(geometry);\r\n  }\r\n\r\n  if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n    try {\r\n      geometry = GeometryPipeline.computeTangentAndBitangent(geometry);\r\n    } catch (e) {\r\n      oneTimeWarning(\r\n        \"polyline-volume-tangent-bitangent\",\r\n        \"Unable to compute tangents and bitangents for polyline volume geometry\"\r\n      );\r\n      //TODO https://github.com/CesiumGS/cesium/issues/3609\r\n    }\r\n\r\n    if (!vertexFormat.tangent) {\r\n      geometry.attributes.tangent = undefined;\r\n    }\r\n    if (!vertexFormat.bitangent) {\r\n      geometry.attributes.bitangent = undefined;\r\n    }\r\n    if (!vertexFormat.st) {\r\n      geometry.attributes.st = undefined;\r\n    }\r\n  }\r\n\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * A description of a polyline with a volume (a 2D shape extruded along a polyline).\r\n *\r\n * @alias PolylineVolumeGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.polylinePositions An array of {@link Cartesian3} positions that define the center of the polyline volume.\r\n * @param {Cartesian2[]} options.shapePositions An array of {@link Cartesian2} positions that define the shape to be extruded along the polyline\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see PolylineVolumeGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline%20Volume.html|Cesium Sandcastle Polyline Volume Demo}\r\n *\r\n * @example\r\n * function computeCircle(radius) {\r\n *   var positions = [];\r\n *   for (var i = 0; i < 360; i++) {\r\n *     var radians = Cesium.Math.toRadians(i);\r\n *     positions.push(new Cesium.Cartesian2(radius * Math.cos(radians), radius * Math.sin(radians)));\r\n *   }\r\n *   return positions;\r\n * }\r\n *\r\n * var volume = new Cesium.PolylineVolumeGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   polylinePositions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0\r\n *   ]),\r\n *   shapePositions : computeCircle(100000.0)\r\n * });\r\n */\r\nfunction PolylineVolumeGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var positions = options.polylinePositions;\r\n  var shape = options.shapePositions;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.polylinePositions is required.\");\r\n  }\r\n  if (!defined(shape)) {\r\n    throw new DeveloperError(\"options.shapePositions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._positions = positions;\r\n  this._shape = shape;\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n  this._vertexFormat = VertexFormat.clone(\r\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\r\n  );\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._workerName = \"createPolylineVolumeGeometry\";\r\n\r\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n  numComponents += 1 + shape.length * Cartesian2.packedLength;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 2;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineVolumeGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineVolumeGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var i;\r\n\r\n  var positions = value._positions;\r\n  var length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  var shape = value._shape;\r\n  length = shape.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n    Cartesian2.pack(shape[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._cornerType;\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n  polylinePositions: undefined,\r\n  shapePositions: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  cornerType: undefined,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineVolumeGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineVolumeGeometry} The modified result parameter or a new PolylineVolumeGeometry instance if one was not provided.\r\n */\r\nPolylineVolumeGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var i;\r\n\r\n  var length = array[startingIndex++];\r\n  var positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  var shape = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian2.packedLength) {\r\n    shape[i] = Cartesian2.unpack(array, startingIndex);\r\n  }\r\n\r\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  var vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  var cornerType = array[startingIndex++];\r\n  var granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.polylinePositions = positions;\r\n    scratchOptions.shapePositions = shape;\r\n    scratchOptions.cornerType = cornerType;\r\n    scratchOptions.granularity = granularity;\r\n    return new PolylineVolumeGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._shape = shape;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._cornerType = cornerType;\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\nvar brScratch = new BoundingRectangle();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline with a volume, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineVolumeGeometry} polylineVolumeGeometry A description of the polyline volume.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineVolumeGeometry.createGeometry = function (polylineVolumeGeometry) {\r\n  var positions = polylineVolumeGeometry._positions;\r\n  var cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n  var shape2D = polylineVolumeGeometry._shape;\r\n  shape2D = PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(shape2D);\r\n\r\n  if (cleanPositions.length < 2 || shape2D.length < 3) {\r\n    return undefined;\r\n  }\r\n\r\n  if (\r\n    PolygonPipeline.computeWindingOrder2D(shape2D) === WindingOrder.CLOCKWISE\r\n  ) {\r\n    shape2D.reverse();\r\n  }\r\n  var boundingRectangle = BoundingRectangle.fromPoints(shape2D, brScratch);\r\n\r\n  var computedPositions = PolylineVolumeGeometryLibrary.computePositions(\r\n    cleanPositions,\r\n    shape2D,\r\n    boundingRectangle,\r\n    polylineVolumeGeometry,\r\n    true\r\n  );\r\n  return computeAttributes(\r\n    computedPositions,\r\n    shape2D,\r\n    boundingRectangle,\r\n    polylineVolumeGeometry._vertexFormat\r\n  );\r\n};\r\nexport default PolylineVolumeGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolylineVolumeGeometry from \"../Core/PolylineVolumeGeometry.js\";\r\n\r\nfunction createPolylineVolumeGeometry(polylineVolumeGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polylineVolumeGeometry = PolylineVolumeGeometry.unpack(\r\n      polylineVolumeGeometry,\r\n      offset\r\n    );\r\n  }\r\n  polylineVolumeGeometry._ellipsoid = Ellipsoid.clone(\r\n    polylineVolumeGeometry._ellipsoid\r\n  );\r\n  return PolylineVolumeGeometry.createGeometry(polylineVolumeGeometry);\r\n}\r\nexport default createPolylineVolumeGeometry;\r\n"],"names":["PolylineVolumeGeometry","options","positions","defaultValue","EMPTY_OBJECT","polylinePositions","shape","shapePositions","defined","DeveloperError","this","_positions","_shape","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_cornerType","cornerType","CornerType","ROUNDED","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_workerName","numComponents","length","Cartesian3","packedLength","Cartesian2","pack","value","array","startingIndex","i","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","brScratch","BoundingRectangle","createGeometry","polylineVolumeGeometry","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","shape2D","PolylineVolumeGeometryLibrary","removeDuplicatesFromShape","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","reverse","boundingRectangle","fromPoints","combinedPositions","attributes","GeometryAttributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","j","ll","ul","ur","lr","shapeLength","vertexCount","firstEndIndices","triangulate","indicesCount","indices","IndexDatatype","createTypedArray","offset","index","st","tangent","bitangent","s","t","Float32Array","lengthSt","heightSt","height","heightOffset","stindex","y","FLOAT","endOffset","v0","v1","v2","geometry","Geometry","boundingSphere","BoundingSphere","fromVertices","primitiveType","PrimitiveType","TRIANGLES","normal","GeometryPipeline","computeNormal","computeTangentAndBitangent","e","oneTimeWarning","computeAttributes","computePositions"],"mappings":"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"}