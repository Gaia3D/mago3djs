{"version":3,"file":"AttributeCompression-0d03c199.js","sources":["../../../../Source/Scene/AttributeType.js","../../../../Source/Core/AttributeCompression.js"],"sourcesContent":["import Cartesian2 from \"../Core/Cartesian2.js\";\r\nimport Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport Cartesian4 from \"../Core/Cartesian4.js\";\r\nimport Check from \"../Core/Check.js\";\r\nimport DeveloperError from \"../Core/DeveloperError.js\";\r\nimport Matrix2 from \"../Core/Matrix2.js\";\r\nimport Matrix3 from \"../Core/Matrix3.js\";\r\nimport Matrix4 from \"../Core/Matrix4.js\";\r\n\r\n/**\r\n * An enum describing the attribute type for glTF and 3D Tiles.\r\n *\r\n * @enum {String}\r\n *\r\n * @private\r\n */\r\nvar AttributeType = {\r\n  /**\r\n   * The attribute is a single component.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  SCALAR: \"SCALAR\",\r\n\r\n  /**\r\n   * The attribute is a two-component vector.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  VEC2: \"VEC2\",\r\n\r\n  /**\r\n   * The attribute is a three-component vector.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  VEC3: \"VEC3\",\r\n\r\n  /**\r\n   * The attribute is a four-component vector.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  VEC4: \"VEC4\",\r\n\r\n  /**\r\n   * The attribute is a 2x2 matrix.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  MAT2: \"MAT2\",\r\n\r\n  /**\r\n   * The attribute is a 3x3 matrix.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  MAT3: \"MAT3\",\r\n\r\n  /**\r\n   * The attribute is a 4x4 matrix.\r\n   *\r\n   * @type {String}\r\n   * @constant\r\n   */\r\n  MAT4: \"MAT4\",\r\n};\r\n\r\n/**\r\n * Gets the scalar, vector, or matrix type for the attribute type.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {*} The math type.\r\n *\r\n * @private\r\n */\r\nAttributeType.getMathType = function (attributeType) {\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n      return Number;\r\n    case AttributeType.VEC2:\r\n      return Cartesian2;\r\n    case AttributeType.VEC3:\r\n      return Cartesian3;\r\n    case AttributeType.VEC4:\r\n      return Cartesian4;\r\n    case AttributeType.MAT2:\r\n      return Matrix2;\r\n    case AttributeType.MAT3:\r\n      return Matrix3;\r\n    case AttributeType.MAT4:\r\n      return Matrix4;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the number of components per attribute.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {Number} The number of components.\r\n *\r\n * @private\r\n */\r\nAttributeType.getNumberOfComponents = function (attributeType) {\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n      return 1;\r\n    case AttributeType.VEC2:\r\n      return 2;\r\n    case AttributeType.VEC3:\r\n      return 3;\r\n    case AttributeType.VEC4:\r\n    case AttributeType.MAT2:\r\n      return 4;\r\n    case AttributeType.MAT3:\r\n      return 9;\r\n    case AttributeType.MAT4:\r\n      return 16;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the GLSL type for the attribute type.\r\n *\r\n * @param {AttributeType} attributeType The attribute type.\r\n * @returns {String} The GLSL type for the attribute type.\r\n *\r\n * @private\r\n */\r\nAttributeType.getGlslType = function (attributeType) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.string(\"attributeType\", attributeType);\r\n  //>>includeEnd('debug');\r\n\r\n  switch (attributeType) {\r\n    case AttributeType.SCALAR:\r\n      return \"float\";\r\n    case AttributeType.VEC2:\r\n      return \"vec2\";\r\n    case AttributeType.VEC3:\r\n      return \"vec3\";\r\n    case AttributeType.VEC4:\r\n      return \"vec4\";\r\n    case AttributeType.MAT2:\r\n      return \"mat2\";\r\n    case AttributeType.MAT3:\r\n      return \"mat3\";\r\n    case AttributeType.MAT4:\r\n      return \"mat4\";\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\"attributeType is not a valid value.\");\r\n    //>>includeEnd('debug');\r\n  }\r\n};\r\n\r\nexport default Object.freeze(AttributeType);\r\n","import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport Check from \"./Check.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport AttributeType from \"../Scene/AttributeType.js\";\r\n\r\nvar RIGHT_SHIFT = 1.0 / 256.0;\r\nvar LEFT_SHIFT = 256.0;\r\n\r\n/**\r\n * Attribute compression and decompression functions.\r\n *\r\n * @namespace AttributeCompression\r\n *\r\n * @private\r\n */\r\nvar AttributeCompression = {};\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-rangeMax] following the 'oct' encoding.\r\n *\r\n * Oct encoding is a compact representation of unit length vectors.\r\n * The 'oct' encoding is described in \"A Survey of Efficient Representations of Independent Unit Vectors\",\r\n * Cigolle et al 2014: {@link http://jcgt.org/published/0003/02/01/}\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 component 'oct' encoding.\r\n * @param {Cartesian2} result The 2 component oct-encoded unit length vector.\r\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n * @returns {Cartesian2} The 2 component oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n */\r\nAttributeCompression.octEncodeInRange = function (vector, rangeMax, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"vector\", vector);\r\n  Check.defined(\"result\", result);\r\n  var magSquared = Cartesian3.magnitudeSquared(vector);\r\n  if (Math.abs(magSquared - 1.0) > CesiumMath.EPSILON6) {\r\n    throw new DeveloperError(\"vector must be normalized.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  result.x =\r\n    vector.x / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n  result.y =\r\n    vector.y / (Math.abs(vector.x) + Math.abs(vector.y) + Math.abs(vector.z));\r\n  if (vector.z < 0) {\r\n    var x = result.x;\r\n    var y = result.y;\r\n    result.x = (1.0 - Math.abs(y)) * CesiumMath.signNotZero(x);\r\n    result.y = (1.0 - Math.abs(x)) * CesiumMath.signNotZero(y);\r\n  }\r\n\r\n  result.x = CesiumMath.toSNorm(result.x, rangeMax);\r\n  result.y = CesiumMath.toSNorm(result.y, rangeMax);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding.\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n * @param {Cartesian2} result The 2 byte oct-encoded unit length vector.\r\n * @returns {Cartesian2} The 2 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n * @see AttributeCompression.octDecode\r\n */\r\nAttributeCompression.octEncode = function (vector, result) {\r\n  return AttributeCompression.octEncodeInRange(vector, 255, result);\r\n};\r\n\r\nvar octEncodeScratch = new Cartesian2();\r\nvar uint8ForceArray = new Uint8Array(1);\r\nfunction forceUint8(value) {\r\n  uint8ForceArray[0] = value;\r\n  return uint8ForceArray[0];\r\n}\r\n/**\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 4 byte 'oct' encoding.\r\n * @param {Cartesian4} result The 4 byte oct-encoded unit length vector.\r\n * @returns {Cartesian4} The 4 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n * @see AttributeCompression.octDecodeFromCartesian4\r\n */\r\nAttributeCompression.octEncodeToCartesian4 = function (vector, result) {\r\n  AttributeCompression.octEncodeInRange(vector, 65535, octEncodeScratch);\r\n  result.x = forceUint8(octEncodeScratch.x * RIGHT_SHIFT);\r\n  result.y = forceUint8(octEncodeScratch.x);\r\n  result.z = forceUint8(octEncodeScratch.y * RIGHT_SHIFT);\r\n  result.w = forceUint8(octEncodeScratch.y);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Number} x The x component of the oct-encoded unit length vector.\r\n * @param {Number} y The y component of the oct-encoded unit length vector.\r\n * @param {Number} rangeMax The maximum value of the SNORM range. The encoded vector is stored in log2(rangeMax+1) bits.\r\n * @param {Cartesian3} result The decoded and normalized vector\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x and y must be unsigned normalized integers between 0 and rangeMax.\r\n *\r\n * @see AttributeCompression.octEncodeInRange\r\n */\r\nAttributeCompression.octDecodeInRange = function (x, y, rangeMax, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"result\", result);\r\n  if (x < 0 || x > rangeMax || y < 0 || y > rangeMax) {\r\n    throw new DeveloperError(\r\n      \"x and y must be unsigned normalized integers between 0 and \" + rangeMax\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = CesiumMath.fromSNorm(x, rangeMax);\r\n  result.y = CesiumMath.fromSNorm(y, rangeMax);\r\n  result.z = 1.0 - (Math.abs(result.x) + Math.abs(result.y));\r\n\r\n  if (result.z < 0.0) {\r\n    var oldVX = result.x;\r\n    result.x = (1.0 - Math.abs(result.y)) * CesiumMath.signNotZero(oldVX);\r\n    result.y = (1.0 - Math.abs(oldVX)) * CesiumMath.signNotZero(result.y);\r\n  }\r\n\r\n  return Cartesian3.normalize(result, result);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 2 byte 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Number} x The x component of the oct-encoded unit length vector.\r\n * @param {Number} y The y component of the oct-encoded unit length vector.\r\n * @param {Cartesian3} result The decoded and normalized vector.\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x and y must be an unsigned normalized integer between 0 and 255.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n */\r\nAttributeCompression.octDecode = function (x, y, result) {\r\n  return AttributeCompression.octDecodeInRange(x, y, 255, result);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 4 byte 'oct' encoding to a normalized 3-component vector.\r\n *\r\n * @param {Cartesian4} encoded The oct-encoded unit length vector.\r\n * @param {Cartesian3} result The decoded and normalized vector.\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n * @exception {DeveloperError} x, y, z, and w must be unsigned normalized integers between 0 and 255.\r\n *\r\n * @see AttributeCompression.octDecodeInRange\r\n * @see AttributeCompression.octEncodeToCartesian4\r\n */\r\nAttributeCompression.octDecodeFromCartesian4 = function (encoded, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"encoded\", encoded);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n  var x = encoded.x;\r\n  var y = encoded.y;\r\n  var z = encoded.z;\r\n  var w = encoded.w;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (\r\n    x < 0 ||\r\n    x > 255 ||\r\n    y < 0 ||\r\n    y > 255 ||\r\n    z < 0 ||\r\n    z > 255 ||\r\n    w < 0 ||\r\n    w > 255\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"x, y, z, and w must be unsigned normalized integers between 0 and 255\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var xOct16 = x * LEFT_SHIFT + y;\r\n  var yOct16 = z * LEFT_SHIFT + w;\r\n  return AttributeCompression.octDecodeInRange(xOct16, yOct16, 65535, result);\r\n};\r\n\r\n/**\r\n * Packs an oct encoded vector into a single floating-point number.\r\n *\r\n * @param {Cartesian2} encoded The oct encoded vector.\r\n * @returns {Number} The oct encoded vector packed into a single float.\r\n *\r\n */\r\nAttributeCompression.octPackFloat = function (encoded) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"encoded\", encoded);\r\n  //>>includeEnd('debug');\r\n  return 256.0 * encoded.x + encoded.y;\r\n};\r\n\r\nvar scratchEncodeCart2 = new Cartesian2();\r\n\r\n/**\r\n * Encodes a normalized vector into 2 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n * stores those values in a single float-point number.\r\n *\r\n * @param {Cartesian3} vector The normalized vector to be compressed into 2 byte 'oct' encoding.\r\n * @returns {Number} The 2 byte oct-encoded unit length vector.\r\n *\r\n * @exception {DeveloperError} vector must be normalized.\r\n */\r\nAttributeCompression.octEncodeFloat = function (vector) {\r\n  AttributeCompression.octEncode(vector, scratchEncodeCart2);\r\n  return AttributeCompression.octPackFloat(scratchEncodeCart2);\r\n};\r\n\r\n/**\r\n * Decodes a unit-length vector in 'oct' encoding packed in a floating-point number to a normalized 3-component vector.\r\n *\r\n * @param {Number} value The oct-encoded unit length vector stored as a single floating-point number.\r\n * @param {Cartesian3} result The decoded and normalized vector\r\n * @returns {Cartesian3} The decoded and normalized vector.\r\n *\r\n */\r\nAttributeCompression.octDecodeFloat = function (value, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"value\", value);\r\n  //>>includeEnd('debug');\r\n\r\n  var temp = value / 256.0;\r\n  var x = Math.floor(temp);\r\n  var y = (temp - x) * 256.0;\r\n\r\n  return AttributeCompression.octDecode(x, y, result);\r\n};\r\n\r\n/**\r\n * Encodes three normalized vectors into 6 SNORM values in the range of [0-255] following the 'oct' encoding and\r\n * packs those into two floating-point numbers.\r\n *\r\n * @param {Cartesian3} v1 A normalized vector to be compressed.\r\n * @param {Cartesian3} v2 A normalized vector to be compressed.\r\n * @param {Cartesian3} v3 A normalized vector to be compressed.\r\n * @param {Cartesian2} result The 'oct' encoded vectors packed into two floating-point numbers.\r\n * @returns {Cartesian2} The 'oct' encoded vectors packed into two floating-point numbers.\r\n *\r\n */\r\nAttributeCompression.octPack = function (v1, v2, v3, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"v1\", v1);\r\n  Check.defined(\"v2\", v2);\r\n  Check.defined(\"v3\", v3);\r\n  Check.defined(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var encoded1 = AttributeCompression.octEncodeFloat(v1);\r\n  var encoded2 = AttributeCompression.octEncodeFloat(v2);\r\n\r\n  var encoded3 = AttributeCompression.octEncode(v3, scratchEncodeCart2);\r\n  result.x = 65536.0 * encoded3.x + encoded1;\r\n  result.y = 65536.0 * encoded3.y + encoded2;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Decodes three unit-length vectors in 'oct' encoding packed into a floating-point number to a normalized 3-component vector.\r\n *\r\n * @param {Cartesian2} packed The three oct-encoded unit length vectors stored as two floating-point number.\r\n * @param {Cartesian3} v1 One decoded and normalized vector.\r\n * @param {Cartesian3} v2 One decoded and normalized vector.\r\n * @param {Cartesian3} v3 One decoded and normalized vector.\r\n */\r\nAttributeCompression.octUnpack = function (packed, v1, v2, v3) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"packed\", packed);\r\n  Check.defined(\"v1\", v1);\r\n  Check.defined(\"v2\", v2);\r\n  Check.defined(\"v3\", v3);\r\n  //>>includeEnd('debug');\r\n\r\n  var temp = packed.x / 65536.0;\r\n  var x = Math.floor(temp);\r\n  var encodedFloat1 = (temp - x) * 65536.0;\r\n\r\n  temp = packed.y / 65536.0;\r\n  var y = Math.floor(temp);\r\n  var encodedFloat2 = (temp - y) * 65536.0;\r\n\r\n  AttributeCompression.octDecodeFloat(encodedFloat1, v1);\r\n  AttributeCompression.octDecodeFloat(encodedFloat2, v2);\r\n  AttributeCompression.octDecode(x, y, v3);\r\n};\r\n\r\n/**\r\n * Pack texture coordinates into a single float. The texture coordinates will only preserve 12 bits of precision.\r\n *\r\n * @param {Cartesian2} textureCoordinates The texture coordinates to compress.  Both coordinates must be in the range 0.0-1.0.\r\n * @returns {Number} The packed texture coordinates.\r\n *\r\n */\r\nAttributeCompression.compressTextureCoordinates = function (\r\n  textureCoordinates\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"textureCoordinates\", textureCoordinates);\r\n  //>>includeEnd('debug');\r\n\r\n  // Move x and y to the range 0-4095;\r\n  var x = (textureCoordinates.x * 4095.0) | 0;\r\n  var y = (textureCoordinates.y * 4095.0) | 0;\r\n  return 4096.0 * x + y;\r\n};\r\n\r\n/**\r\n * Decompresses texture coordinates that were packed into a single float.\r\n *\r\n * @param {Number} compressed The compressed texture coordinates.\r\n * @param {Cartesian2} result The decompressed texture coordinates.\r\n * @returns {Cartesian2} The modified result parameter.\r\n *\r\n */\r\nAttributeCompression.decompressTextureCoordinates = function (\r\n  compressed,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"compressed\", compressed);\r\n  Check.defined(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var temp = compressed / 4096.0;\r\n  var xZeroTo4095 = Math.floor(temp);\r\n  result.x = xZeroTo4095 / 4095.0;\r\n  result.y = (compressed - xZeroTo4095 * 4096) / 4095;\r\n  return result;\r\n};\r\n\r\nfunction zigZagDecode(value) {\r\n  return (value >> 1) ^ -(value & 1);\r\n}\r\n\r\n/**\r\n * Decodes delta and ZigZag encoded vertices. This modifies the buffers in place.\r\n *\r\n * @param {Uint16Array} uBuffer The buffer view of u values.\r\n * @param {Uint16Array} vBuffer The buffer view of v values.\r\n * @param {Uint16Array} [heightBuffer] The buffer view of height values.\r\n *\r\n * @see {@link https://github.com/CesiumGS/quantized-mesh|quantized-mesh-1.0 terrain format}\r\n */\r\nAttributeCompression.zigZagDeltaDecode = function (\r\n  uBuffer,\r\n  vBuffer,\r\n  heightBuffer\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"uBuffer\", uBuffer);\r\n  Check.defined(\"vBuffer\", vBuffer);\r\n  Check.typeOf.number.equals(\r\n    \"uBuffer.length\",\r\n    \"vBuffer.length\",\r\n    uBuffer.length,\r\n    vBuffer.length\r\n  );\r\n  if (defined(heightBuffer)) {\r\n    Check.typeOf.number.equals(\r\n      \"uBuffer.length\",\r\n      \"heightBuffer.length\",\r\n      uBuffer.length,\r\n      heightBuffer.length\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var count = uBuffer.length;\r\n\r\n  var u = 0;\r\n  var v = 0;\r\n  var height = 0;\r\n\r\n  for (var i = 0; i < count; ++i) {\r\n    u += zigZagDecode(uBuffer[i]);\r\n    v += zigZagDecode(vBuffer[i]);\r\n\r\n    uBuffer[i] = u;\r\n    vBuffer[i] = v;\r\n\r\n    if (defined(heightBuffer)) {\r\n      height += zigZagDecode(heightBuffer[i]);\r\n      heightBuffer[i] = height;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Dequantizes a quantized typed array into a floating point typed array.\r\n *\r\n * @see {@link https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization#encoding-quantized-data}\r\n *\r\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array} typedArray The typed array for the quantized data.\r\n * @param {ComponentDatatype} componentDatatype The component datatype of the quantized data.\r\n * @param {AttributeType} type The attribute type of the quantized data.\r\n * @param {Number} count The number of attributes referenced in the dequantized array.\r\n *\r\n * @returns {Float32Array} The dequantized array.\r\n */\r\nAttributeCompression.dequantize = function (\r\n  typedArray,\r\n  componentDatatype,\r\n  type,\r\n  count\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"typedArray\", typedArray);\r\n  Check.defined(\"componentDatatype\", componentDatatype);\r\n  Check.defined(\"type\", type);\r\n  Check.defined(\"count\", count);\r\n  //>>includeEnd('debug');\r\n\r\n  var componentsPerAttribute = AttributeType.getNumberOfComponents(type);\r\n\r\n  var divisor;\r\n  switch (componentDatatype) {\r\n    case ComponentDatatype.BYTE:\r\n      divisor = 127.0;\r\n      break;\r\n    case ComponentDatatype.UNSIGNED_BYTE:\r\n      divisor = 255.0;\r\n      break;\r\n    case ComponentDatatype.SHORT:\r\n      divisor = 32767.0;\r\n      break;\r\n    case ComponentDatatype.UNSIGNED_SHORT:\r\n      divisor = 65535.0;\r\n      break;\r\n    case ComponentDatatype.INT:\r\n      divisor = 2147483647.0;\r\n      break;\r\n    case ComponentDatatype.UNSIGNED_INT:\r\n      divisor = 4294967295.0;\r\n      break;\r\n    //>>includeStart('debug', pragmas.debug);\r\n    default:\r\n      throw new DeveloperError(\r\n        \"Cannot dequantize component datatype: \" + componentDatatype\r\n      );\r\n    //>>includeEnd('debug');\r\n  }\r\n\r\n  var dequantizedTypedArray = new Float32Array(count * componentsPerAttribute);\r\n\r\n  for (var i = 0; i < count; i++) {\r\n    for (var j = 0; j < componentsPerAttribute; j++) {\r\n      var index = i * componentsPerAttribute + j;\r\n      dequantizedTypedArray[index] = Math.max(\r\n        typedArray[index] / divisor,\r\n        -1.0\r\n      );\r\n    }\r\n  }\r\n\r\n  return dequantizedTypedArray;\r\n};\r\n\r\nexport default AttributeCompression;\r\n"],"names":["AttributeType","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","attributeType","Number","Cartesian2","Cartesian3","Cartesian4","Matrix2","Matrix3","Matrix4","DeveloperError","Check","typeOf","string","Object","freeze","RIGHT_SHIFT","AttributeCompression","vector","rangeMax","result","defined","magSquared","magnitudeSquared","Math","abs","CesiumMath","EPSILON6","x","y","z","signNotZero","toSNorm","octEncodeInRange","octEncodeScratch","uint8ForceArray","Uint8Array","forceUint8","value","octEncodeToCartesian4","w","octDecodeInRange","fromSNorm","oldVX","normalize","octDecode","octDecodeFromCartesian4","encoded","object","xOct16","yOct16","octPackFloat","scratchEncodeCart2","zigZagDecode","octEncodeFloat","octEncode","octDecodeFloat","temp","floor","octPack","v1","v2","v3","encoded1","encoded2","encoded3","octUnpack","packed","encodedFloat1","encodedFloat2","compressTextureCoordinates","textureCoordinates","decompressTextureCoordinates","compressed","xZeroTo4095","zigZagDeltaDecode","uBuffer","vBuffer","heightBuffer","number","equals","length","count","u","v","height","i","dequantize","typedArray","componentDatatype","type","divisor","componentsPerAttribute","getNumberOfComponents","ComponentDatatype","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","dequantizedTypedArray","Float32Array","j","index","max"],"mappings":"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"}