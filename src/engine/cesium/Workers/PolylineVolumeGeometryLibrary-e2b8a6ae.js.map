{"version":3,"file":"PolylineVolumeGeometryLibrary-e2b8a6ae.js","sources":["../../../../Source/Core/CornerType.js","../../../../Source/Core/oneTimeWarning.js","../../../../Source/Core/PolylineVolumeGeometryLibrary.js"],"sourcesContent":["/**\r\n * Style options for corners.\r\n *\r\n * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\r\n * demonstrates the three corner types, as used by {@link CorridorGraphics}.\r\n *\r\n * @enum {Number}\r\n */\r\nvar CornerType = {\r\n  /**\r\n   * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n   *\r\n   * Corner has a smooth edge.\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  ROUNDED: 0,\r\n\r\n  /**\r\n   * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n   *\r\n   * Corner point is the intersection of adjacent edges.\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  MITERED: 1,\r\n\r\n  /**\r\n   * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n   *\r\n   * Corner is clipped.\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  BEVELED: 2,\r\n};\r\nexport default Object.freeze(CornerType);\r\n","import defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\nvar warnings = {};\r\n\r\n/**\r\n * Logs a one time message to the console.  Use this function instead of\r\n * <code>console.log</code> directly since this does not log duplicate messages\r\n * unless it is called from multiple workers.\r\n *\r\n * @function oneTimeWarning\r\n *\r\n * @param {String} identifier The unique identifier for this warning.\r\n * @param {String} [message=identifier] The message to log to the console.\r\n *\r\n * @example\r\n * for(var i=0;i<foo.length;++i) {\r\n *    if (!defined(foo[i].bar)) {\r\n *       // Something that can be recovered from but may happen a lot\r\n *       oneTimeWarning('foo.bar undefined', 'foo.bar is undefined. Setting to 0.');\r\n *       foo[i].bar = 0;\r\n *       // ...\r\n *    }\r\n * }\r\n *\r\n * @private\r\n */\r\nfunction oneTimeWarning(identifier, message) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(identifier)) {\r\n    throw new DeveloperError(\"identifier is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(warnings[identifier])) {\r\n    warnings[identifier] = true;\r\n    console.warn(defaultValue(message, identifier));\r\n  }\r\n}\r\n\r\noneTimeWarning.geometryOutlines =\r\n  \"Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.\";\r\n\r\noneTimeWarning.geometryZIndex =\r\n  \"Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored\";\r\n\r\noneTimeWarning.geometryHeightReference =\r\n  \"Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored\";\r\noneTimeWarning.geometryExtrudedHeightReference =\r\n  \"Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored\";\r\nexport default oneTimeWarning;\r\n","import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartesian4 from \"./Cartesian4.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport Transforms from \"./Transforms.js\";\r\nimport oneTimeWarning from \"../Core/oneTimeWarning.js\";\r\n\r\nvar scratch2Array = [new Cartesian3(), new Cartesian3()];\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchCartesian4 = new Cartesian3();\r\nvar scratchCartesian5 = new Cartesian3();\r\nvar scratchCartesian6 = new Cartesian3();\r\nvar scratchCartesian7 = new Cartesian3();\r\nvar scratchCartesian8 = new Cartesian3();\r\nvar scratchCartesian9 = new Cartesian3();\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolylineVolumeGeometryLibrary = {};\r\n\r\nvar cartographic = new Cartographic();\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n  var heights = new Array(positions.length);\r\n  for (var i = 0; i < positions.length; i++) {\r\n    var pos = positions[i];\r\n    cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\r\n    heights[i] = cartographic.height;\r\n    positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\r\n  }\r\n  return heights;\r\n}\r\n\r\nfunction subdivideHeights(points, h0, h1, granularity) {\r\n  var p0 = points[0];\r\n  var p1 = points[1];\r\n  var angleBetween = Cartesian3.angleBetween(p0, p1);\r\n  var numPoints = Math.ceil(angleBetween / granularity);\r\n  var heights = new Array(numPoints);\r\n  var i;\r\n  if (h0 === h1) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      heights[i] = h0;\r\n    }\r\n    heights.push(h1);\r\n    return heights;\r\n  }\r\n\r\n  var dHeight = h1 - h0;\r\n  var heightPerVertex = dHeight / numPoints;\r\n\r\n  for (i = 1; i < numPoints; i++) {\r\n    var h = h0 + i * heightPerVertex;\r\n    heights[i] = h;\r\n  }\r\n\r\n  heights[0] = h0;\r\n  heights.push(h1);\r\n  return heights;\r\n}\r\n\r\nvar nextScratch = new Cartesian3();\r\nvar prevScratch = new Cartesian3();\r\n\r\nfunction computeRotationAngle(start, end, position, ellipsoid) {\r\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n  var next = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, start, nextScratch),\r\n    nextScratch\r\n  );\r\n  var prev = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, end, prevScratch),\r\n    prevScratch\r\n  );\r\n  var angle = Cartesian2.angleBetween(next, prev);\r\n\r\n  return prev.x * next.y - prev.y * next.x >= 0.0 ? -angle : angle;\r\n}\r\n\r\nvar negativeX = new Cartesian3(-1, 0, 0);\r\nvar transform = new Matrix4();\r\nvar translation = new Matrix4();\r\nvar rotationZ = new Matrix3();\r\nvar scaleMatrix = Matrix3.IDENTITY.clone();\r\nvar westScratch = new Cartesian3();\r\nvar finalPosScratch = new Cartesian4();\r\nvar heightCartesian = new Cartesian3();\r\nfunction addPosition(\r\n  center,\r\n  left,\r\n  shape,\r\n  finalPositions,\r\n  ellipsoid,\r\n  height,\r\n  xScalar,\r\n  repeat\r\n) {\r\n  var west = westScratch;\r\n  var finalPosition = finalPosScratch;\r\n  transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\r\n\r\n  west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\r\n  west = Cartesian3.normalize(west, west);\r\n  var angle = computeRotationAngle(west, left, center, ellipsoid);\r\n  rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\r\n\r\n  heightCartesian.z = height;\r\n  transform = Matrix4.multiplyTransformation(\r\n    transform,\r\n    Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation),\r\n    transform\r\n  );\r\n  var scale = scaleMatrix;\r\n  scale[0] = xScalar;\r\n\r\n  for (var j = 0; j < repeat; j++) {\r\n    for (var i = 0; i < shape.length; i += 3) {\r\n      finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\r\n      finalPosition = Matrix3.multiplyByVector(\r\n        scale,\r\n        finalPosition,\r\n        finalPosition\r\n      );\r\n      finalPosition = Matrix4.multiplyByPoint(\r\n        transform,\r\n        finalPosition,\r\n        finalPosition\r\n      );\r\n      finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\r\n    }\r\n  }\r\n\r\n  return finalPositions;\r\n}\r\n\r\nvar centerScratch = new Cartesian3();\r\nfunction addPositions(\r\n  centers,\r\n  left,\r\n  shape,\r\n  finalPositions,\r\n  ellipsoid,\r\n  heights,\r\n  xScalar\r\n) {\r\n  for (var i = 0; i < centers.length; i += 3) {\r\n    var center = Cartesian3.fromArray(centers, i, centerScratch);\r\n    finalPositions = addPosition(\r\n      center,\r\n      left,\r\n      shape,\r\n      finalPositions,\r\n      ellipsoid,\r\n      heights[i / 3],\r\n      xScalar,\r\n      1\r\n    );\r\n  }\r\n  return finalPositions;\r\n}\r\n\r\nfunction convertShapeTo3DDuplicate(shape2D, boundingRectangle) {\r\n  //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\r\n  var length = shape2D.length;\r\n  var shape = new Array(length * 6);\r\n  var index = 0;\r\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n  var point = shape2D[0];\r\n  shape[index++] = point.x - xOffset;\r\n  shape[index++] = 0.0;\r\n  shape[index++] = point.y - yOffset;\r\n  for (var i = 1; i < length; i++) {\r\n    point = shape2D[i];\r\n    var x = point.x - xOffset;\r\n    var z = point.y - yOffset;\r\n    shape[index++] = x;\r\n    shape[index++] = 0.0;\r\n    shape[index++] = z;\r\n\r\n    shape[index++] = x;\r\n    shape[index++] = 0.0;\r\n    shape[index++] = z;\r\n  }\r\n  point = shape2D[0];\r\n  shape[index++] = point.x - xOffset;\r\n  shape[index++] = 0.0;\r\n  shape[index++] = point.y - yOffset;\r\n\r\n  return shape;\r\n}\r\n\r\nfunction convertShapeTo3D(shape2D, boundingRectangle) {\r\n  //orientate 2D shape to XZ plane center at (0, 0, 0)\r\n  var length = shape2D.length;\r\n  var shape = new Array(length * 3);\r\n  var index = 0;\r\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    shape[index++] = shape2D[i].x - xOffset;\r\n    shape[index++] = 0;\r\n    shape[index++] = shape2D[i].y - yOffset;\r\n  }\r\n\r\n  return shape;\r\n}\r\n\r\nvar quaterion = new Quaternion();\r\nvar startPointScratch = new Cartesian3();\r\nvar rotMatrix = new Matrix3();\r\nfunction computeRoundCorner(\r\n  pivot,\r\n  startPoint,\r\n  endPoint,\r\n  cornerType,\r\n  leftIsOutside,\r\n  ellipsoid,\r\n  finalPositions,\r\n  shape,\r\n  height,\r\n  duplicatePoints\r\n) {\r\n  var angle = Cartesian3.angleBetween(\r\n    Cartesian3.subtract(startPoint, pivot, scratch1),\r\n    Cartesian3.subtract(endPoint, pivot, scratch2)\r\n  );\r\n  var granularity =\r\n    cornerType === CornerType.BEVELED\r\n      ? 0\r\n      : Math.ceil(angle / CesiumMath.toRadians(5));\r\n\r\n  var m;\r\n  if (leftIsOutside) {\r\n    m = Matrix3.fromQuaternion(\r\n      Quaternion.fromAxisAngle(\r\n        Cartesian3.negate(pivot, scratch1),\r\n        angle / (granularity + 1),\r\n        quaterion\r\n      ),\r\n      rotMatrix\r\n    );\r\n  } else {\r\n    m = Matrix3.fromQuaternion(\r\n      Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion),\r\n      rotMatrix\r\n    );\r\n  }\r\n\r\n  var left;\r\n  var surfacePoint;\r\n  startPoint = Cartesian3.clone(startPoint, startPointScratch);\r\n  if (granularity > 0) {\r\n    var repeat = duplicatePoints ? 2 : 1;\r\n    for (var i = 0; i < granularity; i++) {\r\n      startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n      left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n      left = Cartesian3.normalize(left, left);\r\n      if (!leftIsOutside) {\r\n        left = Cartesian3.negate(left, left);\r\n      }\r\n      surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n      finalPositions = addPosition(\r\n        surfacePoint,\r\n        left,\r\n        shape,\r\n        finalPositions,\r\n        ellipsoid,\r\n        height,\r\n        1,\r\n        repeat\r\n      );\r\n    }\r\n  } else {\r\n    left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n    left = Cartesian3.normalize(left, left);\r\n    if (!leftIsOutside) {\r\n      left = Cartesian3.negate(left, left);\r\n    }\r\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n    finalPositions = addPosition(\r\n      surfacePoint,\r\n      left,\r\n      shape,\r\n      finalPositions,\r\n      ellipsoid,\r\n      height,\r\n      1,\r\n      1\r\n    );\r\n\r\n    endPoint = Cartesian3.clone(endPoint, startPointScratch);\r\n    left = Cartesian3.subtract(endPoint, pivot, scratch1);\r\n    left = Cartesian3.normalize(left, left);\r\n    if (!leftIsOutside) {\r\n      left = Cartesian3.negate(left, left);\r\n    }\r\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\r\n    finalPositions = addPosition(\r\n      surfacePoint,\r\n      left,\r\n      shape,\r\n      finalPositions,\r\n      ellipsoid,\r\n      height,\r\n      1,\r\n      1\r\n    );\r\n  }\r\n\r\n  return finalPositions;\r\n}\r\n\r\nPolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function (\r\n  shapePositions\r\n) {\r\n  var length = shapePositions.length;\r\n  var cleanedPositions = [];\r\n  for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n    var v0 = shapePositions[i0];\r\n    var v1 = shapePositions[i1];\r\n\r\n    if (!Cartesian2.equals(v0, v1)) {\r\n      cleanedPositions.push(v1); // Shallow copy!\r\n    }\r\n  }\r\n\r\n  return cleanedPositions;\r\n};\r\n\r\nPolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function (\r\n  forward,\r\n  backward,\r\n  position,\r\n  ellipsoid\r\n) {\r\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n  var next = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, forward, nextScratch),\r\n    nextScratch\r\n  );\r\n  var prev = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, backward, prevScratch),\r\n    prevScratch\r\n  );\r\n\r\n  return prev.x * next.y - prev.y * next.x >= 0.0;\r\n};\r\n\r\nvar scratchForwardProjection = new Cartesian3();\r\nvar scratchBackwardProjection = new Cartesian3();\r\n\r\nPolylineVolumeGeometryLibrary.computePositions = function (\r\n  positions,\r\n  shape2D,\r\n  boundingRectangle,\r\n  geometry,\r\n  duplicatePoints\r\n) {\r\n  var ellipsoid = geometry._ellipsoid;\r\n  var heights = scaleToSurface(positions, ellipsoid);\r\n  var granularity = geometry._granularity;\r\n  var cornerType = geometry._cornerType;\r\n  var shapeForSides = duplicatePoints\r\n    ? convertShapeTo3DDuplicate(shape2D, boundingRectangle)\r\n    : convertShapeTo3D(shape2D, boundingRectangle);\r\n  var shapeForEnds = duplicatePoints\r\n    ? convertShapeTo3D(shape2D, boundingRectangle)\r\n    : undefined;\r\n  var heightOffset = boundingRectangle.height / 2;\r\n  var width = boundingRectangle.width / 2;\r\n  var length = positions.length;\r\n  var finalPositions = [];\r\n  var ends = duplicatePoints ? [] : undefined;\r\n\r\n  var forward = scratchCartesian1;\r\n  var backward = scratchCartesian2;\r\n  var cornerDirection = scratchCartesian3;\r\n  var surfaceNormal = scratchCartesian4;\r\n  var pivot = scratchCartesian5;\r\n  var start = scratchCartesian6;\r\n  var end = scratchCartesian7;\r\n  var left = scratchCartesian8;\r\n  var previousPosition = scratchCartesian9;\r\n\r\n  var position = positions[0];\r\n  var nextPosition = positions[1];\r\n  surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n  forward = Cartesian3.subtract(nextPosition, position, forward);\r\n  forward = Cartesian3.normalize(forward, forward);\r\n  left = Cartesian3.cross(surfaceNormal, forward, left);\r\n  left = Cartesian3.normalize(left, left);\r\n  var h0 = heights[0];\r\n  var h1 = heights[1];\r\n  if (duplicatePoints) {\r\n    ends = addPosition(\r\n      position,\r\n      left,\r\n      shapeForEnds,\r\n      ends,\r\n      ellipsoid,\r\n      h0 + heightOffset,\r\n      1,\r\n      1\r\n    );\r\n  }\r\n  previousPosition = Cartesian3.clone(position, previousPosition);\r\n  position = nextPosition;\r\n  backward = Cartesian3.negate(forward, backward);\r\n  var subdividedHeights;\r\n  var subdividedPositions;\r\n  for (var i = 1; i < length - 1; i++) {\r\n    var repeat = duplicatePoints ? 2 : 1;\r\n    nextPosition = positions[i + 1];\r\n    if (position.equals(nextPosition)) {\r\n      oneTimeWarning(\r\n        \"Positions are too close and are considered equivalent with rounding error.\"\r\n      );\r\n      continue;\r\n    }\r\n    forward = Cartesian3.subtract(nextPosition, position, forward);\r\n    forward = Cartesian3.normalize(forward, forward);\r\n    cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\r\n    cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n    surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n\r\n    var forwardProjection = Cartesian3.multiplyByScalar(\r\n      surfaceNormal,\r\n      Cartesian3.dot(forward, surfaceNormal),\r\n      scratchForwardProjection\r\n    );\r\n    Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n    Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n    var backwardProjection = Cartesian3.multiplyByScalar(\r\n      surfaceNormal,\r\n      Cartesian3.dot(backward, surfaceNormal),\r\n      scratchBackwardProjection\r\n    );\r\n    Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n    Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n    var doCorner = !CesiumMath.equalsEpsilon(\r\n      Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)),\r\n      1.0,\r\n      CesiumMath.EPSILON7\r\n    );\r\n\r\n    if (doCorner) {\r\n      cornerDirection = Cartesian3.cross(\r\n        cornerDirection,\r\n        surfaceNormal,\r\n        cornerDirection\r\n      );\r\n      cornerDirection = Cartesian3.cross(\r\n        surfaceNormal,\r\n        cornerDirection,\r\n        cornerDirection\r\n      );\r\n      cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n      var scalar =\r\n        1 /\r\n        Math.max(\r\n          0.25,\r\n          Cartesian3.magnitude(\r\n            Cartesian3.cross(cornerDirection, backward, scratch1)\r\n          )\r\n        );\r\n      var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(\r\n        forward,\r\n        backward,\r\n        position,\r\n        ellipsoid\r\n      );\r\n      if (leftIsOutside) {\r\n        pivot = Cartesian3.add(\r\n          position,\r\n          Cartesian3.multiplyByScalar(\r\n            cornerDirection,\r\n            scalar * width,\r\n            cornerDirection\r\n          ),\r\n          pivot\r\n        );\r\n        start = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, width, start),\r\n          start\r\n        );\r\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n        subdividedHeights = subdivideHeights(\r\n          scratch2Array,\r\n          h0 + heightOffset,\r\n          h1 + heightOffset,\r\n          granularity\r\n        );\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n          positions: scratch2Array,\r\n          granularity: granularity,\r\n          ellipsoid: ellipsoid,\r\n        });\r\n        finalPositions = addPositions(\r\n          subdividedPositions,\r\n          left,\r\n          shapeForSides,\r\n          finalPositions,\r\n          ellipsoid,\r\n          subdividedHeights,\r\n          1\r\n        );\r\n        left = Cartesian3.cross(surfaceNormal, forward, left);\r\n        left = Cartesian3.normalize(left, left);\r\n        end = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, width, end),\r\n          end\r\n        );\r\n        if (\r\n          cornerType === CornerType.ROUNDED ||\r\n          cornerType === CornerType.BEVELED\r\n        ) {\r\n          computeRoundCorner(\r\n            pivot,\r\n            start,\r\n            end,\r\n            cornerType,\r\n            leftIsOutside,\r\n            ellipsoid,\r\n            finalPositions,\r\n            shapeForSides,\r\n            h1 + heightOffset,\r\n            duplicatePoints\r\n          );\r\n        } else {\r\n          cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\r\n          finalPositions = addPosition(\r\n            position,\r\n            cornerDirection,\r\n            shapeForSides,\r\n            finalPositions,\r\n            ellipsoid,\r\n            h1 + heightOffset,\r\n            scalar,\r\n            repeat\r\n          );\r\n        }\r\n        previousPosition = Cartesian3.clone(end, previousPosition);\r\n      } else {\r\n        pivot = Cartesian3.add(\r\n          position,\r\n          Cartesian3.multiplyByScalar(\r\n            cornerDirection,\r\n            scalar * width,\r\n            cornerDirection\r\n          ),\r\n          pivot\r\n        );\r\n        start = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, -width, start),\r\n          start\r\n        );\r\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n        subdividedHeights = subdivideHeights(\r\n          scratch2Array,\r\n          h0 + heightOffset,\r\n          h1 + heightOffset,\r\n          granularity\r\n        );\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n          positions: scratch2Array,\r\n          granularity: granularity,\r\n          ellipsoid: ellipsoid,\r\n        });\r\n        finalPositions = addPositions(\r\n          subdividedPositions,\r\n          left,\r\n          shapeForSides,\r\n          finalPositions,\r\n          ellipsoid,\r\n          subdividedHeights,\r\n          1\r\n        );\r\n        left = Cartesian3.cross(surfaceNormal, forward, left);\r\n        left = Cartesian3.normalize(left, left);\r\n        end = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, -width, end),\r\n          end\r\n        );\r\n        if (\r\n          cornerType === CornerType.ROUNDED ||\r\n          cornerType === CornerType.BEVELED\r\n        ) {\r\n          computeRoundCorner(\r\n            pivot,\r\n            start,\r\n            end,\r\n            cornerType,\r\n            leftIsOutside,\r\n            ellipsoid,\r\n            finalPositions,\r\n            shapeForSides,\r\n            h1 + heightOffset,\r\n            duplicatePoints\r\n          );\r\n        } else {\r\n          finalPositions = addPosition(\r\n            position,\r\n            cornerDirection,\r\n            shapeForSides,\r\n            finalPositions,\r\n            ellipsoid,\r\n            h1 + heightOffset,\r\n            scalar,\r\n            repeat\r\n          );\r\n        }\r\n        previousPosition = Cartesian3.clone(end, previousPosition);\r\n      }\r\n      backward = Cartesian3.negate(forward, backward);\r\n    } else {\r\n      finalPositions = addPosition(\r\n        previousPosition,\r\n        left,\r\n        shapeForSides,\r\n        finalPositions,\r\n        ellipsoid,\r\n        h0 + heightOffset,\r\n        1,\r\n        1\r\n      );\r\n      previousPosition = position;\r\n    }\r\n    h0 = h1;\r\n    h1 = heights[i + 1];\r\n    position = nextPosition;\r\n  }\r\n\r\n  scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n  scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\r\n  subdividedHeights = subdivideHeights(\r\n    scratch2Array,\r\n    h0 + heightOffset,\r\n    h1 + heightOffset,\r\n    granularity\r\n  );\r\n  subdividedPositions = PolylinePipeline.generateArc({\r\n    positions: scratch2Array,\r\n    granularity: granularity,\r\n    ellipsoid: ellipsoid,\r\n  });\r\n  finalPositions = addPositions(\r\n    subdividedPositions,\r\n    left,\r\n    shapeForSides,\r\n    finalPositions,\r\n    ellipsoid,\r\n    subdividedHeights,\r\n    1\r\n  );\r\n  if (duplicatePoints) {\r\n    ends = addPosition(\r\n      position,\r\n      left,\r\n      shapeForEnds,\r\n      ends,\r\n      ellipsoid,\r\n      h1 + heightOffset,\r\n      1,\r\n      1\r\n    );\r\n  }\r\n\r\n  length = finalPositions.length;\r\n  var posLength = duplicatePoints ? length + ends.length : length;\r\n  var combinedPositions = new Float64Array(posLength);\r\n  combinedPositions.set(finalPositions);\r\n  if (duplicatePoints) {\r\n    combinedPositions.set(ends, length);\r\n  }\r\n\r\n  return combinedPositions;\r\n};\r\nexport default PolylineVolumeGeometryLibrary;\r\n"],"names":["Object","freeze","ROUNDED","MITERED","BEVELED","warnings","oneTimeWarning","identifier","message","defined","DeveloperError","console","warn","defaultValue","geometryOutlines","geometryZIndex","geometryHeightReference","geometryExtrudedHeightReference","scratch2Array","Cartesian3","scratchCartesian1","scratchCartesian2","scratchCartesian3","scratchCartesian4","scratchCartesian5","scratchCartesian6","scratchCartesian7","scratchCartesian8","scratchCartesian9","scratch1","scratch2","PolylineVolumeGeometryLibrary","cartographic","Cartographic","subdivideHeights","points","h0","h1","granularity","i","p0","p1","angleBetween","numPoints","Math","ceil","heights","Array","push","heightPerVertex","h","nextScratch","prevScratch","negativeX","transform","Matrix4","translation","rotationZ","Matrix3","scaleMatrix","IDENTITY","clone","westScratch","finalPosScratch","Cartesian4","heightCartesian","addPosition","center","left","shape","finalPositions","ellipsoid","height","xScalar","repeat","west","finalPosition","Transforms","eastNorthUpToFixedFrame","multiplyByPointAsVector","angle","start","end","position","tangentPlane","EllipsoidTangentPlane","next","projectPointOntoPlane","add","prev","Cartesian2","x","y","computeRotationAngle","normalize","fromRotationZ","z","multiplyTransformation","fromRotationTranslation","scale","j","length","fromArray","multiplyByVector","multiplyByPoint","centerScratch","addPositions","centers","convertShapeTo3D","shape2D","boundingRectangle","index","xOffset","width","yOffset","quaterion","Quaternion","startPointScratch","rotMatrix","computeRoundCorner","pivot","startPoint","endPoint","cornerType","leftIsOutside","duplicatePoints","m","subtract","CornerType","CesiumMath","toRadians","fromQuaternion","fromAxisAngle","negate","scaleToGeodeticSurface","removeDuplicatesFromShape","shapePositions","cleanedPositions","i0","i1","v0","v1","equals","angleIsGreaterThanPi","forward","backward","scratchForwardProjection","scratchBackwardProjection","computePositions","positions","geometry","_ellipsoid","pos","cartesianToCartographic","scaleToSurface","_granularity","_cornerType","shapeForSides","point","convertShapeTo3DDuplicate","shapeForEnds","undefined","heightOffset","ends","cornerDirection","surfaceNormal","previousPosition","nextPosition","geodeticSurfaceNormal","cross","subdividedHeights","forwardProjection","multiplyByScalar","dot","backwardProjection","equalsEpsilon","abs","EPSILON7","scalar","max","magnitude","PolylinePipeline","generateArc","posLength","combinedPositions","Float64Array","set"],"mappings":"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"}