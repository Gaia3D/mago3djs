{"version":3,"file":"RuntimeError-ffe03243.js","sources":["../../../../Source/Core/DeveloperError.js","../../../../Source/Core/Check.js","../../../../Source/Core/RuntimeError.js"],"sourcesContent":["import defined from \"./defined.js\";\r\n\r\n/**\r\n * Constructs an exception object that is thrown due to a developer error, e.g., invalid argument,\r\n * argument out of range, etc.  This exception should only be thrown during development;\r\n * it usually indicates a bug in the calling code.  This exception should never be\r\n * caught; instead the calling code should strive not to generate it.\r\n * <br /><br />\r\n * On the other hand, a {@link RuntimeError} indicates an exception that may\r\n * be thrown at runtime, e.g., out of memory, that the calling code should be prepared\r\n * to catch.\r\n *\r\n * @alias DeveloperError\r\n * @constructor\r\n * @extends Error\r\n *\r\n * @param {String} [message] The error message for this exception.\r\n *\r\n * @see RuntimeError\r\n */\r\nfunction DeveloperError(message) {\r\n  /**\r\n   * 'DeveloperError' indicating that this exception was thrown due to a developer error.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.name = \"DeveloperError\";\r\n\r\n  /**\r\n   * The explanation for why this exception was thrown.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.message = message;\r\n\r\n  //Browsers such as IE don't have a stack property until you actually throw the error.\r\n  var stack;\r\n  try {\r\n    throw new Error();\r\n  } catch (e) {\r\n    stack = e.stack;\r\n  }\r\n\r\n  /**\r\n   * The stack trace of this exception, if available.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.stack = stack;\r\n}\r\n\r\nif (defined(Object.create)) {\r\n  DeveloperError.prototype = Object.create(Error.prototype);\r\n  DeveloperError.prototype.constructor = DeveloperError;\r\n}\r\n\r\nDeveloperError.prototype.toString = function () {\r\n  var str = this.name + \": \" + this.message;\r\n\r\n  if (defined(this.stack)) {\r\n    str += \"\\n\" + this.stack.toString();\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nDeveloperError.throwInstantiationError = function () {\r\n  throw new DeveloperError(\r\n    \"This function defines an interface and should not be called directly.\"\r\n  );\r\n};\r\nexport default DeveloperError;\r\n","import defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\n/**\r\n * Contains functions for checking that supplied arguments are of a specified type\r\n * or meet specified conditions\r\n * @private\r\n */\r\nvar Check = {};\r\n\r\n/**\r\n * Contains type checking functions, all using the typeof operator\r\n */\r\nCheck.typeOf = {};\r\n\r\nfunction getUndefinedErrorMessage(name) {\r\n  return name + \" is required, actual value was undefined\";\r\n}\r\n\r\nfunction getFailedTypeErrorMessage(actual, expected, name) {\r\n  return (\r\n    \"Expected \" +\r\n    name +\r\n    \" to be typeof \" +\r\n    expected +\r\n    \", actual typeof was \" +\r\n    actual\r\n  );\r\n}\r\n\r\n/**\r\n * Throws if test is not defined\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value that is to be checked\r\n * @exception {DeveloperError} test must be defined\r\n */\r\nCheck.defined = function (name, test) {\r\n  if (!defined(test)) {\r\n    throw new DeveloperError(getUndefinedErrorMessage(name));\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'function'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'function'\r\n */\r\nCheck.typeOf.func = function (name, test) {\r\n  if (typeof test !== \"function\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"function\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'string'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'string'\r\n */\r\nCheck.typeOf.string = function (name, test) {\r\n  if (typeof test !== \"string\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"string\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'number'\r\n */\r\nCheck.typeOf.number = function (name, test) {\r\n  if (typeof test !== \"number\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"number\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and less than limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and less than limit\r\n */\r\nCheck.typeOf.number.lessThan = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test >= limit) {\r\n    throw new DeveloperError(\r\n      \"Expected \" +\r\n        name +\r\n        \" to be less than \" +\r\n        limit +\r\n        \", actual value was \" +\r\n        test\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and less than or equal to limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and less than or equal to limit\r\n */\r\nCheck.typeOf.number.lessThanOrEquals = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test > limit) {\r\n    throw new DeveloperError(\r\n      \"Expected \" +\r\n        name +\r\n        \" to be less than or equal to \" +\r\n        limit +\r\n        \", actual value was \" +\r\n        test\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and greater than limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and greater than limit\r\n */\r\nCheck.typeOf.number.greaterThan = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test <= limit) {\r\n    throw new DeveloperError(\r\n      \"Expected \" +\r\n        name +\r\n        \" to be greater than \" +\r\n        limit +\r\n        \", actual value was \" +\r\n        test\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'number' and greater than or equal to limit\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @param {Number} limit The limit value to compare against\r\n * @exception {DeveloperError} test must be typeof 'number' and greater than or equal to limit\r\n */\r\nCheck.typeOf.number.greaterThanOrEquals = function (name, test, limit) {\r\n  Check.typeOf.number(name, test);\r\n  if (test < limit) {\r\n    throw new DeveloperError(\r\n      \"Expected \" +\r\n        name +\r\n        \" to be greater than or equal to \" +\r\n        limit +\r\n        \", actual value was \" +\r\n        test\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'object'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'object'\r\n */\r\nCheck.typeOf.object = function (name, test) {\r\n  if (typeof test !== \"object\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"object\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'boolean'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'boolean'\r\n */\r\nCheck.typeOf.bool = function (name, test) {\r\n  if (typeof test !== \"boolean\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"boolean\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test is not typeof 'bigint'\r\n *\r\n * @param {String} name The name of the variable being tested\r\n * @param {*} test The value to test\r\n * @exception {DeveloperError} test must be typeof 'bigint'\r\n */\r\nCheck.typeOf.bigint = function (name, test) {\r\n  if (typeof test !== \"bigint\") {\r\n    throw new DeveloperError(\r\n      getFailedTypeErrorMessage(typeof test, \"bigint\", name)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Throws if test1 and test2 is not typeof 'number' and not equal in value\r\n *\r\n * @param {String} name1 The name of the first variable being tested\r\n * @param {String} name2 The name of the second variable being tested against\r\n * @param {*} test1 The value to test\r\n * @param {*} test2 The value to test against\r\n * @exception {DeveloperError} test1 and test2 should be type of 'number' and be equal in value\r\n */\r\nCheck.typeOf.number.equals = function (name1, name2, test1, test2) {\r\n  Check.typeOf.number(name1, test1);\r\n  Check.typeOf.number(name2, test2);\r\n  if (test1 !== test2) {\r\n    throw new DeveloperError(\r\n      name1 +\r\n        \" must be equal to \" +\r\n        name2 +\r\n        \", the actual values are \" +\r\n        test1 +\r\n        \" and \" +\r\n        test2\r\n    );\r\n  }\r\n};\r\nexport default Check;\r\n","import defined from \"./defined.js\";\r\n\r\n/**\r\n * Constructs an exception object that is thrown due to an error that can occur at runtime, e.g.,\r\n * out of memory, could not compile shader, etc.  If a function may throw this\r\n * exception, the calling code should be prepared to catch it.\r\n * <br /><br />\r\n * On the other hand, a {@link DeveloperError} indicates an exception due\r\n * to a developer error, e.g., invalid argument, that usually indicates a bug in the\r\n * calling code.\r\n *\r\n * @alias RuntimeError\r\n * @constructor\r\n * @extends Error\r\n *\r\n * @param {String} [message] The error message for this exception.\r\n *\r\n * @see DeveloperError\r\n */\r\nfunction RuntimeError(message) {\r\n  /**\r\n   * 'RuntimeError' indicating that this exception was thrown due to a runtime error.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.name = \"RuntimeError\";\r\n\r\n  /**\r\n   * The explanation for why this exception was thrown.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.message = message;\r\n\r\n  //Browsers such as IE don't have a stack property until you actually throw the error.\r\n  var stack;\r\n  try {\r\n    throw new Error();\r\n  } catch (e) {\r\n    stack = e.stack;\r\n  }\r\n\r\n  /**\r\n   * The stack trace of this exception, if available.\r\n   * @type {String}\r\n   * @readonly\r\n   */\r\n  this.stack = stack;\r\n}\r\n\r\nif (defined(Object.create)) {\r\n  RuntimeError.prototype = Object.create(Error.prototype);\r\n  RuntimeError.prototype.constructor = RuntimeError;\r\n}\r\n\r\nRuntimeError.prototype.toString = function () {\r\n  var str = this.name + \": \" + this.message;\r\n\r\n  if (defined(this.stack)) {\r\n    str += \"\\n\" + this.stack.toString();\r\n  }\r\n\r\n  return str;\r\n};\r\nexport default RuntimeError;\r\n"],"names":["DeveloperError","message","stack","this","name","Error","e","defined","Object","create","prototype","constructor","toString","str","throwInstantiationError","Check","getFailedTypeErrorMessage","actual","expected","RuntimeError","typeOf","test","getUndefinedErrorMessage","func","string","number","lessThan","limit","lessThanOrEquals","greaterThan","greaterThanOrEquals","object","bool","bigint","equals","name1","name2","test1","test2"],"mappings":"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"}