{"version":3,"file":"createPlaneOutlineGeometry.js","sources":["../../../../Source/Core/PlaneOutlineGeometry.js","../../../../Source/WorkersES6/createPlaneOutlineGeometry.js"],"sourcesContent":["import BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defined from \"./defined.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\n\r\n/**\r\n * Describes geometry representing the outline of a plane centered at the origin, with a unit width and length.\r\n *\r\n * @alias PlaneOutlineGeometry\r\n * @constructor\r\n *\r\n */\r\nfunction PlaneOutlineGeometry() {\r\n  this._workerName = \"createPlaneOutlineGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nPlaneOutlineGeometry.packedLength = 0;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PlaneOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPlaneOutlineGeometry.pack = function (value, array) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PlaneOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {PlaneOutlineGeometry} The modified result parameter or a new PlaneOutlineGeometry instance if one was not provided.\r\n */\r\nPlaneOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new PlaneOutlineGeometry();\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nvar min = new Cartesian3(-0.5, -0.5, 0.0);\r\nvar max = new Cartesian3(0.5, 0.5, 0.0);\r\n\r\n/**\r\n * Computes the geometric representation of an outline of a plane, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPlaneOutlineGeometry.createGeometry = function () {\r\n  var attributes = new GeometryAttributes();\r\n  var indices = new Uint16Array(4 * 2);\r\n  var positions = new Float64Array(4 * 3);\r\n\r\n  positions[0] = min.x;\r\n  positions[1] = min.y;\r\n  positions[2] = min.z;\r\n  positions[3] = max.x;\r\n  positions[4] = min.y;\r\n  positions[5] = min.z;\r\n  positions[6] = max.x;\r\n  positions[7] = max.y;\r\n  positions[8] = min.z;\r\n  positions[9] = min.x;\r\n  positions[10] = max.y;\r\n  positions[11] = min.z;\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: positions,\r\n  });\r\n\r\n  indices[0] = 0;\r\n  indices[1] = 1;\r\n  indices[2] = 1;\r\n  indices[3] = 2;\r\n  indices[4] = 2;\r\n  indices[5] = 3;\r\n  indices[6] = 3;\r\n  indices[7] = 0;\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.LINES,\r\n    boundingSphere: new BoundingSphere(Cartesian3.ZERO, Math.sqrt(2.0)),\r\n  });\r\n};\r\nexport default PlaneOutlineGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport PlaneOutlineGeometry from \"../Core/PlaneOutlineGeometry.js\";\r\n\r\nfunction createPlaneOutlineGeometry(planeGeometry, offset) {\r\n  if (defined(offset)) {\r\n    planeGeometry = PlaneOutlineGeometry.unpack(planeGeometry, offset);\r\n  }\r\n  return PlaneOutlineGeometry.createGeometry(planeGeometry);\r\n}\r\nexport default createPlaneOutlineGeometry;\r\n"],"names":["PlaneOutlineGeometry","this","_workerName","packedLength","pack","value","array","Check","defined","unpack","startingIndex","result","min","Cartesian3","max","createGeometry","attributes","GeometryAttributes","indices","Uint16Array","positions","Float64Array","x","y","z","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","Geometry","primitiveType","PrimitiveType","LINES","boundingSphere","BoundingSphere","ZERO","Math","sqrt","planeGeometry","offset"],"mappings":"2RAiBA,SAASA,IACPC,KAAKC,YAAc,6BAOrBF,EAAqBG,aAAe,EAUpCH,EAAqBI,KAAO,SAAUC,EAAOC,GAM3C,OAJAC,QAAMC,QAAQ,QAASH,GACvBE,QAAMC,QAAQ,QAASF,GAGhBA,GAWTN,EAAqBS,OAAS,SAAUH,EAAOI,EAAeC,GAK5D,OAHAJ,QAAMC,QAAQ,QAASF,GAGlBE,UAAQG,GAINA,EAHE,IAAIX,GAMf,IAAIY,EAAM,IAAIC,cAAY,IAAM,GAAK,GACjCC,EAAM,IAAID,aAAW,GAAK,GAAK,UAOnCb,EAAqBe,eAAiB,WACpC,IAAIC,EAAa,IAAIC,qBACjBC,EAAU,IAAIC,YAAY,GAC1BC,EAAY,IAAIC,aAAa,IA8BjC,OA5BAD,EAAU,GAAKR,EAAIU,EACnBF,EAAU,GAAKR,EAAIW,EACnBH,EAAU,GAAKR,EAAIY,EACnBJ,EAAU,GAAKN,EAAIQ,EACnBF,EAAU,GAAKR,EAAIW,EACnBH,EAAU,GAAKR,EAAIY,EACnBJ,EAAU,GAAKN,EAAIQ,EACnBF,EAAU,GAAKN,EAAIS,EACnBH,EAAU,GAAKR,EAAIY,EACnBJ,EAAU,GAAKR,EAAIU,EACnBF,EAAU,IAAMN,EAAIS,EACpBH,EAAU,IAAMR,EAAIY,EAEpBR,EAAWS,SAAW,IAAIC,oBAAkB,CAC1CC,kBAAmBC,oBAAkBC,OACrCC,uBAAwB,EACxBC,OAAQX,IAGVF,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EACbA,EAAQ,GAAK,EAEN,IAAIc,WAAS,CAClBhB,WAAYA,EACZE,QAASA,EACTe,cAAeC,gBAAcC,MAC7BC,eAAgB,IAAIC,iBAAexB,aAAWyB,KAAMC,KAAKC,KAAK,OC1GlE,SAAoCC,EAAeC,GAIjD,OAHIlC,UAAQkC,KACVD,EAAgBzC,EAAqBS,OAAOgC,EAAeC,IAEtD1C,EAAqBe,eAAe0B"}