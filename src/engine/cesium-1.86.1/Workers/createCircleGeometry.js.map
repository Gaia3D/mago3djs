{"version":3,"file":"createCircleGeometry.js","sources":["../../../../Source/Core/CircleGeometry.js","../../../../Source/WorkersES6/createCircleGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipseGeometry from \"./EllipseGeometry.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\n/**\r\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias CircleGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n * @param {Number} options.radius The radius in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n *\r\n * @exception {DeveloperError} radius must be greater than zero.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n * @see CircleGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @example\r\n * // Create a circle.\r\n * var circle = new Cesium.CircleGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   radius : 100000.0\r\n * });\r\n * var geometry = Cesium.CircleGeometry.createGeometry(circle);\r\n */\r\nfunction CircleGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var radius = options.radius;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"radius\", radius);\r\n  //>>includeEnd('debug');\r\n\r\n  var ellipseGeometryOptions = {\r\n    center: options.center,\r\n    semiMajorAxis: radius,\r\n    semiMinorAxis: radius,\r\n    ellipsoid: options.ellipsoid,\r\n    height: options.height,\r\n    extrudedHeight: options.extrudedHeight,\r\n    granularity: options.granularity,\r\n    vertexFormat: options.vertexFormat,\r\n    stRotation: options.stRotation,\r\n    shadowVolume: options.shadowVolume,\r\n  };\r\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\r\n  this._workerName = \"createCircleGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CircleGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCircleGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n};\r\n\r\nvar scratchEllipseGeometry = new EllipseGeometry({\r\n  center: new Cartesian3(),\r\n  semiMajorAxis: 1.0,\r\n  semiMinorAxis: 1.0,\r\n});\r\nvar scratchOptions = {\r\n  center: new Cartesian3(),\r\n  radius: undefined,\r\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  granularity: undefined,\r\n  vertexFormat: new VertexFormat(),\r\n  stRotation: undefined,\r\n  semiMajorAxis: undefined,\r\n  semiMinorAxis: undefined,\r\n  shadowVolume: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CircleGeometry} [result] The object into which to store the result.\r\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\r\n */\r\nCircleGeometry.unpack = function (array, startingIndex, result) {\r\n  var ellipseGeometry = EllipseGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipseGeometry\r\n  );\r\n  scratchOptions.center = Cartesian3.clone(\r\n    ellipseGeometry._center,\r\n    scratchOptions.center\r\n  );\r\n  scratchOptions.ellipsoid = Ellipsoid.clone(\r\n    ellipseGeometry._ellipsoid,\r\n    scratchOptions.ellipsoid\r\n  );\r\n  scratchOptions.height = ellipseGeometry._height;\r\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n  scratchOptions.granularity = ellipseGeometry._granularity;\r\n  scratchOptions.vertexFormat = VertexFormat.clone(\r\n    ellipseGeometry._vertexFormat,\r\n    scratchOptions.vertexFormat\r\n  );\r\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\r\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n    return new CircleGeometry(scratchOptions);\r\n  }\r\n\r\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CircleGeometry} circleGeometry A description of the circle.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCircleGeometry.createGeometry = function (circleGeometry) {\r\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCircleGeometry.createShadowVolume = function (\r\n  circleGeometry,\r\n  minHeightFunc,\r\n  maxHeightFunc\r\n) {\r\n  var granularity = circleGeometry._ellipseGeometry._granularity;\r\n  var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\r\n\r\n  var minHeight = minHeightFunc(granularity, ellipsoid);\r\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n  return new CircleGeometry({\r\n    center: circleGeometry._ellipseGeometry._center,\r\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\r\n    ellipsoid: ellipsoid,\r\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\r\n    granularity: granularity,\r\n    extrudedHeight: minHeight,\r\n    height: maxHeight,\r\n    vertexFormat: VertexFormat.POSITION_ONLY,\r\n    shadowVolume: true,\r\n  });\r\n};\r\n\r\nObject.defineProperties(CircleGeometry.prototype, {\r\n  /**\r\n   * @private\r\n   */\r\n  rectangle: {\r\n    get: function () {\r\n      return this._ellipseGeometry.rectangle;\r\n    },\r\n  },\r\n  /**\r\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\r\n   * @private\r\n   */\r\n  textureCoordinateRotationPoints: {\r\n    get: function () {\r\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\r\n    },\r\n  },\r\n});\r\nexport default CircleGeometry;\r\n","import Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport CircleGeometry from \"../Core/CircleGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCircleGeometry(circleGeometry, offset) {\r\n  if (defined(offset)) {\r\n    circleGeometry = CircleGeometry.unpack(circleGeometry, offset);\r\n  }\r\n  circleGeometry._ellipseGeometry._center = Cartesian3.clone(\r\n    circleGeometry._ellipseGeometry._center\r\n  );\r\n  circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(\r\n    circleGeometry._ellipseGeometry._ellipsoid\r\n  );\r\n  return CircleGeometry.createGeometry(circleGeometry);\r\n}\r\nexport default createCircleGeometry;\r\n"],"names":["CircleGeometry","options","radius","defaultValue","EMPTY_OBJECT","Check","typeOf","number","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","vertexFormat","stRotation","shadowVolume","this","_ellipseGeometry","EllipseGeometry","_workerName","packedLength","pack","value","array","startingIndex","object","scratchEllipseGeometry","Cartesian3","scratchOptions","undefined","Ellipsoid","clone","UNIT_SPHERE","VertexFormat","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_vertexFormat","_stRotation","_shadowVolume","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints","offset"],"mappings":"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"}