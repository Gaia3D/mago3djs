{"version":3,"file":"PolygonPipeline-95c28d40.js","sources":["../../../../Source/ThirdParty/earcut.js","../../../../Source/Core/WindingOrder.js","../../../../Source/Core/PolygonPipeline.js"],"sourcesContent":["/* This file is automatically rebuilt by the Cesium build process. */\nvar earcut_1 = earcut;\nvar _default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    var filteredBridge = filterPoints(bridge, bridge.next);\n    filterPoints(bridgeReverse, bridgeReverse.next);\n\n    // Check if input node was removed by the filtering\n    return outerNode === bridge ? filteredBridge : outerNode;\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\nearcut_1.default = _default;\n\nexport default earcut_1;\n","import WebGLConstants from \"./WebGLConstants.js\";\r\n\r\n/**\r\n * Winding order defines the order of vertices for a triangle to be considered front-facing.\r\n *\r\n * @enum {Number}\r\n */\r\nvar WindingOrder = {\r\n  /**\r\n   * Vertices are in clockwise order.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  CLOCKWISE: WebGLConstants.CW,\r\n\r\n  /**\r\n   * Vertices are in counter-clockwise order.\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  COUNTER_CLOCKWISE: WebGLConstants.CCW,\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nWindingOrder.validate = function (windingOrder) {\r\n  return (\r\n    windingOrder === WindingOrder.CLOCKWISE ||\r\n    windingOrder === WindingOrder.COUNTER_CLOCKWISE\r\n  );\r\n};\r\n\r\nexport default Object.freeze(WindingOrder);\r\n","import earcut from \"../ThirdParty/earcut.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport EllipsoidRhumbLine from \"./EllipsoidRhumbLine.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport WindingOrder from \"./WindingOrder.js\";\r\n\r\nvar scaleToGeodeticHeightN = new Cartesian3();\r\nvar scaleToGeodeticHeightP = new Cartesian3();\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolygonPipeline = {};\r\n\r\n/**\r\n * @exception {DeveloperError} At least three positions are required.\r\n */\r\nPolygonPipeline.computeArea2D = function (positions) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"positions\", positions);\r\n  Check.typeOf.number.greaterThanOrEquals(\r\n    \"positions.length\",\r\n    positions.length,\r\n    3\r\n  );\r\n  //>>includeEnd('debug');\r\n\r\n  var length = positions.length;\r\n  var area = 0.0;\r\n\r\n  for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n    var v0 = positions[i0];\r\n    var v1 = positions[i1];\r\n\r\n    area += v0.x * v1.y - v1.x * v0.y;\r\n  }\r\n\r\n  return area * 0.5;\r\n};\r\n\r\n/**\r\n * @returns {WindingOrder} The winding order.\r\n *\r\n * @exception {DeveloperError} At least three positions are required.\r\n */\r\nPolygonPipeline.computeWindingOrder2D = function (positions) {\r\n  var area = PolygonPipeline.computeArea2D(positions);\r\n  return area > 0.0 ? WindingOrder.COUNTER_CLOCKWISE : WindingOrder.CLOCKWISE;\r\n};\r\n\r\n/**\r\n * Triangulate a polygon.\r\n *\r\n * @param {Cartesian2[]} positions Cartesian2 array containing the vertices of the polygon\r\n * @param {Number[]} [holes] An array of the staring indices of the holes.\r\n * @returns {Number[]} Index array representing triangles that fill the polygon\r\n */\r\nPolygonPipeline.triangulate = function (positions, holes) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"positions\", positions);\r\n  //>>includeEnd('debug');\r\n\r\n  var flattenedPositions = Cartesian2.packArray(positions);\r\n  return earcut(flattenedPositions, holes, 2);\r\n};\r\n\r\nvar subdivisionV0Scratch = new Cartesian3();\r\nvar subdivisionV1Scratch = new Cartesian3();\r\nvar subdivisionV2Scratch = new Cartesian3();\r\nvar subdivisionS0Scratch = new Cartesian3();\r\nvar subdivisionS1Scratch = new Cartesian3();\r\nvar subdivisionS2Scratch = new Cartesian3();\r\nvar subdivisionMidScratch = new Cartesian3();\r\n\r\n/**\r\n * Subdivides positions and raises points to the surface of the ellipsoid.\r\n *\r\n * @param {Ellipsoid} ellipsoid The ellipsoid the polygon in on.\r\n * @param {Cartesian3[]} positions An array of {@link Cartesian3} positions of the polygon.\r\n * @param {Number[]} indices An array of indices that determines the triangles in the polygon.\r\n * @param {Number} [granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n *\r\n * @exception {DeveloperError} At least three indices are required.\r\n * @exception {DeveloperError} The number of indices must be divisable by three.\r\n * @exception {DeveloperError} Granularity must be greater than zero.\r\n */\r\nPolygonPipeline.computeSubdivision = function (\r\n  ellipsoid,\r\n  positions,\r\n  indices,\r\n  granularity\r\n) {\r\n  granularity = defaultValue(granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"ellipsoid\", ellipsoid);\r\n  Check.defined(\"positions\", positions);\r\n  Check.defined(\"indices\", indices);\r\n  Check.typeOf.number.greaterThanOrEquals(\"indices.length\", indices.length, 3);\r\n  Check.typeOf.number.equals(\"indices.length % 3\", \"0\", indices.length % 3, 0);\r\n  Check.typeOf.number.greaterThan(\"granularity\", granularity, 0.0);\r\n  //>>includeEnd('debug');\r\n\r\n  // triangles that need (or might need) to be subdivided.\r\n  var triangles = indices.slice(0);\r\n\r\n  // New positions due to edge splits are appended to the positions list.\r\n  var i;\r\n  var length = positions.length;\r\n  var subdividedPositions = new Array(length * 3);\r\n  var q = 0;\r\n  for (i = 0; i < length; i++) {\r\n    var item = positions[i];\r\n    subdividedPositions[q++] = item.x;\r\n    subdividedPositions[q++] = item.y;\r\n    subdividedPositions[q++] = item.z;\r\n  }\r\n\r\n  var subdividedIndices = [];\r\n\r\n  // Used to make sure shared edges are not split more than once.\r\n  var edges = {};\r\n\r\n  var radius = ellipsoid.maximumRadius;\r\n  var minDistance = CesiumMath.chordLength(granularity, radius);\r\n  var minDistanceSqrd = minDistance * minDistance;\r\n\r\n  while (triangles.length > 0) {\r\n    var i2 = triangles.pop();\r\n    var i1 = triangles.pop();\r\n    var i0 = triangles.pop();\r\n\r\n    var v0 = Cartesian3.fromArray(\r\n      subdividedPositions,\r\n      i0 * 3,\r\n      subdivisionV0Scratch\r\n    );\r\n    var v1 = Cartesian3.fromArray(\r\n      subdividedPositions,\r\n      i1 * 3,\r\n      subdivisionV1Scratch\r\n    );\r\n    var v2 = Cartesian3.fromArray(\r\n      subdividedPositions,\r\n      i2 * 3,\r\n      subdivisionV2Scratch\r\n    );\r\n\r\n    var s0 = Cartesian3.multiplyByScalar(\r\n      Cartesian3.normalize(v0, subdivisionS0Scratch),\r\n      radius,\r\n      subdivisionS0Scratch\r\n    );\r\n    var s1 = Cartesian3.multiplyByScalar(\r\n      Cartesian3.normalize(v1, subdivisionS1Scratch),\r\n      radius,\r\n      subdivisionS1Scratch\r\n    );\r\n    var s2 = Cartesian3.multiplyByScalar(\r\n      Cartesian3.normalize(v2, subdivisionS2Scratch),\r\n      radius,\r\n      subdivisionS2Scratch\r\n    );\r\n\r\n    var g0 = Cartesian3.magnitudeSquared(\r\n      Cartesian3.subtract(s0, s1, subdivisionMidScratch)\r\n    );\r\n    var g1 = Cartesian3.magnitudeSquared(\r\n      Cartesian3.subtract(s1, s2, subdivisionMidScratch)\r\n    );\r\n    var g2 = Cartesian3.magnitudeSquared(\r\n      Cartesian3.subtract(s2, s0, subdivisionMidScratch)\r\n    );\r\n\r\n    var max = Math.max(g0, g1, g2);\r\n    var edge;\r\n    var mid;\r\n\r\n    // if the max length squared of a triangle edge is greater than the chord length of squared\r\n    // of the granularity, subdivide the triangle\r\n    if (max > minDistanceSqrd) {\r\n      if (g0 === max) {\r\n        edge = Math.min(i0, i1) + \" \" + Math.max(i0, i1);\r\n\r\n        i = edges[edge];\r\n        if (!defined(i)) {\r\n          mid = Cartesian3.add(v0, v1, subdivisionMidScratch);\r\n          Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n          subdividedPositions.push(mid.x, mid.y, mid.z);\r\n          i = subdividedPositions.length / 3 - 1;\r\n          edges[edge] = i;\r\n        }\r\n\r\n        triangles.push(i0, i, i2);\r\n        triangles.push(i, i1, i2);\r\n      } else if (g1 === max) {\r\n        edge = Math.min(i1, i2) + \" \" + Math.max(i1, i2);\r\n\r\n        i = edges[edge];\r\n        if (!defined(i)) {\r\n          mid = Cartesian3.add(v1, v2, subdivisionMidScratch);\r\n          Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n          subdividedPositions.push(mid.x, mid.y, mid.z);\r\n          i = subdividedPositions.length / 3 - 1;\r\n          edges[edge] = i;\r\n        }\r\n\r\n        triangles.push(i1, i, i0);\r\n        triangles.push(i, i2, i0);\r\n      } else if (g2 === max) {\r\n        edge = Math.min(i2, i0) + \" \" + Math.max(i2, i0);\r\n\r\n        i = edges[edge];\r\n        if (!defined(i)) {\r\n          mid = Cartesian3.add(v2, v0, subdivisionMidScratch);\r\n          Cartesian3.multiplyByScalar(mid, 0.5, mid);\r\n          subdividedPositions.push(mid.x, mid.y, mid.z);\r\n          i = subdividedPositions.length / 3 - 1;\r\n          edges[edge] = i;\r\n        }\r\n\r\n        triangles.push(i2, i, i1);\r\n        triangles.push(i, i0, i1);\r\n      }\r\n    } else {\r\n      subdividedIndices.push(i0);\r\n      subdividedIndices.push(i1);\r\n      subdividedIndices.push(i2);\r\n    }\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: {\r\n      position: new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: subdividedPositions,\r\n      }),\r\n    },\r\n    indices: subdividedIndices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n  });\r\n};\r\n\r\nvar subdivisionC0Scratch = new Cartographic();\r\nvar subdivisionC1Scratch = new Cartographic();\r\nvar subdivisionC2Scratch = new Cartographic();\r\nvar subdivisionCartographicScratch = new Cartographic();\r\n\r\n/**\r\n * Subdivides positions on rhumb lines and raises points to the surface of the ellipsoid.\r\n *\r\n * @param {Ellipsoid} ellipsoid The ellipsoid the polygon in on.\r\n * @param {Cartesian3[]} positions An array of {@link Cartesian3} positions of the polygon.\r\n * @param {Number[]} indices An array of indices that determines the triangles in the polygon.\r\n * @param {Number} [granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n *\r\n * @exception {DeveloperError} At least three indices are required.\r\n * @exception {DeveloperError} The number of indices must be divisable by three.\r\n * @exception {DeveloperError} Granularity must be greater than zero.\r\n */\r\nPolygonPipeline.computeRhumbLineSubdivision = function (\r\n  ellipsoid,\r\n  positions,\r\n  indices,\r\n  granularity\r\n) {\r\n  granularity = defaultValue(granularity, CesiumMath.RADIANS_PER_DEGREE);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"ellipsoid\", ellipsoid);\r\n  Check.defined(\"positions\", positions);\r\n  Check.defined(\"indices\", indices);\r\n  Check.typeOf.number.greaterThanOrEquals(\"indices.length\", indices.length, 3);\r\n  Check.typeOf.number.equals(\"indices.length % 3\", \"0\", indices.length % 3, 0);\r\n  Check.typeOf.number.greaterThan(\"granularity\", granularity, 0.0);\r\n  //>>includeEnd('debug');\r\n\r\n  // triangles that need (or might need) to be subdivided.\r\n  var triangles = indices.slice(0);\r\n\r\n  // New positions due to edge splits are appended to the positions list.\r\n  var i;\r\n  var length = positions.length;\r\n  var subdividedPositions = new Array(length * 3);\r\n  var q = 0;\r\n  for (i = 0; i < length; i++) {\r\n    var item = positions[i];\r\n    subdividedPositions[q++] = item.x;\r\n    subdividedPositions[q++] = item.y;\r\n    subdividedPositions[q++] = item.z;\r\n  }\r\n\r\n  var subdividedIndices = [];\r\n\r\n  // Used to make sure shared edges are not split more than once.\r\n  var edges = {};\r\n\r\n  var radius = ellipsoid.maximumRadius;\r\n  var minDistance = CesiumMath.chordLength(granularity, radius);\r\n\r\n  var rhumb0 = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n  var rhumb1 = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n  var rhumb2 = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n\r\n  while (triangles.length > 0) {\r\n    var i2 = triangles.pop();\r\n    var i1 = triangles.pop();\r\n    var i0 = triangles.pop();\r\n\r\n    var v0 = Cartesian3.fromArray(\r\n      subdividedPositions,\r\n      i0 * 3,\r\n      subdivisionV0Scratch\r\n    );\r\n    var v1 = Cartesian3.fromArray(\r\n      subdividedPositions,\r\n      i1 * 3,\r\n      subdivisionV1Scratch\r\n    );\r\n    var v2 = Cartesian3.fromArray(\r\n      subdividedPositions,\r\n      i2 * 3,\r\n      subdivisionV2Scratch\r\n    );\r\n\r\n    var c0 = ellipsoid.cartesianToCartographic(v0, subdivisionC0Scratch);\r\n    var c1 = ellipsoid.cartesianToCartographic(v1, subdivisionC1Scratch);\r\n    var c2 = ellipsoid.cartesianToCartographic(v2, subdivisionC2Scratch);\r\n\r\n    rhumb0.setEndPoints(c0, c1);\r\n    var g0 = rhumb0.surfaceDistance;\r\n    rhumb1.setEndPoints(c1, c2);\r\n    var g1 = rhumb1.surfaceDistance;\r\n    rhumb2.setEndPoints(c2, c0);\r\n    var g2 = rhumb2.surfaceDistance;\r\n\r\n    var max = Math.max(g0, g1, g2);\r\n    var edge;\r\n    var mid;\r\n    var midHeight;\r\n    var midCartesian3;\r\n\r\n    // if the max length squared of a triangle edge is greater than granularity, subdivide the triangle\r\n    if (max > minDistance) {\r\n      if (g0 === max) {\r\n        edge = Math.min(i0, i1) + \" \" + Math.max(i0, i1);\r\n\r\n        i = edges[edge];\r\n        if (!defined(i)) {\r\n          mid = rhumb0.interpolateUsingFraction(\r\n            0.5,\r\n            subdivisionCartographicScratch\r\n          );\r\n          midHeight = (c0.height + c1.height) * 0.5;\r\n          midCartesian3 = Cartesian3.fromRadians(\r\n            mid.longitude,\r\n            mid.latitude,\r\n            midHeight,\r\n            ellipsoid,\r\n            subdivisionMidScratch\r\n          );\r\n          subdividedPositions.push(\r\n            midCartesian3.x,\r\n            midCartesian3.y,\r\n            midCartesian3.z\r\n          );\r\n          i = subdividedPositions.length / 3 - 1;\r\n          edges[edge] = i;\r\n        }\r\n\r\n        triangles.push(i0, i, i2);\r\n        triangles.push(i, i1, i2);\r\n      } else if (g1 === max) {\r\n        edge = Math.min(i1, i2) + \" \" + Math.max(i1, i2);\r\n\r\n        i = edges[edge];\r\n        if (!defined(i)) {\r\n          mid = rhumb1.interpolateUsingFraction(\r\n            0.5,\r\n            subdivisionCartographicScratch\r\n          );\r\n          midHeight = (c1.height + c2.height) * 0.5;\r\n          midCartesian3 = Cartesian3.fromRadians(\r\n            mid.longitude,\r\n            mid.latitude,\r\n            midHeight,\r\n            ellipsoid,\r\n            subdivisionMidScratch\r\n          );\r\n          subdividedPositions.push(\r\n            midCartesian3.x,\r\n            midCartesian3.y,\r\n            midCartesian3.z\r\n          );\r\n          i = subdividedPositions.length / 3 - 1;\r\n          edges[edge] = i;\r\n        }\r\n\r\n        triangles.push(i1, i, i0);\r\n        triangles.push(i, i2, i0);\r\n      } else if (g2 === max) {\r\n        edge = Math.min(i2, i0) + \" \" + Math.max(i2, i0);\r\n\r\n        i = edges[edge];\r\n        if (!defined(i)) {\r\n          mid = rhumb2.interpolateUsingFraction(\r\n            0.5,\r\n            subdivisionCartographicScratch\r\n          );\r\n          midHeight = (c2.height + c0.height) * 0.5;\r\n          midCartesian3 = Cartesian3.fromRadians(\r\n            mid.longitude,\r\n            mid.latitude,\r\n            midHeight,\r\n            ellipsoid,\r\n            subdivisionMidScratch\r\n          );\r\n          subdividedPositions.push(\r\n            midCartesian3.x,\r\n            midCartesian3.y,\r\n            midCartesian3.z\r\n          );\r\n          i = subdividedPositions.length / 3 - 1;\r\n          edges[edge] = i;\r\n        }\r\n\r\n        triangles.push(i2, i, i1);\r\n        triangles.push(i, i0, i1);\r\n      }\r\n    } else {\r\n      subdividedIndices.push(i0);\r\n      subdividedIndices.push(i1);\r\n      subdividedIndices.push(i2);\r\n    }\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: {\r\n      position: new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.DOUBLE,\r\n        componentsPerAttribute: 3,\r\n        values: subdividedPositions,\r\n      }),\r\n    },\r\n    indices: subdividedIndices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n  });\r\n};\r\n\r\n/**\r\n * Scales each position of a geometry's position attribute to a height, in place.\r\n *\r\n * @param {Number[]} positions The array of numbers representing the positions to be scaled\r\n * @param {Number} [height=0.0] The desired height to add to the positions\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @param {Boolean} [scaleToSurface=true] <code>true</code> if the positions need to be scaled to the surface before the height is added.\r\n * @returns {Number[]} The input array of positions, scaled to height\r\n */\r\nPolygonPipeline.scaleToGeodeticHeight = function (\r\n  positions,\r\n  height,\r\n  ellipsoid,\r\n  scaleToSurface\r\n) {\r\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n  var n = scaleToGeodeticHeightN;\r\n  var p = scaleToGeodeticHeightP;\r\n\r\n  height = defaultValue(height, 0.0);\r\n  scaleToSurface = defaultValue(scaleToSurface, true);\r\n\r\n  if (defined(positions)) {\r\n    var length = positions.length;\r\n\r\n    for (var i = 0; i < length; i += 3) {\r\n      Cartesian3.fromArray(positions, i, p);\r\n\r\n      if (scaleToSurface) {\r\n        p = ellipsoid.scaleToGeodeticSurface(p, p);\r\n      }\r\n\r\n      if (height !== 0) {\r\n        n = ellipsoid.geodeticSurfaceNormal(p, n);\r\n\r\n        Cartesian3.multiplyByScalar(n, height, n);\r\n        Cartesian3.add(p, n, p);\r\n      }\r\n\r\n      positions[i] = p.x;\r\n      positions[i + 1] = p.y;\r\n      positions[i + 2] = p.z;\r\n    }\r\n  }\r\n\r\n  return positions;\r\n};\r\nexport default PolygonPipeline;\r\n"],"names":["earcut_1","earcut","_default","data","holeIndices","dim","minX","minY","maxX","maxY","x","y","invSize","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","i","len","list","queue","steiner","push","getLeftmost","sort","compareX","filterPoints","eliminateHole","eliminateHoles","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","again","p","area","ear","pass","z","zOrder","prevZ","nextZ","q","e","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","a","b","c","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","maxZ","n","intersects","locallyInside","isValidDiagonal","splitPolygon","hole","bridge","m","hx","hy","qx","Infinity","tan","mx","my","tanMin","abs","sectorContainsSector","findHoleBridge","bridgeReverse","filteredBridge","leftmost","ax","ay","bx","by","cx","cy","px","py","intersectsPolygon","inside","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","a2","Node","b2","an","bp","this","sum","j","deviation","polygonArea","trianglesArea","flatten","result","vertices","holes","dimensions","holeIndex","d","default","WindingOrder","CLOCKWISE","WebGLConstants","CW","COUNTER_CLOCKWISE","CCW","windingOrder","Object","freeze","scaleToGeodeticHeightN","Cartesian3","scaleToGeodeticHeightP","PolygonPipeline","positions","Check","defined","typeOf","number","greaterThanOrEquals","i0","i1","v0","v1","computeArea2D","flattenedPositions","Cartesian2","packArray","subdivisionV0Scratch","subdivisionV1Scratch","subdivisionV2Scratch","subdivisionS0Scratch","subdivisionS1Scratch","subdivisionS2Scratch","subdivisionMidScratch","computeSubdivision","ellipsoid","indices","granularity","defaultValue","CesiumMath","RADIANS_PER_DEGREE","object","greaterThan","slice","subdividedPositions","Array","item","subdividedIndices","edges","radius","maximumRadius","minDistance","chordLength","minDistanceSqrd","edge","mid","i2","pop","fromArray","v2","s0","multiplyByScalar","normalize","s1","s2","g0","magnitudeSquared","subtract","g1","g2","add","Geometry","attributes","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","primitiveType","PrimitiveType","TRIANGLES","subdivisionC0Scratch","Cartographic","subdivisionC1Scratch","subdivisionC2Scratch","subdivisionCartographicScratch","computeRhumbLineSubdivision","rhumb0","EllipsoidRhumbLine","undefined","rhumb1","rhumb2","c0","cartesianToCartographic","c1","c2","setEndPoints","surfaceDistance","midHeight","midCartesian3","interpolateUsingFraction","height","fromRadians","longitude","latitude","scaleToGeodeticHeight","scaleToSurface","Ellipsoid","WGS84","scaleToGeodeticSurface","geodeticSurfaceNormal"],"mappings":"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"}