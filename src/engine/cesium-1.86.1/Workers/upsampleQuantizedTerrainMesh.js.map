{"version":3,"file":"upsampleQuantizedTerrainMesh.js","sources":["../../../../Source/Core/Intersections2D.js","../../../../Source/WorkersES6/upsampleQuantizedTerrainMesh.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\n\r\n/**\r\n * Contains functions for operating on 2D triangles.\r\n *\r\n * @namespace Intersections2D\r\n */\r\nvar Intersections2D = {};\r\n\r\n/**\r\n * Splits a 2D triangle at given axis-aligned threshold value and returns the resulting\r\n * polygon on a given side of the threshold.  The resulting polygon may have 0, 1, 2,\r\n * 3, or 4 vertices.\r\n *\r\n * @param {Number} threshold The threshold coordinate value at which to clip the triangle.\r\n * @param {Boolean} keepAbove true to keep the portion of the triangle above the threshold, or false\r\n *                            to keep the portion below.\r\n * @param {Number} u0 The coordinate of the first vertex in the triangle, in counter-clockwise order.\r\n * @param {Number} u1 The coordinate of the second vertex in the triangle, in counter-clockwise order.\r\n * @param {Number} u2 The coordinate of the third vertex in the triangle, in counter-clockwise order.\r\n * @param {Number[]} [result] The array into which to copy the result.  If this parameter is not supplied,\r\n *                            a new array is constructed and returned.\r\n * @returns {Number[]} The polygon that results after the clip, specified as a list of\r\n *                     vertices.  The vertices are specified in counter-clockwise order.\r\n *                     Each vertex is either an index from the existing list (identified as\r\n *                     a 0, 1, or 2) or -1 indicating a new vertex not in the original triangle.\r\n *                     For new vertices, the -1 is followed by three additional numbers: the\r\n *                     index of each of the two original vertices forming the line segment that\r\n *                     the new vertex lies on, and the fraction of the distance from the first\r\n *                     vertex to the second one.\r\n *\r\n * @example\r\n * var result = Cesium.Intersections2D.clipTriangleAtAxisAlignedThreshold(0.5, false, 0.2, 0.6, 0.4);\r\n * // result === [2, 0, -1, 1, 0, 0.25, -1, 1, 2, 0.5]\r\n */\r\nIntersections2D.clipTriangleAtAxisAlignedThreshold = function (\r\n  threshold,\r\n  keepAbove,\r\n  u0,\r\n  u1,\r\n  u2,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(threshold)) {\r\n    throw new DeveloperError(\"threshold is required.\");\r\n  }\r\n  if (!defined(keepAbove)) {\r\n    throw new DeveloperError(\"keepAbove is required.\");\r\n  }\r\n  if (!defined(u0)) {\r\n    throw new DeveloperError(\"u0 is required.\");\r\n  }\r\n  if (!defined(u1)) {\r\n    throw new DeveloperError(\"u1 is required.\");\r\n  }\r\n  if (!defined(u2)) {\r\n    throw new DeveloperError(\"u2 is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = [];\r\n  } else {\r\n    result.length = 0;\r\n  }\r\n\r\n  var u0Behind;\r\n  var u1Behind;\r\n  var u2Behind;\r\n  if (keepAbove) {\r\n    u0Behind = u0 < threshold;\r\n    u1Behind = u1 < threshold;\r\n    u2Behind = u2 < threshold;\r\n  } else {\r\n    u0Behind = u0 > threshold;\r\n    u1Behind = u1 > threshold;\r\n    u2Behind = u2 > threshold;\r\n  }\r\n\r\n  var numBehind = u0Behind + u1Behind + u2Behind;\r\n\r\n  var u01Ratio;\r\n  var u02Ratio;\r\n  var u12Ratio;\r\n  var u10Ratio;\r\n  var u20Ratio;\r\n  var u21Ratio;\r\n\r\n  if (numBehind === 1) {\r\n    if (u0Behind) {\r\n      u01Ratio = (threshold - u0) / (u1 - u0);\r\n      u02Ratio = (threshold - u0) / (u2 - u0);\r\n\r\n      result.push(1);\r\n\r\n      result.push(2);\r\n\r\n      if (u02Ratio !== 1.0) {\r\n        result.push(-1);\r\n        result.push(0);\r\n        result.push(2);\r\n        result.push(u02Ratio);\r\n      }\r\n\r\n      if (u01Ratio !== 1.0) {\r\n        result.push(-1);\r\n        result.push(0);\r\n        result.push(1);\r\n        result.push(u01Ratio);\r\n      }\r\n    } else if (u1Behind) {\r\n      u12Ratio = (threshold - u1) / (u2 - u1);\r\n      u10Ratio = (threshold - u1) / (u0 - u1);\r\n\r\n      result.push(2);\r\n\r\n      result.push(0);\r\n\r\n      if (u10Ratio !== 1.0) {\r\n        result.push(-1);\r\n        result.push(1);\r\n        result.push(0);\r\n        result.push(u10Ratio);\r\n      }\r\n\r\n      if (u12Ratio !== 1.0) {\r\n        result.push(-1);\r\n        result.push(1);\r\n        result.push(2);\r\n        result.push(u12Ratio);\r\n      }\r\n    } else if (u2Behind) {\r\n      u20Ratio = (threshold - u2) / (u0 - u2);\r\n      u21Ratio = (threshold - u2) / (u1 - u2);\r\n\r\n      result.push(0);\r\n\r\n      result.push(1);\r\n\r\n      if (u21Ratio !== 1.0) {\r\n        result.push(-1);\r\n        result.push(2);\r\n        result.push(1);\r\n        result.push(u21Ratio);\r\n      }\r\n\r\n      if (u20Ratio !== 1.0) {\r\n        result.push(-1);\r\n        result.push(2);\r\n        result.push(0);\r\n        result.push(u20Ratio);\r\n      }\r\n    }\r\n  } else if (numBehind === 2) {\r\n    if (!u0Behind && u0 !== threshold) {\r\n      u10Ratio = (threshold - u1) / (u0 - u1);\r\n      u20Ratio = (threshold - u2) / (u0 - u2);\r\n\r\n      result.push(0);\r\n\r\n      result.push(-1);\r\n      result.push(1);\r\n      result.push(0);\r\n      result.push(u10Ratio);\r\n\r\n      result.push(-1);\r\n      result.push(2);\r\n      result.push(0);\r\n      result.push(u20Ratio);\r\n    } else if (!u1Behind && u1 !== threshold) {\r\n      u21Ratio = (threshold - u2) / (u1 - u2);\r\n      u01Ratio = (threshold - u0) / (u1 - u0);\r\n\r\n      result.push(1);\r\n\r\n      result.push(-1);\r\n      result.push(2);\r\n      result.push(1);\r\n      result.push(u21Ratio);\r\n\r\n      result.push(-1);\r\n      result.push(0);\r\n      result.push(1);\r\n      result.push(u01Ratio);\r\n    } else if (!u2Behind && u2 !== threshold) {\r\n      u02Ratio = (threshold - u0) / (u2 - u0);\r\n      u12Ratio = (threshold - u1) / (u2 - u1);\r\n\r\n      result.push(2);\r\n\r\n      result.push(-1);\r\n      result.push(0);\r\n      result.push(2);\r\n      result.push(u02Ratio);\r\n\r\n      result.push(-1);\r\n      result.push(1);\r\n      result.push(2);\r\n      result.push(u12Ratio);\r\n    }\r\n  } else if (numBehind !== 3) {\r\n    // Completely in front of threshold\r\n    result.push(0);\r\n    result.push(1);\r\n    result.push(2);\r\n  }\r\n  // else Completely behind threshold\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compute the barycentric coordinates of a 2D position within a 2D triangle.\r\n *\r\n * @param {Number} x The x coordinate of the position for which to find the barycentric coordinates.\r\n * @param {Number} y The y coordinate of the position for which to find the barycentric coordinates.\r\n * @param {Number} x1 The x coordinate of the triangle's first vertex.\r\n * @param {Number} y1 The y coordinate of the triangle's first vertex.\r\n * @param {Number} x2 The x coordinate of the triangle's second vertex.\r\n * @param {Number} y2 The y coordinate of the triangle's second vertex.\r\n * @param {Number} x3 The x coordinate of the triangle's third vertex.\r\n * @param {Number} y3 The y coordinate of the triangle's third vertex.\r\n * @param {Cartesian3} [result] The instance into to which to copy the result.  If this parameter\r\n *                     is undefined, a new instance is created and returned.\r\n * @returns {Cartesian3} The barycentric coordinates of the position within the triangle.\r\n *\r\n * @example\r\n * var result = Cesium.Intersections2D.computeBarycentricCoordinates(0.0, 0.0, 0.0, 1.0, -1, -0.5, 1, -0.5);\r\n * // result === new Cesium.Cartesian3(1.0 / 3.0, 1.0 / 3.0, 1.0 / 3.0);\r\n */\r\nIntersections2D.computeBarycentricCoordinates = function (\r\n  x,\r\n  y,\r\n  x1,\r\n  y1,\r\n  x2,\r\n  y2,\r\n  x3,\r\n  y3,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(x)) {\r\n    throw new DeveloperError(\"x is required.\");\r\n  }\r\n  if (!defined(y)) {\r\n    throw new DeveloperError(\"y is required.\");\r\n  }\r\n  if (!defined(x1)) {\r\n    throw new DeveloperError(\"x1 is required.\");\r\n  }\r\n  if (!defined(y1)) {\r\n    throw new DeveloperError(\"y1 is required.\");\r\n  }\r\n  if (!defined(x2)) {\r\n    throw new DeveloperError(\"x2 is required.\");\r\n  }\r\n  if (!defined(y2)) {\r\n    throw new DeveloperError(\"y2 is required.\");\r\n  }\r\n  if (!defined(x3)) {\r\n    throw new DeveloperError(\"x3 is required.\");\r\n  }\r\n  if (!defined(y3)) {\r\n    throw new DeveloperError(\"y3 is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var x1mx3 = x1 - x3;\r\n  var x3mx2 = x3 - x2;\r\n  var y2my3 = y2 - y3;\r\n  var y1my3 = y1 - y3;\r\n  var inverseDeterminant = 1.0 / (y2my3 * x1mx3 + x3mx2 * y1my3);\r\n  var ymy3 = y - y3;\r\n  var xmx3 = x - x3;\r\n  var l1 = (y2my3 * xmx3 + x3mx2 * ymy3) * inverseDeterminant;\r\n  var l2 = (-y1my3 * xmx3 + x1mx3 * ymy3) * inverseDeterminant;\r\n  var l3 = 1.0 - l1 - l2;\r\n\r\n  if (defined(result)) {\r\n    result.x = l1;\r\n    result.y = l2;\r\n    result.z = l3;\r\n    return result;\r\n  }\r\n  return new Cartesian3(l1, l2, l3);\r\n};\r\n\r\n/**\r\n * Compute the intersection between 2 line segments\r\n *\r\n * @param {Number} x00 The x coordinate of the first line's first vertex.\r\n * @param {Number} y00 The y coordinate of the first line's first vertex.\r\n * @param {Number} x01 The x coordinate of the first line's second vertex.\r\n * @param {Number} y01 The y coordinate of the first line's second vertex.\r\n * @param {Number} x10 The x coordinate of the second line's first vertex.\r\n * @param {Number} y10 The y coordinate of the second line's first vertex.\r\n * @param {Number} x11 The x coordinate of the second line's second vertex.\r\n * @param {Number} y11 The y coordinate of the second line's second vertex.\r\n * @param {Cartesian2} [result] The instance into to which to copy the result. If this parameter\r\n *                     is undefined, a new instance is created and returned.\r\n * @returns {Cartesian2} The intersection point, undefined if there is no intersection point or lines are coincident.\r\n *\r\n * @example\r\n * var result = Cesium.Intersections2D.computeLineSegmentLineSegmentIntersection(0.0, 0.0, 0.0, 2.0, -1, 1, 1, 1);\r\n * // result === new Cesium.Cartesian2(0.0, 1.0);\r\n */\r\nIntersections2D.computeLineSegmentLineSegmentIntersection = function (\r\n  x00,\r\n  y00,\r\n  x01,\r\n  y01,\r\n  x10,\r\n  y10,\r\n  x11,\r\n  y11,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"x00\", x00);\r\n  Check.typeOf.number(\"y00\", y00);\r\n  Check.typeOf.number(\"x01\", x01);\r\n  Check.typeOf.number(\"y01\", y01);\r\n  Check.typeOf.number(\"x10\", x10);\r\n  Check.typeOf.number(\"y10\", y10);\r\n  Check.typeOf.number(\"x11\", x11);\r\n  Check.typeOf.number(\"y11\", y11);\r\n  //>>includeEnd('debug');\r\n\r\n  var numerator1A = (x11 - x10) * (y00 - y10) - (y11 - y10) * (x00 - x10);\r\n  var numerator1B = (x01 - x00) * (y00 - y10) - (y01 - y00) * (x00 - x10);\r\n  var denominator1 = (y11 - y10) * (x01 - x00) - (x11 - x10) * (y01 - y00);\r\n\r\n  // If denominator = 0, then lines are parallel. If denominator = 0 and both numerators are 0, then coincident\r\n  if (denominator1 === 0) {\r\n    return;\r\n  }\r\n\r\n  var ua1 = numerator1A / denominator1;\r\n  var ub1 = numerator1B / denominator1;\r\n\r\n  if (ua1 >= 0 && ua1 <= 1 && ub1 >= 0 && ub1 <= 1) {\r\n    if (!defined(result)) {\r\n      result = new Cartesian2();\r\n    }\r\n\r\n    result.x = x00 + ua1 * (x01 - x00);\r\n    result.y = y00 + ua1 * (y01 - y00);\r\n\r\n    return result;\r\n  }\r\n};\r\nexport default Intersections2D;\r\n","import AttributeCompression from \"../Core/AttributeCompression.js\";\r\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\r\nimport Cartesian2 from \"../Core/Cartesian2.js\";\r\nimport Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport Cartographic from \"../Core/Cartographic.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport EllipsoidalOccluder from \"../Core/EllipsoidalOccluder.js\";\r\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\r\nimport Intersections2D from \"../Core/Intersections2D.js\";\r\nimport CesiumMath from \"../Core/Math.js\";\r\nimport OrientedBoundingBox from \"../Core/OrientedBoundingBox.js\";\r\nimport Rectangle from \"../Core/Rectangle.js\";\r\nimport TerrainEncoding from \"../Core/TerrainEncoding.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nvar maxShort = 32767;\r\nvar halfMaxShort = (maxShort / 2) | 0;\r\n\r\nvar clipScratch = [];\r\nvar clipScratch2 = [];\r\nvar verticesScratch = [];\r\nvar cartographicScratch = new Cartographic();\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar uScratch = [];\r\nvar vScratch = [];\r\nvar heightScratch = [];\r\nvar indicesScratch = [];\r\nvar normalsScratch = [];\r\nvar horizonOcclusionPointScratch = new Cartesian3();\r\nvar boundingSphereScratch = new BoundingSphere();\r\nvar orientedBoundingBoxScratch = new OrientedBoundingBox();\r\nvar decodeTexCoordsScratch = new Cartesian2();\r\nvar octEncodedNormalScratch = new Cartesian3();\r\n\r\nfunction upsampleQuantizedTerrainMesh(parameters, transferableObjects) {\r\n  var isEastChild = parameters.isEastChild;\r\n  var isNorthChild = parameters.isNorthChild;\r\n\r\n  var minU = isEastChild ? halfMaxShort : 0;\r\n  var maxU = isEastChild ? maxShort : halfMaxShort;\r\n  var minV = isNorthChild ? halfMaxShort : 0;\r\n  var maxV = isNorthChild ? maxShort : halfMaxShort;\r\n\r\n  var uBuffer = uScratch;\r\n  var vBuffer = vScratch;\r\n  var heightBuffer = heightScratch;\r\n  var normalBuffer = normalsScratch;\r\n\r\n  uBuffer.length = 0;\r\n  vBuffer.length = 0;\r\n  heightBuffer.length = 0;\r\n  normalBuffer.length = 0;\r\n\r\n  var indices = indicesScratch;\r\n  indices.length = 0;\r\n\r\n  var vertexMap = {};\r\n\r\n  var parentVertices = parameters.vertices;\r\n  var parentIndices = parameters.indices;\r\n  parentIndices = parentIndices.subarray(0, parameters.indexCountWithoutSkirts);\r\n\r\n  var encoding = TerrainEncoding.clone(parameters.encoding);\r\n  var hasVertexNormals = encoding.hasVertexNormals;\r\n\r\n  var vertexCount = 0;\r\n  var quantizedVertexCount = parameters.vertexCountWithoutSkirts;\r\n\r\n  var parentMinimumHeight = parameters.minimumHeight;\r\n  var parentMaximumHeight = parameters.maximumHeight;\r\n\r\n  var parentUBuffer = new Array(quantizedVertexCount);\r\n  var parentVBuffer = new Array(quantizedVertexCount);\r\n  var parentHeightBuffer = new Array(quantizedVertexCount);\r\n  var parentNormalBuffer = hasVertexNormals\r\n    ? new Array(quantizedVertexCount * 2)\r\n    : undefined;\r\n\r\n  var threshold = 20;\r\n  var height;\r\n\r\n  var i, n;\r\n  var u, v;\r\n  for (i = 0, n = 0; i < quantizedVertexCount; ++i, n += 2) {\r\n    var texCoords = encoding.decodeTextureCoordinates(\r\n      parentVertices,\r\n      i,\r\n      decodeTexCoordsScratch\r\n    );\r\n    height = encoding.decodeHeight(parentVertices, i);\r\n\r\n    u = CesiumMath.clamp((texCoords.x * maxShort) | 0, 0, maxShort);\r\n    v = CesiumMath.clamp((texCoords.y * maxShort) | 0, 0, maxShort);\r\n    parentHeightBuffer[i] = CesiumMath.clamp(\r\n      (((height - parentMinimumHeight) /\r\n        (parentMaximumHeight - parentMinimumHeight)) *\r\n        maxShort) |\r\n        0,\r\n      0,\r\n      maxShort\r\n    );\r\n\r\n    if (u < threshold) {\r\n      u = 0;\r\n    }\r\n\r\n    if (v < threshold) {\r\n      v = 0;\r\n    }\r\n\r\n    if (maxShort - u < threshold) {\r\n      u = maxShort;\r\n    }\r\n\r\n    if (maxShort - v < threshold) {\r\n      v = maxShort;\r\n    }\r\n\r\n    parentUBuffer[i] = u;\r\n    parentVBuffer[i] = v;\r\n\r\n    if (hasVertexNormals) {\r\n      var encodedNormal = encoding.getOctEncodedNormal(\r\n        parentVertices,\r\n        i,\r\n        octEncodedNormalScratch\r\n      );\r\n      parentNormalBuffer[n] = encodedNormal.x;\r\n      parentNormalBuffer[n + 1] = encodedNormal.y;\r\n    }\r\n\r\n    if (\r\n      ((isEastChild && u >= halfMaxShort) ||\r\n        (!isEastChild && u <= halfMaxShort)) &&\r\n      ((isNorthChild && v >= halfMaxShort) ||\r\n        (!isNorthChild && v <= halfMaxShort))\r\n    ) {\r\n      vertexMap[i] = vertexCount;\r\n      uBuffer.push(u);\r\n      vBuffer.push(v);\r\n      heightBuffer.push(parentHeightBuffer[i]);\r\n      if (hasVertexNormals) {\r\n        normalBuffer.push(parentNormalBuffer[n]);\r\n        normalBuffer.push(parentNormalBuffer[n + 1]);\r\n      }\r\n\r\n      ++vertexCount;\r\n    }\r\n  }\r\n\r\n  var triangleVertices = [];\r\n  triangleVertices.push(new Vertex());\r\n  triangleVertices.push(new Vertex());\r\n  triangleVertices.push(new Vertex());\r\n\r\n  var clippedTriangleVertices = [];\r\n  clippedTriangleVertices.push(new Vertex());\r\n  clippedTriangleVertices.push(new Vertex());\r\n  clippedTriangleVertices.push(new Vertex());\r\n\r\n  var clippedIndex;\r\n  var clipped2;\r\n\r\n  for (i = 0; i < parentIndices.length; i += 3) {\r\n    var i0 = parentIndices[i];\r\n    var i1 = parentIndices[i + 1];\r\n    var i2 = parentIndices[i + 2];\r\n\r\n    var u0 = parentUBuffer[i0];\r\n    var u1 = parentUBuffer[i1];\r\n    var u2 = parentUBuffer[i2];\r\n\r\n    triangleVertices[0].initializeIndexed(\r\n      parentUBuffer,\r\n      parentVBuffer,\r\n      parentHeightBuffer,\r\n      parentNormalBuffer,\r\n      i0\r\n    );\r\n    triangleVertices[1].initializeIndexed(\r\n      parentUBuffer,\r\n      parentVBuffer,\r\n      parentHeightBuffer,\r\n      parentNormalBuffer,\r\n      i1\r\n    );\r\n    triangleVertices[2].initializeIndexed(\r\n      parentUBuffer,\r\n      parentVBuffer,\r\n      parentHeightBuffer,\r\n      parentNormalBuffer,\r\n      i2\r\n    );\r\n\r\n    // Clip triangle on the east-west boundary.\r\n    var clipped = Intersections2D.clipTriangleAtAxisAlignedThreshold(\r\n      halfMaxShort,\r\n      isEastChild,\r\n      u0,\r\n      u1,\r\n      u2,\r\n      clipScratch\r\n    );\r\n\r\n    // Get the first clipped triangle, if any.\r\n    clippedIndex = 0;\r\n\r\n    if (clippedIndex >= clipped.length) {\r\n      continue;\r\n    }\r\n    clippedIndex = clippedTriangleVertices[0].initializeFromClipResult(\r\n      clipped,\r\n      clippedIndex,\r\n      triangleVertices\r\n    );\r\n\r\n    if (clippedIndex >= clipped.length) {\r\n      continue;\r\n    }\r\n    clippedIndex = clippedTriangleVertices[1].initializeFromClipResult(\r\n      clipped,\r\n      clippedIndex,\r\n      triangleVertices\r\n    );\r\n\r\n    if (clippedIndex >= clipped.length) {\r\n      continue;\r\n    }\r\n    clippedIndex = clippedTriangleVertices[2].initializeFromClipResult(\r\n      clipped,\r\n      clippedIndex,\r\n      triangleVertices\r\n    );\r\n\r\n    // Clip the triangle against the North-south boundary.\r\n    clipped2 = Intersections2D.clipTriangleAtAxisAlignedThreshold(\r\n      halfMaxShort,\r\n      isNorthChild,\r\n      clippedTriangleVertices[0].getV(),\r\n      clippedTriangleVertices[1].getV(),\r\n      clippedTriangleVertices[2].getV(),\r\n      clipScratch2\r\n    );\r\n    addClippedPolygon(\r\n      uBuffer,\r\n      vBuffer,\r\n      heightBuffer,\r\n      normalBuffer,\r\n      indices,\r\n      vertexMap,\r\n      clipped2,\r\n      clippedTriangleVertices,\r\n      hasVertexNormals\r\n    );\r\n\r\n    // If there's another vertex in the original clipped result,\r\n    // it forms a second triangle.  Clip it as well.\r\n    if (clippedIndex < clipped.length) {\r\n      clippedTriangleVertices[2].clone(clippedTriangleVertices[1]);\r\n      clippedTriangleVertices[2].initializeFromClipResult(\r\n        clipped,\r\n        clippedIndex,\r\n        triangleVertices\r\n      );\r\n\r\n      clipped2 = Intersections2D.clipTriangleAtAxisAlignedThreshold(\r\n        halfMaxShort,\r\n        isNorthChild,\r\n        clippedTriangleVertices[0].getV(),\r\n        clippedTriangleVertices[1].getV(),\r\n        clippedTriangleVertices[2].getV(),\r\n        clipScratch2\r\n      );\r\n      addClippedPolygon(\r\n        uBuffer,\r\n        vBuffer,\r\n        heightBuffer,\r\n        normalBuffer,\r\n        indices,\r\n        vertexMap,\r\n        clipped2,\r\n        clippedTriangleVertices,\r\n        hasVertexNormals\r\n      );\r\n    }\r\n  }\r\n\r\n  var uOffset = isEastChild ? -maxShort : 0;\r\n  var vOffset = isNorthChild ? -maxShort : 0;\r\n\r\n  var westIndices = [];\r\n  var southIndices = [];\r\n  var eastIndices = [];\r\n  var northIndices = [];\r\n\r\n  var minimumHeight = Number.MAX_VALUE;\r\n  var maximumHeight = -minimumHeight;\r\n\r\n  var cartesianVertices = verticesScratch;\r\n  cartesianVertices.length = 0;\r\n\r\n  var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n  var rectangle = Rectangle.clone(parameters.childRectangle);\r\n\r\n  var north = rectangle.north;\r\n  var south = rectangle.south;\r\n  var east = rectangle.east;\r\n  var west = rectangle.west;\r\n\r\n  if (east < west) {\r\n    east += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  for (i = 0; i < uBuffer.length; ++i) {\r\n    u = Math.round(uBuffer[i]);\r\n    if (u <= minU) {\r\n      westIndices.push(i);\r\n      u = 0;\r\n    } else if (u >= maxU) {\r\n      eastIndices.push(i);\r\n      u = maxShort;\r\n    } else {\r\n      u = u * 2 + uOffset;\r\n    }\r\n\r\n    uBuffer[i] = u;\r\n\r\n    v = Math.round(vBuffer[i]);\r\n    if (v <= minV) {\r\n      southIndices.push(i);\r\n      v = 0;\r\n    } else if (v >= maxV) {\r\n      northIndices.push(i);\r\n      v = maxShort;\r\n    } else {\r\n      v = v * 2 + vOffset;\r\n    }\r\n\r\n    vBuffer[i] = v;\r\n\r\n    height = CesiumMath.lerp(\r\n      parentMinimumHeight,\r\n      parentMaximumHeight,\r\n      heightBuffer[i] / maxShort\r\n    );\r\n    if (height < minimumHeight) {\r\n      minimumHeight = height;\r\n    }\r\n    if (height > maximumHeight) {\r\n      maximumHeight = height;\r\n    }\r\n\r\n    heightBuffer[i] = height;\r\n\r\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, u / maxShort);\r\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, v / maxShort);\r\n    cartographicScratch.height = height;\r\n\r\n    ellipsoid.cartographicToCartesian(cartographicScratch, cartesian3Scratch);\r\n\r\n    cartesianVertices.push(cartesian3Scratch.x);\r\n    cartesianVertices.push(cartesian3Scratch.y);\r\n    cartesianVertices.push(cartesian3Scratch.z);\r\n  }\r\n\r\n  var boundingSphere = BoundingSphere.fromVertices(\r\n    cartesianVertices,\r\n    Cartesian3.ZERO,\r\n    3,\r\n    boundingSphereScratch\r\n  );\r\n  var orientedBoundingBox = OrientedBoundingBox.fromRectangle(\r\n    rectangle,\r\n    minimumHeight,\r\n    maximumHeight,\r\n    ellipsoid,\r\n    orientedBoundingBoxScratch\r\n  );\r\n\r\n  var occluder = new EllipsoidalOccluder(ellipsoid);\r\n  var horizonOcclusionPoint = occluder.computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid(\r\n    boundingSphere.center,\r\n    cartesianVertices,\r\n    3,\r\n    boundingSphere.center,\r\n    minimumHeight,\r\n    horizonOcclusionPointScratch\r\n  );\r\n\r\n  var heightRange = maximumHeight - minimumHeight;\r\n\r\n  var vertices = new Uint16Array(\r\n    uBuffer.length + vBuffer.length + heightBuffer.length\r\n  );\r\n\r\n  for (i = 0; i < uBuffer.length; ++i) {\r\n    vertices[i] = uBuffer[i];\r\n  }\r\n\r\n  var start = uBuffer.length;\r\n\r\n  for (i = 0; i < vBuffer.length; ++i) {\r\n    vertices[start + i] = vBuffer[i];\r\n  }\r\n\r\n  start += vBuffer.length;\r\n\r\n  for (i = 0; i < heightBuffer.length; ++i) {\r\n    vertices[start + i] =\r\n      (maxShort * (heightBuffer[i] - minimumHeight)) / heightRange;\r\n  }\r\n\r\n  var indicesTypedArray = IndexDatatype.createTypedArray(\r\n    uBuffer.length,\r\n    indices\r\n  );\r\n\r\n  var encodedNormals;\r\n  if (hasVertexNormals) {\r\n    var normalArray = new Uint8Array(normalBuffer);\r\n    transferableObjects.push(\r\n      vertices.buffer,\r\n      indicesTypedArray.buffer,\r\n      normalArray.buffer\r\n    );\r\n    encodedNormals = normalArray.buffer;\r\n  } else {\r\n    transferableObjects.push(vertices.buffer, indicesTypedArray.buffer);\r\n  }\r\n\r\n  return {\r\n    vertices: vertices.buffer,\r\n    encodedNormals: encodedNormals,\r\n    indices: indicesTypedArray.buffer,\r\n    minimumHeight: minimumHeight,\r\n    maximumHeight: maximumHeight,\r\n    westIndices: westIndices,\r\n    southIndices: southIndices,\r\n    eastIndices: eastIndices,\r\n    northIndices: northIndices,\r\n    boundingSphere: boundingSphere,\r\n    orientedBoundingBox: orientedBoundingBox,\r\n    horizonOcclusionPoint: horizonOcclusionPoint,\r\n  };\r\n}\r\n\r\nfunction Vertex() {\r\n  this.vertexBuffer = undefined;\r\n  this.index = undefined;\r\n  this.first = undefined;\r\n  this.second = undefined;\r\n  this.ratio = undefined;\r\n}\r\n\r\nVertex.prototype.clone = function (result) {\r\n  if (!defined(result)) {\r\n    result = new Vertex();\r\n  }\r\n\r\n  result.uBuffer = this.uBuffer;\r\n  result.vBuffer = this.vBuffer;\r\n  result.heightBuffer = this.heightBuffer;\r\n  result.normalBuffer = this.normalBuffer;\r\n  result.index = this.index;\r\n  result.first = this.first;\r\n  result.second = this.second;\r\n  result.ratio = this.ratio;\r\n\r\n  return result;\r\n};\r\n\r\nVertex.prototype.initializeIndexed = function (\r\n  uBuffer,\r\n  vBuffer,\r\n  heightBuffer,\r\n  normalBuffer,\r\n  index\r\n) {\r\n  this.uBuffer = uBuffer;\r\n  this.vBuffer = vBuffer;\r\n  this.heightBuffer = heightBuffer;\r\n  this.normalBuffer = normalBuffer;\r\n  this.index = index;\r\n  this.first = undefined;\r\n  this.second = undefined;\r\n  this.ratio = undefined;\r\n};\r\n\r\nVertex.prototype.initializeFromClipResult = function (\r\n  clipResult,\r\n  index,\r\n  vertices\r\n) {\r\n  var nextIndex = index + 1;\r\n\r\n  if (clipResult[index] !== -1) {\r\n    vertices[clipResult[index]].clone(this);\r\n  } else {\r\n    this.vertexBuffer = undefined;\r\n    this.index = undefined;\r\n    this.first = vertices[clipResult[nextIndex]];\r\n    ++nextIndex;\r\n    this.second = vertices[clipResult[nextIndex]];\r\n    ++nextIndex;\r\n    this.ratio = clipResult[nextIndex];\r\n    ++nextIndex;\r\n  }\r\n\r\n  return nextIndex;\r\n};\r\n\r\nVertex.prototype.getKey = function () {\r\n  if (this.isIndexed()) {\r\n    return this.index;\r\n  }\r\n  return JSON.stringify({\r\n    first: this.first.getKey(),\r\n    second: this.second.getKey(),\r\n    ratio: this.ratio,\r\n  });\r\n};\r\n\r\nVertex.prototype.isIndexed = function () {\r\n  return defined(this.index);\r\n};\r\n\r\nVertex.prototype.getH = function () {\r\n  if (defined(this.index)) {\r\n    return this.heightBuffer[this.index];\r\n  }\r\n  return CesiumMath.lerp(this.first.getH(), this.second.getH(), this.ratio);\r\n};\r\n\r\nVertex.prototype.getU = function () {\r\n  if (defined(this.index)) {\r\n    return this.uBuffer[this.index];\r\n  }\r\n  return CesiumMath.lerp(this.first.getU(), this.second.getU(), this.ratio);\r\n};\r\n\r\nVertex.prototype.getV = function () {\r\n  if (defined(this.index)) {\r\n    return this.vBuffer[this.index];\r\n  }\r\n  return CesiumMath.lerp(this.first.getV(), this.second.getV(), this.ratio);\r\n};\r\n\r\nvar encodedScratch = new Cartesian2();\r\n// An upsampled triangle may be clipped twice before it is assigned an index\r\n// In this case, we need a buffer to handle the recursion of getNormalX() and getNormalY().\r\nvar depth = -1;\r\nvar cartesianScratch1 = [new Cartesian3(), new Cartesian3()];\r\nvar cartesianScratch2 = [new Cartesian3(), new Cartesian3()];\r\nfunction lerpOctEncodedNormal(vertex, result) {\r\n  ++depth;\r\n\r\n  var first = cartesianScratch1[depth];\r\n  var second = cartesianScratch2[depth];\r\n\r\n  first = AttributeCompression.octDecode(\r\n    vertex.first.getNormalX(),\r\n    vertex.first.getNormalY(),\r\n    first\r\n  );\r\n  second = AttributeCompression.octDecode(\r\n    vertex.second.getNormalX(),\r\n    vertex.second.getNormalY(),\r\n    second\r\n  );\r\n  cartesian3Scratch = Cartesian3.lerp(\r\n    first,\r\n    second,\r\n    vertex.ratio,\r\n    cartesian3Scratch\r\n  );\r\n  Cartesian3.normalize(cartesian3Scratch, cartesian3Scratch);\r\n\r\n  AttributeCompression.octEncode(cartesian3Scratch, result);\r\n\r\n  --depth;\r\n\r\n  return result;\r\n}\r\n\r\nVertex.prototype.getNormalX = function () {\r\n  if (defined(this.index)) {\r\n    return this.normalBuffer[this.index * 2];\r\n  }\r\n\r\n  encodedScratch = lerpOctEncodedNormal(this, encodedScratch);\r\n  return encodedScratch.x;\r\n};\r\n\r\nVertex.prototype.getNormalY = function () {\r\n  if (defined(this.index)) {\r\n    return this.normalBuffer[this.index * 2 + 1];\r\n  }\r\n\r\n  encodedScratch = lerpOctEncodedNormal(this, encodedScratch);\r\n  return encodedScratch.y;\r\n};\r\n\r\nvar polygonVertices = [];\r\npolygonVertices.push(new Vertex());\r\npolygonVertices.push(new Vertex());\r\npolygonVertices.push(new Vertex());\r\npolygonVertices.push(new Vertex());\r\n\r\nfunction addClippedPolygon(\r\n  uBuffer,\r\n  vBuffer,\r\n  heightBuffer,\r\n  normalBuffer,\r\n  indices,\r\n  vertexMap,\r\n  clipped,\r\n  triangleVertices,\r\n  hasVertexNormals\r\n) {\r\n  if (clipped.length === 0) {\r\n    return;\r\n  }\r\n\r\n  var numVertices = 0;\r\n  var clippedIndex = 0;\r\n  while (clippedIndex < clipped.length) {\r\n    clippedIndex = polygonVertices[numVertices++].initializeFromClipResult(\r\n      clipped,\r\n      clippedIndex,\r\n      triangleVertices\r\n    );\r\n  }\r\n\r\n  for (var i = 0; i < numVertices; ++i) {\r\n    var polygonVertex = polygonVertices[i];\r\n    if (!polygonVertex.isIndexed()) {\r\n      var key = polygonVertex.getKey();\r\n      if (defined(vertexMap[key])) {\r\n        polygonVertex.newIndex = vertexMap[key];\r\n      } else {\r\n        var newIndex = uBuffer.length;\r\n        uBuffer.push(polygonVertex.getU());\r\n        vBuffer.push(polygonVertex.getV());\r\n        heightBuffer.push(polygonVertex.getH());\r\n        if (hasVertexNormals) {\r\n          normalBuffer.push(polygonVertex.getNormalX());\r\n          normalBuffer.push(polygonVertex.getNormalY());\r\n        }\r\n        polygonVertex.newIndex = newIndex;\r\n        vertexMap[key] = newIndex;\r\n      }\r\n    } else {\r\n      polygonVertex.newIndex = vertexMap[polygonVertex.index];\r\n      polygonVertex.uBuffer = uBuffer;\r\n      polygonVertex.vBuffer = vBuffer;\r\n      polygonVertex.heightBuffer = heightBuffer;\r\n      if (hasVertexNormals) {\r\n        polygonVertex.normalBuffer = normalBuffer;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (numVertices === 3) {\r\n    // A triangle.\r\n    indices.push(polygonVertices[0].newIndex);\r\n    indices.push(polygonVertices[1].newIndex);\r\n    indices.push(polygonVertices[2].newIndex);\r\n  } else if (numVertices === 4) {\r\n    // A quad - two triangles.\r\n    indices.push(polygonVertices[0].newIndex);\r\n    indices.push(polygonVertices[1].newIndex);\r\n    indices.push(polygonVertices[2].newIndex);\r\n\r\n    indices.push(polygonVertices[0].newIndex);\r\n    indices.push(polygonVertices[2].newIndex);\r\n    indices.push(polygonVertices[3].newIndex);\r\n  }\r\n}\r\nexport default createTaskProcessorWorker(upsampleQuantizedTerrainMesh);\r\n"],"names":["Intersections2D","threshold","keepAbove","u0","u1","u2","result","defined","DeveloperError","u0Behind","u1Behind","u2Behind","length","u01Ratio","u02Ratio","u12Ratio","u10Ratio","u20Ratio","u21Ratio","numBehind","push","x","y","x1","y1","x2","y2","x3","y3","x1mx3","x3mx2","y2my3","y1my3","inverseDeterminant","ymy3","xmx3","l1","l2","l3","z","Cartesian3","x00","y00","x01","y01","x10","y10","x11","y11","Check","typeOf","number","denominator1","ua1","ub1","Cartesian2","maxShort","halfMaxShort","clipScratch","clipScratch2","verticesScratch","cartographicScratch","Cartographic","cartesian3Scratch","uScratch","vScratch","heightScratch","indicesScratch","normalsScratch","horizonOcclusionPointScratch","boundingSphereScratch","BoundingSphere","orientedBoundingBoxScratch","OrientedBoundingBox","decodeTexCoordsScratch","octEncodedNormalScratch","Vertex","this","vertexBuffer","undefined","index","first","second","ratio","prototype","clone","uBuffer","vBuffer","heightBuffer","normalBuffer","initializeIndexed","initializeFromClipResult","clipResult","vertices","nextIndex","getKey","isIndexed","JSON","stringify","getH","CesiumMath","lerp","getU","getV","encodedScratch","depth","cartesianScratch1","cartesianScratch2","lerpOctEncodedNormal","vertex","AttributeCompression","octDecode","getNormalX","getNormalY","normalize","octEncode","polygonVertices","addClippedPolygon","indices","vertexMap","clipped","triangleVertices","hasVertexNormals","numVertices","clippedIndex","i","polygonVertex","newIndex","key","createTaskProcessorWorker","parameters","transferableObjects","isEastChild","isNorthChild","minU","maxU","minV","maxV","parentVertices","parentIndices","subarray","indexCountWithoutSkirts","height","n","u","v","encoding","TerrainEncoding","vertexCount","quantizedVertexCount","vertexCountWithoutSkirts","parentMinimumHeight","minimumHeight","parentMaximumHeight","maximumHeight","parentUBuffer","Array","parentVBuffer","parentHeightBuffer","parentNormalBuffer","texCoords","decodeTextureCoordinates","decodeHeight","clamp","encodedNormal","getOctEncodedNormal","clippedTriangleVertices","i0","i1","i2","clipTriangleAtAxisAlignedThreshold","uOffset","vOffset","westIndices","southIndices","eastIndices","northIndices","Number","MAX_VALUE","cartesianVertices","ellipsoid","Ellipsoid","rectangle","Rectangle","childRectangle","north","south","east","west","TWO_PI","Math","round","longitude","latitude","cartographicToCartesian","boundingSphere","fromVertices","ZERO","orientedBoundingBox","fromRectangle","horizonOcclusionPoint","EllipsoidalOccluder","computeHorizonCullingPointFromVerticesPossiblyUnderEllipsoid","center","heightRange","Uint16Array","start","encodedNormals","indicesTypedArray","IndexDatatype","createTypedArray","normalArray","Uint8Array","buffer"],"mappings":"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"}