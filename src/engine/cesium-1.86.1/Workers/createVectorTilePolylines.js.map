{"version":3,"file":"createVectorTilePolylines.js","sources":["../../../../Source/Core/decodeVectorPolylinePositions.js","../../../../Source/WorkersES6/createVectorTilePolylines.js"],"sourcesContent":["import AttributeCompression from \"./AttributeCompression.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\nvar maxShort = 32767;\r\n\r\nvar scratchBVCartographic = new Cartographic();\r\nvar scratchEncodedPosition = new Cartesian3();\r\n\r\nfunction decodeVectorPolylinePositions(\r\n  positions,\r\n  rectangle,\r\n  minimumHeight,\r\n  maximumHeight,\r\n  ellipsoid\r\n) {\r\n  var positionsLength = positions.length / 3;\r\n  var uBuffer = positions.subarray(0, positionsLength);\r\n  var vBuffer = positions.subarray(positionsLength, 2 * positionsLength);\r\n  var heightBuffer = positions.subarray(\r\n    2 * positionsLength,\r\n    3 * positionsLength\r\n  );\r\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n  var decoded = new Float64Array(positions.length);\r\n  for (var i = 0; i < positionsLength; ++i) {\r\n    var u = uBuffer[i];\r\n    var v = vBuffer[i];\r\n    var h = heightBuffer[i];\r\n\r\n    var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / maxShort);\r\n    var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / maxShort);\r\n    var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / maxShort);\r\n\r\n    var cartographic = Cartographic.fromRadians(\r\n      lon,\r\n      lat,\r\n      alt,\r\n      scratchBVCartographic\r\n    );\r\n    var decodedPosition = ellipsoid.cartographicToCartesian(\r\n      cartographic,\r\n      scratchEncodedPosition\r\n    );\r\n    Cartesian3.pack(decodedPosition, decoded, i * 3);\r\n  }\r\n  return decoded;\r\n}\r\nexport default decodeVectorPolylinePositions;\r\n","import Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport combine from \"../Core/combine.js\";\r\nimport decodeVectorPolylinePositions from \"../Core/decodeVectorPolylinePositions.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\r\nimport Rectangle from \"../Core/Rectangle.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchCenter = new Cartesian3();\r\nvar scratchMinMaxHeights = {\r\n  min: undefined,\r\n  max: undefined,\r\n};\r\n\r\nfunction unpackBuffer(packedBuffer) {\r\n  packedBuffer = new Float64Array(packedBuffer);\r\n\r\n  var offset = 0;\r\n  scratchMinMaxHeights.min = packedBuffer[offset++];\r\n  scratchMinMaxHeights.max = packedBuffer[offset++];\r\n\r\n  Rectangle.unpack(packedBuffer, offset, scratchRectangle);\r\n  offset += Rectangle.packedLength;\r\n\r\n  Ellipsoid.unpack(packedBuffer, offset, scratchEllipsoid);\r\n  offset += Ellipsoid.packedLength;\r\n\r\n  Cartesian3.unpack(packedBuffer, offset, scratchCenter);\r\n}\r\n\r\nfunction getPositionOffsets(counts) {\r\n  var countsLength = counts.length;\r\n  var positionOffsets = new Uint32Array(countsLength + 1);\r\n  var offset = 0;\r\n  for (var i = 0; i < countsLength; ++i) {\r\n    positionOffsets[i] = offset;\r\n    offset += counts[i];\r\n  }\r\n  positionOffsets[countsLength] = offset;\r\n  return positionOffsets;\r\n}\r\n\r\nvar scratchP0 = new Cartesian3();\r\nvar scratchP1 = new Cartesian3();\r\nvar scratchPrev = new Cartesian3();\r\nvar scratchCur = new Cartesian3();\r\nvar scratchNext = new Cartesian3();\r\n\r\nfunction createVectorTilePolylines(parameters, transferableObjects) {\r\n  var encodedPositions = new Uint16Array(parameters.positions);\r\n  var widths = new Uint16Array(parameters.widths);\r\n  var counts = new Uint32Array(parameters.counts);\r\n  var batchIds = new Uint16Array(parameters.batchIds);\r\n\r\n  unpackBuffer(parameters.packedBuffer);\r\n  var rectangle = scratchRectangle;\r\n  var ellipsoid = scratchEllipsoid;\r\n  var center = scratchCenter;\r\n  var minimumHeight = scratchMinMaxHeights.min;\r\n  var maximumHeight = scratchMinMaxHeights.max;\r\n\r\n  var positions = decodeVectorPolylinePositions(\r\n    encodedPositions,\r\n    rectangle,\r\n    minimumHeight,\r\n    maximumHeight,\r\n    ellipsoid\r\n  );\r\n\r\n  var positionsLength = positions.length / 3;\r\n  var size = positionsLength * 4 - 4;\r\n\r\n  var curPositions = new Float32Array(size * 3);\r\n  var prevPositions = new Float32Array(size * 3);\r\n  var nextPositions = new Float32Array(size * 3);\r\n  var expandAndWidth = new Float32Array(size * 2);\r\n  var vertexBatchIds = new Uint16Array(size);\r\n\r\n  var positionIndex = 0;\r\n  var expandAndWidthIndex = 0;\r\n  var batchIdIndex = 0;\r\n\r\n  var i;\r\n  var offset = 0;\r\n  var length = counts.length;\r\n\r\n  for (i = 0; i < length; ++i) {\r\n    var count = counts[i];\r\n    var width = widths[i];\r\n    var batchId = batchIds[i];\r\n\r\n    for (var j = 0; j < count; ++j) {\r\n      var previous;\r\n      if (j === 0) {\r\n        var p0 = Cartesian3.unpack(positions, offset * 3, scratchP0);\r\n        var p1 = Cartesian3.unpack(positions, (offset + 1) * 3, scratchP1);\r\n\r\n        previous = Cartesian3.subtract(p0, p1, scratchPrev);\r\n        Cartesian3.add(p0, previous, previous);\r\n      } else {\r\n        previous = Cartesian3.unpack(\r\n          positions,\r\n          (offset + j - 1) * 3,\r\n          scratchPrev\r\n        );\r\n      }\r\n\r\n      var current = Cartesian3.unpack(positions, (offset + j) * 3, scratchCur);\r\n\r\n      var next;\r\n      if (j === count - 1) {\r\n        var p2 = Cartesian3.unpack(\r\n          positions,\r\n          (offset + count - 1) * 3,\r\n          scratchP0\r\n        );\r\n        var p3 = Cartesian3.unpack(\r\n          positions,\r\n          (offset + count - 2) * 3,\r\n          scratchP1\r\n        );\r\n\r\n        next = Cartesian3.subtract(p2, p3, scratchNext);\r\n        Cartesian3.add(p2, next, next);\r\n      } else {\r\n        next = Cartesian3.unpack(positions, (offset + j + 1) * 3, scratchNext);\r\n      }\r\n\r\n      Cartesian3.subtract(previous, center, previous);\r\n      Cartesian3.subtract(current, center, current);\r\n      Cartesian3.subtract(next, center, next);\r\n\r\n      var startK = j === 0 ? 2 : 0;\r\n      var endK = j === count - 1 ? 2 : 4;\r\n\r\n      for (var k = startK; k < endK; ++k) {\r\n        Cartesian3.pack(current, curPositions, positionIndex);\r\n        Cartesian3.pack(previous, prevPositions, positionIndex);\r\n        Cartesian3.pack(next, nextPositions, positionIndex);\r\n        positionIndex += 3;\r\n\r\n        var direction = k - 2 < 0 ? -1.0 : 1.0;\r\n        expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1;\r\n        expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n        vertexBatchIds[batchIdIndex++] = batchId;\r\n      }\r\n    }\r\n\r\n    offset += count;\r\n  }\r\n\r\n  var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n  var index = 0;\r\n  var indicesIndex = 0;\r\n  length = positionsLength - 1;\r\n  for (i = 0; i < length; ++i) {\r\n    indices[indicesIndex++] = index;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 1;\r\n\r\n    indices[indicesIndex++] = index + 1;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 3;\r\n\r\n    index += 4;\r\n  }\r\n\r\n  transferableObjects.push(\r\n    curPositions.buffer,\r\n    prevPositions.buffer,\r\n    nextPositions.buffer\r\n  );\r\n  transferableObjects.push(\r\n    expandAndWidth.buffer,\r\n    vertexBatchIds.buffer,\r\n    indices.buffer\r\n  );\r\n\r\n  var results = {\r\n    indexDatatype:\r\n      indices.BYTES_PER_ELEMENT === 2\r\n        ? IndexDatatype.UNSIGNED_SHORT\r\n        : IndexDatatype.UNSIGNED_INT,\r\n    currentPositions: curPositions.buffer,\r\n    previousPositions: prevPositions.buffer,\r\n    nextPositions: nextPositions.buffer,\r\n    expandAndWidth: expandAndWidth.buffer,\r\n    batchIds: vertexBatchIds.buffer,\r\n    indices: indices.buffer,\r\n  };\r\n\r\n  if (parameters.keepDecodedPositions) {\r\n    var positionOffsets = getPositionOffsets(counts);\r\n    transferableObjects.push(positions.buffer, positionOffsets.buffer);\r\n    results = combine(results, {\r\n      decodedPositions: positions.buffer,\r\n      decodedPositionOffsets: positionOffsets.buffer,\r\n    });\r\n  }\r\n\r\n  return results;\r\n}\r\nexport default createTaskProcessorWorker(createVectorTilePolylines);\r\n"],"names":["maxShort","scratchBVCartographic","Cartographic","scratchEncodedPosition","Cartesian3","scratchRectangle","Rectangle","scratchEllipsoid","Ellipsoid","scratchCenter","scratchMinMaxHeights","min","undefined","max","scratchP0","scratchP1","scratchPrev","scratchCur","scratchNext","createTaskProcessorWorker","parameters","transferableObjects","encodedPositions","Uint16Array","positions","widths","counts","Uint32Array","batchIds","packedBuffer","Float64Array","offset","unpack","packedLength","unpackBuffer","i","ellipsoid","center","rectangle","minimumHeight","maximumHeight","positionsLength","length","uBuffer","subarray","vBuffer","heightBuffer","AttributeCompression","zigZagDeltaDecode","decoded","u","v","h","lon","CesiumMath","lerp","west","east","lat","south","north","alt","cartographic","fromRadians","decodedPosition","cartographicToCartesian","pack","decodeVectorPolylinePositions","size","curPositions","Float32Array","prevPositions","nextPositions","expandAndWidth","vertexBatchIds","positionIndex","expandAndWidthIndex","batchIdIndex","count","width","batchId","j","previous","p0","p1","subtract","add","next","current","p2","p3","endK","k","direction","indices","IndexDatatype","createTypedArray","index","indicesIndex","push","buffer","results","indexDatatype","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","currentPositions","previousPositions","keepDecodedPositions","positionOffsets","countsLength","getPositionOffsets","combine","decodedPositions","decodedPositionOffsets"],"mappings":"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"}