{"version":3,"file":"PolylinePipeline-24e9fd21.js","sources":["../../../../Source/Core/PolylinePipeline.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport EllipsoidGeodesic from \"./EllipsoidGeodesic.js\";\r\nimport EllipsoidRhumbLine from \"./EllipsoidRhumbLine.js\";\r\nimport IntersectionTests from \"./IntersectionTests.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport Plane from \"./Plane.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolylinePipeline = {};\r\n\r\nPolylinePipeline.numberOfPoints = function (p0, p1, minDistance) {\r\n  var distance = Cartesian3.distance(p0, p1);\r\n  return Math.ceil(distance / minDistance);\r\n};\r\n\r\nPolylinePipeline.numberOfPointsRhumbLine = function (p0, p1, granularity) {\r\n  var radiansDistanceSquared =\r\n    Math.pow(p0.longitude - p1.longitude, 2) +\r\n    Math.pow(p0.latitude - p1.latitude, 2);\r\n\r\n  return Math.max(\r\n    1,\r\n    Math.ceil(Math.sqrt(radiansDistanceSquared / (granularity * granularity)))\r\n  );\r\n};\r\n\r\nvar cartoScratch = new Cartographic();\r\nPolylinePipeline.extractHeights = function (positions, ellipsoid) {\r\n  var length = positions.length;\r\n  var heights = new Array(length);\r\n  for (var i = 0; i < length; i++) {\r\n    var p = positions[i];\r\n    heights[i] = ellipsoid.cartesianToCartographic(p, cartoScratch).height;\r\n  }\r\n  return heights;\r\n};\r\n\r\nvar wrapLongitudeInversMatrix = new Matrix4();\r\nvar wrapLongitudeOrigin = new Cartesian3();\r\nvar wrapLongitudeXZNormal = new Cartesian3();\r\nvar wrapLongitudeXZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\nvar wrapLongitudeYZNormal = new Cartesian3();\r\nvar wrapLongitudeYZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\nvar wrapLongitudeIntersection = new Cartesian3();\r\nvar wrapLongitudeOffset = new Cartesian3();\r\n\r\nvar subdivideHeightsScratchArray = [];\r\n\r\nfunction subdivideHeights(numPoints, h0, h1) {\r\n  var heights = subdivideHeightsScratchArray;\r\n  heights.length = numPoints;\r\n\r\n  var i;\r\n  if (h0 === h1) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      heights[i] = h0;\r\n    }\r\n    return heights;\r\n  }\r\n\r\n  var dHeight = h1 - h0;\r\n  var heightPerVertex = dHeight / numPoints;\r\n\r\n  for (i = 0; i < numPoints; i++) {\r\n    var h = h0 + i * heightPerVertex;\r\n    heights[i] = h;\r\n  }\r\n\r\n  return heights;\r\n}\r\n\r\nvar carto1 = new Cartographic();\r\nvar carto2 = new Cartographic();\r\nvar cartesian = new Cartesian3();\r\nvar scaleFirst = new Cartesian3();\r\nvar scaleLast = new Cartesian3();\r\nvar ellipsoidGeodesic = new EllipsoidGeodesic();\r\nvar ellipsoidRhumb = new EllipsoidRhumbLine();\r\n\r\n//Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n//Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n//and this prevents duplication of end point.\r\nfunction generateCartesianArc(\r\n  p0,\r\n  p1,\r\n  minDistance,\r\n  ellipsoid,\r\n  h0,\r\n  h1,\r\n  array,\r\n  offset\r\n) {\r\n  var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\r\n  var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\r\n  var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n  var start = ellipsoid.cartesianToCartographic(first, carto1);\r\n  var end = ellipsoid.cartesianToCartographic(last, carto2);\r\n  var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n  ellipsoidGeodesic.setEndPoints(start, end);\r\n  var surfaceDistanceBetweenPoints =\r\n    ellipsoidGeodesic.surfaceDistance / numPoints;\r\n\r\n  var index = offset;\r\n  start.height = h0;\r\n  var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n  Cartesian3.pack(cart, array, index);\r\n  index += 3;\r\n\r\n  for (var i = 1; i < numPoints; i++) {\r\n    var carto = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\r\n      i * surfaceDistanceBetweenPoints,\r\n      carto2\r\n    );\r\n    carto.height = heights[i];\r\n    cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n    Cartesian3.pack(cart, array, index);\r\n    index += 3;\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n//Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n//Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n//and this prevents duplication of end point.\r\nfunction generateCartesianRhumbArc(\r\n  p0,\r\n  p1,\r\n  granularity,\r\n  ellipsoid,\r\n  h0,\r\n  h1,\r\n  array,\r\n  offset\r\n) {\r\n  var start = ellipsoid.cartesianToCartographic(p0, carto1);\r\n  var end = ellipsoid.cartesianToCartographic(p1, carto2);\r\n  var numPoints = PolylinePipeline.numberOfPointsRhumbLine(\r\n    start,\r\n    end,\r\n    granularity\r\n  );\r\n  start.height = 0.0;\r\n  end.height = 0.0;\r\n  var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n  if (!ellipsoidRhumb.ellipsoid.equals(ellipsoid)) {\r\n    ellipsoidRhumb = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n  }\r\n  ellipsoidRhumb.setEndPoints(start, end);\r\n  var surfaceDistanceBetweenPoints = ellipsoidRhumb.surfaceDistance / numPoints;\r\n\r\n  var index = offset;\r\n  start.height = h0;\r\n  var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n  Cartesian3.pack(cart, array, index);\r\n  index += 3;\r\n\r\n  for (var i = 1; i < numPoints; i++) {\r\n    var carto = ellipsoidRhumb.interpolateUsingSurfaceDistance(\r\n      i * surfaceDistanceBetweenPoints,\r\n      carto2\r\n    );\r\n    carto.height = heights[i];\r\n    cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n    Cartesian3.pack(cart, array, index);\r\n    index += 3;\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n/**\r\n * Breaks a {@link Polyline} into segments such that it does not cross the &plusmn;180 degree meridian of an ellipsoid.\r\n *\r\n * @param {Cartesian3[]} positions The polyline's Cartesian positions.\r\n * @param {Matrix4} [modelMatrix=Matrix4.IDENTITY] The polyline's model matrix. Assumed to be an affine\r\n * transformation matrix, where the upper left 3x3 elements are a rotation matrix, and\r\n * the upper three elements in the fourth column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n * The matrix is not verified to be in the proper form.\r\n * @returns {Object} An object with a <code>positions</code> property that is an array of positions and a\r\n * <code>segments</code> property.\r\n *\r\n *\r\n * @example\r\n * var polylines = new Cesium.PolylineCollection();\r\n * var polyline = polylines.add(...);\r\n * var positions = polyline.positions;\r\n * var modelMatrix = polylines.modelMatrix;\r\n * var segments = Cesium.PolylinePipeline.wrapLongitude(positions, modelMatrix);\r\n *\r\n * @see PolygonPipeline.wrapLongitude\r\n * @see Polyline\r\n * @see PolylineCollection\r\n */\r\nPolylinePipeline.wrapLongitude = function (positions, modelMatrix) {\r\n  var cartesians = [];\r\n  var segments = [];\r\n\r\n  if (defined(positions) && positions.length > 0) {\r\n    modelMatrix = defaultValue(modelMatrix, Matrix4.IDENTITY);\r\n    var inverseModelMatrix = Matrix4.inverseTransformation(\r\n      modelMatrix,\r\n      wrapLongitudeInversMatrix\r\n    );\r\n\r\n    var origin = Matrix4.multiplyByPoint(\r\n      inverseModelMatrix,\r\n      Cartesian3.ZERO,\r\n      wrapLongitudeOrigin\r\n    );\r\n    var xzNormal = Cartesian3.normalize(\r\n      Matrix4.multiplyByPointAsVector(\r\n        inverseModelMatrix,\r\n        Cartesian3.UNIT_Y,\r\n        wrapLongitudeXZNormal\r\n      ),\r\n      wrapLongitudeXZNormal\r\n    );\r\n    var xzPlane = Plane.fromPointNormal(origin, xzNormal, wrapLongitudeXZPlane);\r\n    var yzNormal = Cartesian3.normalize(\r\n      Matrix4.multiplyByPointAsVector(\r\n        inverseModelMatrix,\r\n        Cartesian3.UNIT_X,\r\n        wrapLongitudeYZNormal\r\n      ),\r\n      wrapLongitudeYZNormal\r\n    );\r\n    var yzPlane = Plane.fromPointNormal(origin, yzNormal, wrapLongitudeYZPlane);\r\n\r\n    var count = 1;\r\n    cartesians.push(Cartesian3.clone(positions[0]));\r\n    var prev = cartesians[0];\r\n\r\n    var length = positions.length;\r\n    for (var i = 1; i < length; ++i) {\r\n      var cur = positions[i];\r\n\r\n      // intersects the IDL if either endpoint is on the negative side of the yz-plane\r\n      if (\r\n        Plane.getPointDistance(yzPlane, prev) < 0.0 ||\r\n        Plane.getPointDistance(yzPlane, cur) < 0.0\r\n      ) {\r\n        // and intersects the xz-plane\r\n        var intersection = IntersectionTests.lineSegmentPlane(\r\n          prev,\r\n          cur,\r\n          xzPlane,\r\n          wrapLongitudeIntersection\r\n        );\r\n        if (defined(intersection)) {\r\n          // move point on the xz-plane slightly away from the plane\r\n          var offset = Cartesian3.multiplyByScalar(\r\n            xzNormal,\r\n            5.0e-9,\r\n            wrapLongitudeOffset\r\n          );\r\n          if (Plane.getPointDistance(xzPlane, prev) < 0.0) {\r\n            Cartesian3.negate(offset, offset);\r\n          }\r\n\r\n          cartesians.push(\r\n            Cartesian3.add(intersection, offset, new Cartesian3())\r\n          );\r\n          segments.push(count + 1);\r\n\r\n          Cartesian3.negate(offset, offset);\r\n          cartesians.push(\r\n            Cartesian3.add(intersection, offset, new Cartesian3())\r\n          );\r\n          count = 1;\r\n        }\r\n      }\r\n\r\n      cartesians.push(Cartesian3.clone(positions[i]));\r\n      count++;\r\n\r\n      prev = cur;\r\n    }\r\n\r\n    segments.push(count);\r\n  }\r\n\r\n  return {\r\n    positions: cartesians,\r\n    lengths: segments,\r\n  };\r\n};\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height.  Returns an array of numbers to represent the positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateArc = function (options) {\r\n  if (!defined(options)) {\r\n    options = {};\r\n  }\r\n  var positions = options.positions;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.positions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = positions.length;\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n  var height = defaultValue(options.height, 0);\r\n  var hasHeightArray = Array.isArray(height);\r\n\r\n  if (length < 1) {\r\n    return [];\r\n  } else if (length === 1) {\r\n    var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n    height = hasHeightArray ? height[0] : height;\r\n    if (height !== 0) {\r\n      var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n      Cartesian3.multiplyByScalar(n, height, n);\r\n      Cartesian3.add(p, n, p);\r\n    }\r\n\r\n    return [p.x, p.y, p.z];\r\n  }\r\n\r\n  var minDistance = options.minDistance;\r\n  if (!defined(minDistance)) {\r\n    var granularity = defaultValue(\r\n      options.granularity,\r\n      CesiumMath.RADIANS_PER_DEGREE\r\n    );\r\n    minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n  }\r\n\r\n  var numPoints = 0;\r\n  var i;\r\n\r\n  for (i = 0; i < length - 1; i++) {\r\n    numPoints += PolylinePipeline.numberOfPoints(\r\n      positions[i],\r\n      positions[i + 1],\r\n      minDistance\r\n    );\r\n  }\r\n\r\n  var arrayLength = (numPoints + 1) * 3;\r\n  var newPositions = new Array(arrayLength);\r\n  var offset = 0;\r\n\r\n  for (i = 0; i < length - 1; i++) {\r\n    var p0 = positions[i];\r\n    var p1 = positions[i + 1];\r\n\r\n    var h0 = hasHeightArray ? height[i] : height;\r\n    var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n    offset = generateCartesianArc(\r\n      p0,\r\n      p1,\r\n      minDistance,\r\n      ellipsoid,\r\n      h0,\r\n      h1,\r\n      newPositions,\r\n      offset\r\n    );\r\n  }\r\n\r\n  subdivideHeightsScratchArray.length = 0;\r\n\r\n  var lastPoint = positions[length - 1];\r\n  var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n  carto.height = hasHeightArray ? height[length - 1] : height;\r\n  var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n  Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n  return newPositions;\r\n};\r\n\r\nvar scratchCartographic0 = new Cartographic();\r\nvar scratchCartographic1 = new Cartographic();\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height using Rhumb lines.  Returns an array of numbers to represent the positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateRhumbArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateRhumbArc = function (options) {\r\n  if (!defined(options)) {\r\n    options = {};\r\n  }\r\n  var positions = options.positions;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.positions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = positions.length;\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n  var height = defaultValue(options.height, 0);\r\n  var hasHeightArray = Array.isArray(height);\r\n\r\n  if (length < 1) {\r\n    return [];\r\n  } else if (length === 1) {\r\n    var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n    height = hasHeightArray ? height[0] : height;\r\n    if (height !== 0) {\r\n      var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n      Cartesian3.multiplyByScalar(n, height, n);\r\n      Cartesian3.add(p, n, p);\r\n    }\r\n\r\n    return [p.x, p.y, p.z];\r\n  }\r\n\r\n  var granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n\r\n  var numPoints = 0;\r\n  var i;\r\n\r\n  var c0 = ellipsoid.cartesianToCartographic(\r\n    positions[0],\r\n    scratchCartographic0\r\n  );\r\n  var c1;\r\n  for (i = 0; i < length - 1; i++) {\r\n    c1 = ellipsoid.cartesianToCartographic(\r\n      positions[i + 1],\r\n      scratchCartographic1\r\n    );\r\n    numPoints += PolylinePipeline.numberOfPointsRhumbLine(c0, c1, granularity);\r\n    c0 = Cartographic.clone(c1, scratchCartographic0);\r\n  }\r\n\r\n  var arrayLength = (numPoints + 1) * 3;\r\n  var newPositions = new Array(arrayLength);\r\n  var offset = 0;\r\n\r\n  for (i = 0; i < length - 1; i++) {\r\n    var p0 = positions[i];\r\n    var p1 = positions[i + 1];\r\n\r\n    var h0 = hasHeightArray ? height[i] : height;\r\n    var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n    offset = generateCartesianRhumbArc(\r\n      p0,\r\n      p1,\r\n      granularity,\r\n      ellipsoid,\r\n      h0,\r\n      h1,\r\n      newPositions,\r\n      offset\r\n    );\r\n  }\r\n\r\n  subdivideHeightsScratchArray.length = 0;\r\n\r\n  var lastPoint = positions[length - 1];\r\n  var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n  carto.height = hasHeightArray ? height[length - 1] : height;\r\n  var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n  Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n  return newPositions;\r\n};\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height. Returns an array of new {Cartesian3} positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateCartesianArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateCartesianArc = function (options) {\r\n  var numberArray = PolylinePipeline.generateArc(options);\r\n  var size = numberArray.length / 3;\r\n  var newPositions = new Array(size);\r\n  for (var i = 0; i < size; i++) {\r\n    newPositions[i] = Cartesian3.unpack(numberArray, i * 3);\r\n  }\r\n  return newPositions;\r\n};\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height using Rhumb Lines. Returns an array of new {Cartesian3} positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateCartesianRhumbArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateCartesianRhumbArc = function (options) {\r\n  var numberArray = PolylinePipeline.generateRhumbArc(options);\r\n  var size = numberArray.length / 3;\r\n  var newPositions = new Array(size);\r\n  for (var i = 0; i < size; i++) {\r\n    newPositions[i] = Cartesian3.unpack(numberArray, i * 3);\r\n  }\r\n  return newPositions;\r\n};\r\nexport default PolylinePipeline;\r\n"],"names":["PolylinePipeline","p0","p1","minDistance","distance","Cartesian3","Math","ceil","granularity","radiansDistanceSquared","pow","longitude","latitude","max","sqrt","cartoScratch","Cartographic","extractHeights","positions","ellipsoid","length","heights","Array","i","p","cartesianToCartographic","height","wrapLongitudeInversMatrix","Matrix4","wrapLongitudeOrigin","wrapLongitudeXZNormal","wrapLongitudeXZPlane","Plane","UNIT_X","wrapLongitudeYZNormal","wrapLongitudeYZPlane","wrapLongitudeIntersection","wrapLongitudeOffset","subdivideHeightsScratchArray","subdivideHeights","numPoints","h0","h1","heightPerVertex","h","carto1","carto2","cartesian","scaleFirst","scaleLast","ellipsoidGeodesic","EllipsoidGeodesic","ellipsoidRhumb","EllipsoidRhumbLine","generateCartesianArc","array","offset","first","scaleToGeodeticSurface","last","numberOfPoints","start","end","setEndPoints","surfaceDistanceBetweenPoints","surfaceDistance","index","cart","cartographicToCartesian","pack","carto","interpolateUsingSurfaceDistance","generateCartesianRhumbArc","numberOfPointsRhumbLine","equals","undefined","wrapLongitude","modelMatrix","cartesians","segments","defined","defaultValue","IDENTITY","inverseModelMatrix","inverseTransformation","origin","multiplyByPoint","ZERO","xzNormal","normalize","multiplyByPointAsVector","UNIT_Y","xzPlane","fromPointNormal","yzNormal","yzPlane","count","push","clone","prev","cur","getPointDistance","intersection","IntersectionTests","lineSegmentPlane","multiplyByScalar","negate","add","lengths","generateArc","options","DeveloperError","Ellipsoid","WGS84","hasHeightArray","isArray","n","geodeticSurfaceNormal","x","y","z","CesiumMath","RADIANS_PER_DEGREE","chordLength","maximumRadius","arrayLength","newPositions","lastPoint","scratchCartographic0","scratchCartographic1","generateRhumbArc","c1","c0","numberArray","size","unpack"],"mappings":"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"}