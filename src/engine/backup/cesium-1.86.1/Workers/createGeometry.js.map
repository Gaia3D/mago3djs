{"version":3,"file":"createGeometry.js","sources":["../../../../Source/WorkersES6/createGeometry.js"],"sourcesContent":["/* global require */\r\nimport defined from \"../Core/defined.js\";\r\nimport PrimitivePipeline from \"../Scene/PrimitivePipeline.js\";\r\nimport when from \"../ThirdParty/when.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nvar moduleCache = {};\r\n\r\nfunction getModule(moduleName) {\r\n  var module = moduleCache[moduleName];\r\n  if (!defined(module)) {\r\n    if (typeof exports === \"object\") {\r\n      // Use CommonJS-style require.\r\n      moduleCache[module] = module = require(\"Workers/\" + moduleName);\r\n    } else {\r\n      // Use AMD-style require.\r\n      // in web workers, require is synchronous\r\n      require([\"Workers/\" + moduleName], function (f) {\r\n        module = f;\r\n        moduleCache[module] = f;\r\n      });\r\n    }\r\n  }\r\n  return module;\r\n}\r\n\r\nfunction createGeometry(parameters, transferableObjects) {\r\n  var subTasks = parameters.subTasks;\r\n  var length = subTasks.length;\r\n  var resultsOrPromises = new Array(length);\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    var task = subTasks[i];\r\n    var geometry = task.geometry;\r\n    var moduleName = task.moduleName;\r\n\r\n    if (defined(moduleName)) {\r\n      var createFunction = getModule(moduleName);\r\n      resultsOrPromises[i] = createFunction(geometry, task.offset);\r\n    } else {\r\n      //Already created geometry\r\n      resultsOrPromises[i] = geometry;\r\n    }\r\n  }\r\n\r\n  return when.all(resultsOrPromises, function (results) {\r\n    return PrimitivePipeline.packCreateGeometryResults(\r\n      results,\r\n      transferableObjects\r\n    );\r\n  });\r\n}\r\nexport default createTaskProcessorWorker(createGeometry);\r\n"],"names":["moduleCache","getModule","moduleName","module","defined","exports","require","f","createTaskProcessorWorker","parameters","transferableObjects","subTasks","length","resultsOrPromises","Array","i","task","geometry","createFunction","offset","when","all","results","PrimitivePipeline","packCreateGeometryResults"],"mappings":"yjBAMA,IAAIA,EAAc,GAElB,SAASC,EAAUC,GACjB,IAAIC,EAASH,EAAYE,GAczB,OAbKE,UAAQD,KACY,iBAAZE,QAETL,EAAYG,GAAUA,EAASG,QAAQ,WAAaJ,GAIpDI,QAAQ,CAAC,WAAaJ,IAAa,SAAUK,GAE3CP,EADAG,EAASI,GACaA,MAIrBJ,SA6BMK,GA1Bf,SAAwBC,EAAYC,GAKlC,IAJA,IAAIC,EAAWF,EAAWE,SACtBC,EAASD,EAASC,OAClBC,EAAoB,IAAIC,MAAMF,GAEzBG,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC/B,IAAIC,EAAOL,EAASI,GAChBE,EAAWD,EAAKC,SAChBf,EAAac,EAAKd,WAEtB,GAAIE,UAAQF,GAAa,CACvB,IAAIgB,EAAiBjB,EAAUC,GAC/BW,EAAkBE,GAAKG,EAAeD,EAAUD,EAAKG,aAGrDN,EAAkBE,GAAKE,EAI3B,OAAOG,OAAKC,IAAIR,GAAmB,SAAUS,GAC3C,OAAOC,oBAAkBC,0BACvBF,EACAZ"}