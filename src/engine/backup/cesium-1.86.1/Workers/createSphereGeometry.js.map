{"version":3,"file":"createSphereGeometry.js","sources":["../../../../Source/Core/SphereGeometry.js","../../../../Source/WorkersES6/createSphereGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\n/**\r\n * A description of a sphere centered at the origin.\r\n *\r\n * @alias SphereGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n *\r\n * @see SphereGeometry#createGeometry\r\n *\r\n * @example\r\n * var sphere = new Cesium.SphereGeometry({\r\n *   radius : 100.0,\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n * });\r\n * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\r\n */\r\nfunction SphereGeometry(options) {\r\n  var radius = defaultValue(options.radius, 1.0);\r\n  var radii = new Cartesian3(radius, radius, radius);\r\n  var ellipsoidOptions = {\r\n    radii: radii,\r\n    stackPartitions: options.stackPartitions,\r\n    slicePartitions: options.slicePartitions,\r\n    vertexFormat: options.vertexFormat,\r\n  };\r\n\r\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\r\n  this._workerName = \"createSphereGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {SphereGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nSphereGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n\r\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n};\r\n\r\nvar scratchEllipsoidGeometry = new EllipsoidGeometry();\r\nvar scratchOptions = {\r\n  radius: undefined,\r\n  radii: new Cartesian3(),\r\n  vertexFormat: new VertexFormat(),\r\n  stackPartitions: undefined,\r\n  slicePartitions: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {SphereGeometry} [result] The object into which to store the result.\r\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\r\n */\r\nSphereGeometry.unpack = function (array, startingIndex, result) {\r\n  var ellipsoidGeometry = EllipsoidGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipsoidGeometry\r\n  );\r\n  scratchOptions.vertexFormat = VertexFormat.clone(\r\n    ellipsoidGeometry._vertexFormat,\r\n    scratchOptions.vertexFormat\r\n  );\r\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n    return new SphereGeometry(scratchOptions);\r\n  }\r\n\r\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nSphereGeometry.createGeometry = function (sphereGeometry) {\r\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n};\r\nexport default SphereGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport SphereGeometry from \"../Core/SphereGeometry.js\";\r\n\r\nfunction createSphereGeometry(sphereGeometry, offset) {\r\n  if (defined(offset)) {\r\n    sphereGeometry = SphereGeometry.unpack(sphereGeometry, offset);\r\n  }\r\n  return SphereGeometry.createGeometry(sphereGeometry);\r\n}\r\nexport default createSphereGeometry;\r\n"],"names":["SphereGeometry","options","radius","defaultValue","ellipsoidOptions","radii","Cartesian3","stackPartitions","slicePartitions","vertexFormat","this","_ellipsoidGeometry","EllipsoidGeometry","_workerName","packedLength","pack","value","array","startingIndex","Check","typeOf","object","scratchEllipsoidGeometry","scratchOptions","undefined","VertexFormat","unpack","result","ellipsoidGeometry","clone","_vertexFormat","_stackPartitions","_slicePartitions","defined","_radii","x","createGeometry","sphereGeometry","offset"],"mappings":"4ZA+BA,SAASA,EAAeC,GACtB,IAAIC,EAASC,eAAaF,EAAQC,OAAQ,GAEtCE,EAAmB,CACrBC,MAFU,IAAIC,aAAWJ,EAAQA,EAAQA,GAGzCK,gBAAiBN,EAAQM,gBACzBC,gBAAiBP,EAAQO,gBACzBC,aAAcR,EAAQQ,cAGxBC,KAAKC,mBAAqB,IAAIC,oBAAkBR,GAChDM,KAAKG,YAAc,uBAOrBb,EAAec,aAAeF,oBAAkBE,aAWhDd,EAAee,KAAO,SAAUC,EAAOC,EAAOC,GAK5C,OAHAC,QAAMC,OAAOC,OAAO,QAASL,GAGtBJ,oBAAkBG,KAAKC,EAAML,mBAAoBM,EAAOC,IAGjE,IAAII,EAA2B,IAAIV,oBAC/BW,EAAiB,CACnBrB,YAAQsB,EACRnB,MAAO,IAAIC,aACXG,aAAc,IAAIgB,eAClBlB,qBAAiBiB,EACjBhB,qBAAiBgB,UAWnBxB,EAAe0B,OAAS,SAAUT,EAAOC,EAAeS,GACtD,IAAIC,EAAoBhB,oBAAkBc,OACxCT,EACAC,EACAI,GASF,OAPAC,EAAed,aAAegB,eAAaI,MACzCD,EAAkBE,cAClBP,EAAed,cAEjBc,EAAehB,gBAAkBqB,EAAkBG,iBACnDR,EAAef,gBAAkBoB,EAAkBI,iBAE9CC,UAAQN,IAKbrB,aAAWuB,MAAMD,EAAkBM,OAAQX,EAAelB,OAC1DsB,EAAOhB,mBAAqB,IAAIC,oBAAkBW,GAC3CI,IANLJ,EAAerB,OAAS0B,EAAkBM,OAAOC,EAC1C,IAAInC,EAAeuB,KAc9BvB,EAAeoC,eAAiB,SAAUC,GACxC,OAAOzB,oBAAkBwB,eAAeC,EAAe1B,qBChHzD,SAA8B0B,EAAgBC,GAI5C,OAHIL,UAAQK,KACVD,EAAiBrC,EAAe0B,OAAOW,EAAgBC,IAElDtC,EAAeoC,eAAeC"}