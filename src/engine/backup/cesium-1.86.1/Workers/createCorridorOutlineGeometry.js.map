{"version":3,"file":"createCorridorOutlineGeometry.js","sources":["../../../../Source/Core/CorridorOutlineGeometry.js","../../../../Source/WorkersES6/createCorridorOutlineGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport CorridorGeometryLibrary from \"./CorridorGeometryLibrary.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\n\r\nvar cartesian1 = new Cartesian3();\r\nvar cartesian2 = new Cartesian3();\r\nvar cartesian3 = new Cartesian3();\r\n\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n  for (var i = 0; i < positions.length; i++) {\r\n    positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n  }\r\n  return positions;\r\n}\r\n\r\nfunction combine(computedPositions, cornerType) {\r\n  var wallIndices = [];\r\n  var positions = computedPositions.positions;\r\n  var corners = computedPositions.corners;\r\n  var endPositions = computedPositions.endPositions;\r\n  var attributes = new GeometryAttributes();\r\n  var corner;\r\n  var leftCount = 0;\r\n  var rightCount = 0;\r\n  var i;\r\n  var indicesLength = 0;\r\n  var length;\r\n  for (i = 0; i < positions.length; i += 2) {\r\n    length = positions[i].length - 3;\r\n    leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n    indicesLength += (length / 3) * 4;\r\n    rightCount += positions[i + 1].length - 3;\r\n  }\r\n  leftCount += 3; //add back count for end positions\r\n  rightCount += 3;\r\n  for (i = 0; i < corners.length; i++) {\r\n    corner = corners[i];\r\n    var leftSide = corners[i].leftPositions;\r\n    if (defined(leftSide)) {\r\n      length = leftSide.length;\r\n      leftCount += length;\r\n      indicesLength += (length / 3) * 2;\r\n    } else {\r\n      length = corners[i].rightPositions.length;\r\n      rightCount += length;\r\n      indicesLength += (length / 3) * 2;\r\n    }\r\n  }\r\n\r\n  var addEndPositions = defined(endPositions);\r\n  var endPositionLength;\r\n  if (addEndPositions) {\r\n    endPositionLength = endPositions[0].length - 3;\r\n    leftCount += endPositionLength;\r\n    rightCount += endPositionLength;\r\n    endPositionLength /= 3;\r\n    indicesLength += endPositionLength * 4;\r\n  }\r\n  var size = leftCount + rightCount;\r\n  var finalPositions = new Float64Array(size);\r\n  var front = 0;\r\n  var back = size - 1;\r\n  var UL, LL, UR, LR;\r\n  var rightPos, leftPos;\r\n  var halfLength = endPositionLength / 2;\r\n\r\n  var indices = IndexDatatype.createTypedArray(size / 3, indicesLength + 4);\r\n  var index = 0;\r\n\r\n  indices[index++] = front / 3;\r\n  indices[index++] = (back - 2) / 3;\r\n  if (addEndPositions) {\r\n    // add rounded end\r\n    wallIndices.push(front / 3);\r\n    leftPos = cartesian1;\r\n    rightPos = cartesian2;\r\n    var firstEndPositions = endPositions[0];\r\n    for (i = 0; i < halfLength; i++) {\r\n      leftPos = Cartesian3.fromArray(\r\n        firstEndPositions,\r\n        (halfLength - 1 - i) * 3,\r\n        leftPos\r\n      );\r\n      rightPos = Cartesian3.fromArray(\r\n        firstEndPositions,\r\n        (halfLength + i) * 3,\r\n        rightPos\r\n      );\r\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n      CorridorGeometryLibrary.addAttribute(\r\n        finalPositions,\r\n        leftPos,\r\n        undefined,\r\n        back\r\n      );\r\n\r\n      LL = front / 3;\r\n      LR = LL + 1;\r\n      UL = (back - 2) / 3;\r\n      UR = UL - 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n  }\r\n\r\n  var posIndex = 0;\r\n  var rightEdge = positions[posIndex++]; //add first two edges\r\n  var leftEdge = positions[posIndex++];\r\n  finalPositions.set(rightEdge, front);\r\n  finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n  length = leftEdge.length - 3;\r\n  wallIndices.push(front / 3, (back - 2) / 3);\r\n  for (i = 0; i < length; i += 3) {\r\n    LL = front / 3;\r\n    LR = LL + 1;\r\n    UL = (back - 2) / 3;\r\n    UR = UL - 1;\r\n    indices[index++] = UL;\r\n    indices[index++] = UR;\r\n    indices[index++] = LL;\r\n    indices[index++] = LR;\r\n\r\n    front += 3;\r\n    back -= 3;\r\n  }\r\n\r\n  for (i = 0; i < corners.length; i++) {\r\n    var j;\r\n    corner = corners[i];\r\n    var l = corner.leftPositions;\r\n    var r = corner.rightPositions;\r\n    var start;\r\n    var outsidePoint = cartesian3;\r\n    if (defined(l)) {\r\n      back -= 3;\r\n      start = UR;\r\n      wallIndices.push(LR);\r\n      for (j = 0; j < l.length / 3; j++) {\r\n        outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n        indices[index++] = start - j - 1;\r\n        indices[index++] = start - j;\r\n        CorridorGeometryLibrary.addAttribute(\r\n          finalPositions,\r\n          outsidePoint,\r\n          undefined,\r\n          back\r\n        );\r\n        back -= 3;\r\n      }\r\n      wallIndices.push(start - Math.floor(l.length / 6));\r\n      if (cornerType === CornerType.BEVELED) {\r\n        wallIndices.push((back - 2) / 3 + 1);\r\n      }\r\n      front += 3;\r\n    } else {\r\n      front += 3;\r\n      start = LR;\r\n      wallIndices.push(UR);\r\n      for (j = 0; j < r.length / 3; j++) {\r\n        outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n        indices[index++] = start + j;\r\n        indices[index++] = start + j + 1;\r\n        CorridorGeometryLibrary.addAttribute(\r\n          finalPositions,\r\n          outsidePoint,\r\n          front\r\n        );\r\n        front += 3;\r\n      }\r\n      wallIndices.push(start + Math.floor(r.length / 6));\r\n      if (cornerType === CornerType.BEVELED) {\r\n        wallIndices.push(front / 3 - 1);\r\n      }\r\n      back -= 3;\r\n    }\r\n    rightEdge = positions[posIndex++];\r\n    leftEdge = positions[posIndex++];\r\n    rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n    leftEdge.splice(leftEdge.length - 3, 3);\r\n    finalPositions.set(rightEdge, front);\r\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n    length = leftEdge.length - 3;\r\n\r\n    for (j = 0; j < leftEdge.length; j += 3) {\r\n      LR = front / 3;\r\n      LL = LR - 1;\r\n      UR = (back - 2) / 3;\r\n      UL = UR + 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n    front -= 3;\r\n    back += 3;\r\n    wallIndices.push(front / 3, (back - 2) / 3);\r\n  }\r\n\r\n  if (addEndPositions) {\r\n    // add rounded end\r\n    front += 3;\r\n    back -= 3;\r\n    leftPos = cartesian1;\r\n    rightPos = cartesian2;\r\n    var lastEndPositions = endPositions[1];\r\n    for (i = 0; i < halfLength; i++) {\r\n      leftPos = Cartesian3.fromArray(\r\n        lastEndPositions,\r\n        (endPositionLength - i - 1) * 3,\r\n        leftPos\r\n      );\r\n      rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n      CorridorGeometryLibrary.addAttribute(\r\n        finalPositions,\r\n        leftPos,\r\n        undefined,\r\n        back\r\n      );\r\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n\r\n      LR = front / 3;\r\n      LL = LR - 1;\r\n      UR = (back - 2) / 3;\r\n      UL = UR + 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n\r\n    wallIndices.push(front / 3);\r\n  } else {\r\n    wallIndices.push(front / 3, (back - 2) / 3);\r\n  }\r\n  indices[index++] = front / 3;\r\n  indices[index++] = (back - 2) / 3;\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: finalPositions,\r\n  });\r\n\r\n  return {\r\n    attributes: attributes,\r\n    indices: indices,\r\n    wallIndices: wallIndices,\r\n  };\r\n}\r\n\r\nfunction computePositionsExtruded(params) {\r\n  var ellipsoid = params.ellipsoid;\r\n  var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n  var attr = combine(computedPositions, params.cornerType);\r\n  var wallIndices = attr.wallIndices;\r\n  var height = params.height;\r\n  var extrudedHeight = params.extrudedHeight;\r\n  var attributes = attr.attributes;\r\n  var indices = attr.indices;\r\n  var positions = attributes.position.values;\r\n  var length = positions.length;\r\n  var extrudedPositions = new Float64Array(length);\r\n  extrudedPositions.set(positions);\r\n  var newPositions = new Float64Array(length * 2);\r\n\r\n  positions = PolygonPipeline.scaleToGeodeticHeight(\r\n    positions,\r\n    height,\r\n    ellipsoid\r\n  );\r\n  extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(\r\n    extrudedPositions,\r\n    extrudedHeight,\r\n    ellipsoid\r\n  );\r\n  newPositions.set(positions);\r\n  newPositions.set(extrudedPositions, length);\r\n  attributes.position.values = newPositions;\r\n\r\n  length /= 3;\r\n  if (defined(params.offsetAttribute)) {\r\n    var applyOffset = new Uint8Array(length * 2);\r\n    if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n      applyOffset = arrayFill(applyOffset, 1, 0, length);\r\n    } else {\r\n      var applyOffsetValue =\r\n        params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n      applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n    }\r\n\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  var i;\r\n  var iLength = indices.length;\r\n  var newIndices = IndexDatatype.createTypedArray(\r\n    newPositions.length / 3,\r\n    (iLength + wallIndices.length) * 2\r\n  );\r\n  newIndices.set(indices);\r\n  var index = iLength;\r\n  for (i = 0; i < iLength; i += 2) {\r\n    // bottom indices\r\n    var v0 = indices[i];\r\n    var v1 = indices[i + 1];\r\n    newIndices[index++] = v0 + length;\r\n    newIndices[index++] = v1 + length;\r\n  }\r\n\r\n  var UL, LL;\r\n  for (i = 0; i < wallIndices.length; i++) {\r\n    //wall indices\r\n    UL = wallIndices[i];\r\n    LL = UL + length;\r\n    newIndices[index++] = UL;\r\n    newIndices[index++] = LL;\r\n  }\r\n\r\n  return {\r\n    attributes: attributes,\r\n    indices: newIndices,\r\n  };\r\n}\r\n\r\n/**\r\n * A description of a corridor outline.\r\n *\r\n * @alias CorridorOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor outline.\r\n * @param {Number} options.width The distance between the edges of the corridor outline.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0] The distance in meters between the positions and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the extruded face and the ellipsoid surface.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see CorridorOutlineGeometry.createGeometry\r\n *\r\n * @example\r\n * var corridor = new Cesium.CorridorOutlineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n *   width : 100000\r\n * });\r\n */\r\nfunction CorridorOutlineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var positions = options.positions;\r\n  var width = options.width;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"options.positions\", positions);\r\n  Check.typeOf.number(\"options.width\", width);\r\n  //>>includeEnd('debug');\r\n\r\n  var height = defaultValue(options.height, 0.0);\r\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n  this._positions = positions;\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._width = width;\r\n  this._height = Math.max(height, extrudedHeight);\r\n  this._extrudedHeight = Math.min(height, extrudedHeight);\r\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._workerName = \"createCorridorOutlineGeometry\";\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    1 + positions.length * Cartesian3.packedLength + Ellipsoid.packedLength + 6;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CorridorOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCorridorOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.typeOf.object(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var positions = value._positions;\r\n  var length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  array[startingIndex++] = value._width;\r\n  array[startingIndex++] = value._height;\r\n  array[startingIndex++] = value._extrudedHeight;\r\n  array[startingIndex++] = value._cornerType;\r\n  array[startingIndex++] = value._granularity;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchOptions = {\r\n  positions: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  width: undefined,\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  cornerType: undefined,\r\n  granularity: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CorridorOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {CorridorOutlineGeometry} The modified result parameter or a new CorridorOutlineGeometry instance if one was not provided.\r\n */\r\nCorridorOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var length = array[startingIndex++];\r\n  var positions = new Array(length);\r\n\r\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  var width = array[startingIndex++];\r\n  var height = array[startingIndex++];\r\n  var extrudedHeight = array[startingIndex++];\r\n  var cornerType = array[startingIndex++];\r\n  var granularity = array[startingIndex++];\r\n  var offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.width = width;\r\n    scratchOptions.height = height;\r\n    scratchOptions.extrudedHeight = extrudedHeight;\r\n    scratchOptions.cornerType = cornerType;\r\n    scratchOptions.granularity = granularity;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    return new CorridorOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._width = width;\r\n  result._height = height;\r\n  result._extrudedHeight = extrudedHeight;\r\n  result._cornerType = cornerType;\r\n  result._granularity = granularity;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CorridorOutlineGeometry} corridorOutlineGeometry A description of the corridor.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCorridorOutlineGeometry.createGeometry = function (corridorOutlineGeometry) {\r\n  var positions = corridorOutlineGeometry._positions;\r\n  var width = corridorOutlineGeometry._width;\r\n  var ellipsoid = corridorOutlineGeometry._ellipsoid;\r\n\r\n  positions = scaleToSurface(positions, ellipsoid);\r\n  var cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n\r\n  if (cleanPositions.length < 2 || width <= 0) {\r\n    return;\r\n  }\r\n\r\n  var height = corridorOutlineGeometry._height;\r\n  var extrudedHeight = corridorOutlineGeometry._extrudedHeight;\r\n  var extrude = !CesiumMath.equalsEpsilon(\r\n    height,\r\n    extrudedHeight,\r\n    0,\r\n    CesiumMath.EPSILON2\r\n  );\r\n\r\n  var params = {\r\n    ellipsoid: ellipsoid,\r\n    positions: cleanPositions,\r\n    width: width,\r\n    cornerType: corridorOutlineGeometry._cornerType,\r\n    granularity: corridorOutlineGeometry._granularity,\r\n    saveAttributes: false,\r\n  };\r\n  var attr;\r\n  if (extrude) {\r\n    params.height = height;\r\n    params.extrudedHeight = extrudedHeight;\r\n    params.offsetAttribute = corridorOutlineGeometry._offsetAttribute;\r\n    attr = computePositionsExtruded(params);\r\n  } else {\r\n    var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n    attr = combine(computedPositions, params.cornerType);\r\n    attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n      attr.attributes.position.values,\r\n      height,\r\n      ellipsoid\r\n    );\r\n\r\n    if (defined(corridorOutlineGeometry._offsetAttribute)) {\r\n      var length = attr.attributes.position.values.length;\r\n      var applyOffset = new Uint8Array(length / 3);\r\n      var offsetValue =\r\n        corridorOutlineGeometry._offsetAttribute ===\r\n        GeometryOffsetAttribute.NONE\r\n          ? 0\r\n          : 1;\r\n      arrayFill(applyOffset, offsetValue);\r\n      attr.attributes.applyOffset = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n        componentsPerAttribute: 1,\r\n        values: applyOffset,\r\n      });\r\n    }\r\n  }\r\n  var attributes = attr.attributes;\r\n  var boundingSphere = BoundingSphere.fromVertices(\r\n    attributes.position.values,\r\n    undefined,\r\n    3\r\n  );\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: attr.indices,\r\n    primitiveType: PrimitiveType.LINES,\r\n    boundingSphere: boundingSphere,\r\n    offsetAttribute: corridorOutlineGeometry._offsetAttribute,\r\n  });\r\n};\r\nexport default CorridorOutlineGeometry;\r\n","import CorridorOutlineGeometry from \"../Core/CorridorOutlineGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCorridorOutlineGeometry(corridorOutlineGeometry, offset) {\r\n  if (defined(offset)) {\r\n    corridorOutlineGeometry = CorridorOutlineGeometry.unpack(\r\n      corridorOutlineGeometry,\r\n      offset\r\n    );\r\n  }\r\n  corridorOutlineGeometry._ellipsoid = Ellipsoid.clone(\r\n    corridorOutlineGeometry._ellipsoid\r\n  );\r\n  return CorridorOutlineGeometry.createGeometry(corridorOutlineGeometry);\r\n}\r\nexport default createCorridorOutlineGeometry;\r\n"],"names":["cartesian1","Cartesian3","cartesian2","cartesian3","combine","computedPositions","cornerType","corner","i","length","wallIndices","positions","corners","endPositions","attributes","GeometryAttributes","leftCount","rightCount","indicesLength","leftSide","leftPositions","defined","rightPositions","endPositionLength","addEndPositions","UL","LL","UR","LR","rightPos","leftPos","size","finalPositions","Float64Array","front","back","halfLength","indices","IndexDatatype","createTypedArray","index","push","firstEndPositions","fromArray","CorridorGeometryLibrary","addAttribute","undefined","posIndex","rightEdge","leftEdge","set","j","start","l","r","outsidePoint","Math","floor","CornerType","BEVELED","splice","lastEndPositions","position","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","CorridorOutlineGeometry","options","defaultValue","EMPTY_OBJECT","width","Check","typeOf","object","number","height","extrudedHeight","this","_positions","_ellipsoid","Ellipsoid","clone","ellipsoid","WGS84","_width","_height","max","_extrudedHeight","min","_cornerType","ROUNDED","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_offsetAttribute","offsetAttribute","_workerName","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchOptions","unpack","result","Array","createGeometry","corridorOutlineGeometry","scaleToGeodeticSurface","scaleToSurface","cleanPositions","arrayRemoveDuplicates","equalsEpsilon","attr","extrude","EPSILON2","params","saveAttributes","computePositions","extrudedPositions","newPositions","PolygonPipeline","scaleToGeodeticHeight","applyOffset","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","applyOffsetValue","NONE","UNSIGNED_BYTE","iLength","newIndices","v0","v1","computePositionsExtruded","offsetValue","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","PrimitiveType","LINES","offset"],"mappings":"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"}