{"version":3,"file":"createCircleOutlineGeometry.js","sources":["../../../../Source/Core/CircleOutlineGeometry.js","../../../../Source/WorkersES6/createCircleOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\n\r\n/**\r\n * A description of the outline of a circle on the ellipsoid.\r\n *\r\n * @alias CircleOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n * @param {Number} options.radius The radius in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\r\n *\r\n * @exception {DeveloperError} radius must be greater than zero.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n * @see CircleOutlineGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @example\r\n * // Create a circle.\r\n * var circle = new Cesium.CircleOutlineGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   radius : 100000.0\r\n * });\r\n * var geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\r\n */\r\nfunction CircleOutlineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var radius = options.radius;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"radius\", radius);\r\n  //>>includeEnd('debug');\r\n\r\n  var ellipseGeometryOptions = {\r\n    center: options.center,\r\n    semiMajorAxis: radius,\r\n    semiMinorAxis: radius,\r\n    ellipsoid: options.ellipsoid,\r\n    height: options.height,\r\n    extrudedHeight: options.extrudedHeight,\r\n    granularity: options.granularity,\r\n    numberOfVerticalLines: options.numberOfVerticalLines,\r\n  };\r\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\r\n  this._workerName = \"createCircleOutlineGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CircleOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n  return EllipseOutlineGeometry.pack(\r\n    value._ellipseGeometry,\r\n    array,\r\n    startingIndex\r\n  );\r\n};\r\n\r\nvar scratchEllipseGeometry = new EllipseOutlineGeometry({\r\n  center: new Cartesian3(),\r\n  semiMajorAxis: 1.0,\r\n  semiMinorAxis: 1.0,\r\n});\r\nvar scratchOptions = {\r\n  center: new Cartesian3(),\r\n  radius: undefined,\r\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  granularity: undefined,\r\n  numberOfVerticalLines: undefined,\r\n  semiMajorAxis: undefined,\r\n  semiMinorAxis: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\r\n */\r\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  var ellipseGeometry = EllipseOutlineGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipseGeometry\r\n  );\r\n  scratchOptions.center = Cartesian3.clone(\r\n    ellipseGeometry._center,\r\n    scratchOptions.center\r\n  );\r\n  scratchOptions.ellipsoid = Ellipsoid.clone(\r\n    ellipseGeometry._ellipsoid,\r\n    scratchOptions.ellipsoid\r\n  );\r\n  scratchOptions.height = ellipseGeometry._height;\r\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n  scratchOptions.granularity = ellipseGeometry._granularity;\r\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n    return new CircleOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\r\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n};\r\nexport default CircleOutlineGeometry;\r\n","import Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport CircleOutlineGeometry from \"../Core/CircleOutlineGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCircleOutlineGeometry(circleGeometry, offset) {\r\n  if (defined(offset)) {\r\n    circleGeometry = CircleOutlineGeometry.unpack(circleGeometry, offset);\r\n  }\r\n  circleGeometry._ellipseGeometry._center = Cartesian3.clone(\r\n    circleGeometry._ellipseGeometry._center\r\n  );\r\n  circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(\r\n    circleGeometry._ellipseGeometry._ellipsoid\r\n  );\r\n  return CircleOutlineGeometry.createGeometry(circleGeometry);\r\n}\r\nexport default createCircleOutlineGeometry;\r\n"],"names":["CircleOutlineGeometry","options","radius","defaultValue","EMPTY_OBJECT","Check","typeOf","number","ellipseGeometryOptions","center","semiMajorAxis","semiMinorAxis","ellipsoid","height","extrudedHeight","granularity","numberOfVerticalLines","this","_ellipseGeometry","EllipseOutlineGeometry","_workerName","packedLength","pack","value","array","startingIndex","object","scratchEllipseGeometry","Cartesian3","scratchOptions","undefined","Ellipsoid","clone","UNIT_SPHERE","unpack","result","ellipseGeometry","_center","_ellipsoid","_height","_extrudedHeight","_granularity","_numberOfVerticalLines","defined","_semiMajorAxis","_semiMinorAxis","createGeometry","circleGeometry","offset"],"mappings":"2aAoCA,SAASA,EAAsBC,GAE7B,IAAIC,GADJD,EAAUE,eAAaF,EAASE,eAAaC,eACxBF,OAGrBG,QAAMC,OAAOC,OAAO,SAAUL,GAG9B,IAAIM,EAAyB,CAC3BC,OAAQR,EAAQQ,OAChBC,cAAeR,EACfS,cAAeT,EACfU,UAAWX,EAAQW,UACnBC,OAAQZ,EAAQY,OAChBC,eAAgBb,EAAQa,eACxBC,YAAad,EAAQc,YACrBC,sBAAuBf,EAAQe,uBAEjCC,KAAKC,iBAAmB,IAAIC,yBAAuBX,GACnDS,KAAKG,YAAc,8BAOrBpB,EAAsBqB,aAAeF,yBAAuBE,aAW5DrB,EAAsBsB,KAAO,SAAUC,EAAOC,EAAOC,GAInD,OAFApB,QAAMC,OAAOoB,OAAO,QAASH,GAEtBJ,yBAAuBG,KAC5BC,EAAML,iBACNM,EACAC,IAIJ,IAAIE,EAAyB,IAAIR,yBAAuB,CACtDV,OAAQ,IAAImB,aACZlB,cAAe,EACfC,cAAe,IAEbkB,EAAiB,CACnBpB,OAAQ,IAAImB,aACZ1B,YAAQ4B,EACRlB,UAAWmB,YAAUC,MAAMD,YAAUE,aACrCpB,YAAQiB,EACRhB,oBAAgBgB,EAChBf,iBAAae,EACbd,2BAAuBc,EACvBpB,mBAAeoB,EACfnB,mBAAemB,UAWjB9B,EAAsBkC,OAAS,SAAUV,EAAOC,EAAeU,GAC7D,IAAIC,EAAkBjB,yBAAuBe,OAC3CV,EACAC,EACAE,GAeF,OAbAE,EAAepB,OAASmB,aAAWI,MACjCI,EAAgBC,QAChBR,EAAepB,QAEjBoB,EAAejB,UAAYmB,YAAUC,MACnCI,EAAgBE,WAChBT,EAAejB,WAEjBiB,EAAehB,OAASuB,EAAgBG,QACxCV,EAAef,eAAiBsB,EAAgBI,gBAChDX,EAAed,YAAcqB,EAAgBK,aAC7CZ,EAAeb,sBAAwBoB,EAAgBM,uBAElDC,UAAQR,IAKbN,EAAenB,cAAgB0B,EAAgBQ,eAC/Cf,EAAelB,cAAgByB,EAAgBS,eAC/CV,EAAOjB,iBAAmB,IAAIC,yBAAuBU,GAC9CM,IAPLN,EAAe3B,OAASkC,EAAgBQ,eACjC,IAAI5C,EAAsB6B,KAerC7B,EAAsB8C,eAAiB,SAAUC,GAC/C,OAAO5B,yBAAuB2B,eAAeC,EAAe7B,mBC7I9D,SAAqC6B,EAAgBC,GAUnD,OATIL,UAAQK,KACVD,EAAiB/C,EAAsBkC,OAAOa,EAAgBC,IAEhED,EAAe7B,iBAAiBmB,QAAUT,aAAWI,MACnDe,EAAe7B,iBAAiBmB,SAElCU,EAAe7B,iBAAiBoB,WAAaP,YAAUC,MACrDe,EAAe7B,iBAAiBoB,YAE3BtC,EAAsB8C,eAAeC"}