{"version":3,"file":"GeometryOffsetAttribute-036749bc.js","sources":["../../../../Source/Core/GeometryOffsetAttribute.js","../../../../Source/Core/arrayFill.js"],"sourcesContent":["/**\r\n * Represents which vertices should have a value of `true` for the `applyOffset` attribute\r\n * @private\r\n */\r\nvar GeometryOffsetAttribute = {\r\n  NONE: 0,\r\n  TOP: 1,\r\n  ALL: 2,\r\n};\r\nexport default Object.freeze(GeometryOffsetAttribute);\r\n","import Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\n\r\n/**\r\n * Fill an array or a portion of an array with a given value.\r\n *\r\n * @param {Array} array The array to fill.\r\n * @param {*} value The value to fill the array with.\r\n * @param {Number} [start=0] The index to start filling at.\r\n * @param {Number} [end=array.length] The index to end stop at.\r\n *\r\n * @returns {Array} The resulting array.\r\n * @private\r\n */\r\nfunction arrayFill(array, value, start, end) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  Check.defined(\"value\", value);\r\n  if (defined(start)) {\r\n    Check.typeOf.number(\"start\", start);\r\n  }\r\n  if (defined(end)) {\r\n    Check.typeOf.number(\"end\", end);\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (typeof array.fill === \"function\") {\r\n    return array.fill(value, start, end);\r\n  }\r\n\r\n  var length = array.length >>> 0;\r\n  var relativeStart = defaultValue(start, 0);\r\n  // If negative, find wrap around position\r\n  var k =\r\n    relativeStart < 0\r\n      ? Math.max(length + relativeStart, 0)\r\n      : Math.min(relativeStart, length);\r\n  var relativeEnd = defaultValue(end, length);\r\n  // If negative, find wrap around position\r\n  var last =\r\n    relativeEnd < 0\r\n      ? Math.max(length + relativeEnd, 0)\r\n      : Math.min(relativeEnd, length);\r\n\r\n  // Fill array accordingly\r\n  while (k < last) {\r\n    array[k] = value;\r\n    k++;\r\n  }\r\n  return array;\r\n}\r\nexport default arrayFill;\r\n"],"names":["Object","freeze","NONE","TOP","ALL","array","value","start","end","Check","defined","typeOf","number","fill","length","relativeStart","defaultValue","k","Math","max","min","relativeEnd","last"],"mappings":"6FAIA,MAKeA,OAAOC,OALQ,CAC5BC,KAAM,EACNC,IAAK,EACLC,IAAK,4CCQP,SAAmBC,EAAOC,EAAOC,EAAOC,GAYtC,GAVAC,QAAMC,QAAQ,QAASL,GACvBI,QAAMC,QAAQ,QAASJ,GACnBI,UAAQH,IACVE,QAAME,OAAOC,OAAO,QAASL,GAE3BG,UAAQF,IACVC,QAAME,OAAOC,OAAO,MAAOJ,GAIH,mBAAfH,EAAMQ,KACf,OAAOR,EAAMQ,KAAKP,EAAOC,EAAOC,GAkBlC,IAfA,IAAIM,EAAST,EAAMS,SAAW,EAC1BC,EAAgBC,eAAaT,EAAO,GAEpCU,EACFF,EAAgB,EACZG,KAAKC,IAAIL,EAASC,EAAe,GACjCG,KAAKE,IAAIL,EAAeD,GAC1BO,EAAcL,eAAaR,EAAKM,GAEhCQ,EACFD,EAAc,EACVH,KAAKC,IAAIL,EAASO,EAAa,GAC/BH,KAAKE,IAAIC,EAAaP,GAGrBG,EAAIK,GACTjB,EAAMY,GAAKX,EACXW,IAEF,OAAOZ"}