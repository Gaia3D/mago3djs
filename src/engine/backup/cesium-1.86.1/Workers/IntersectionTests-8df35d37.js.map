{"version":3,"file":"IntersectionTests-8df35d37.js","sources":["../../../../Source/Core/QuadraticRealPolynomial.js","../../../../Source/Core/CubicRealPolynomial.js","../../../../Source/Core/QuarticRealPolynomial.js","../../../../Source/Core/Ray.js","../../../../Source/Core/IntersectionTests.js"],"sourcesContent":["import DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\n/**\r\n * Defines functions for 2nd order polynomial functions of one variable with only real coefficients.\r\n *\r\n * @namespace QuadraticRealPolynomial\r\n */\r\nvar QuadraticRealPolynomial = {};\r\n\r\n/**\r\n * Provides the discriminant of the quadratic equation from the supplied coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 2nd order monomial.\r\n * @param {Number} b The coefficient of the 1st order monomial.\r\n * @param {Number} c The coefficient of the 0th order monomial.\r\n * @returns {Number} The value of the discriminant.\r\n */\r\nQuadraticRealPolynomial.computeDiscriminant = function (a, b, c) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (typeof a !== \"number\") {\r\n    throw new DeveloperError(\"a is a required number.\");\r\n  }\r\n  if (typeof b !== \"number\") {\r\n    throw new DeveloperError(\"b is a required number.\");\r\n  }\r\n  if (typeof c !== \"number\") {\r\n    throw new DeveloperError(\"c is a required number.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var discriminant = b * b - 4.0 * a * c;\r\n  return discriminant;\r\n};\r\n\r\nfunction addWithCancellationCheck(left, right, tolerance) {\r\n  var difference = left + right;\r\n  if (\r\n    CesiumMath.sign(left) !== CesiumMath.sign(right) &&\r\n    Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance\r\n  ) {\r\n    return 0.0;\r\n  }\r\n\r\n  return difference;\r\n}\r\n\r\n/**\r\n * Provides the real valued roots of the quadratic polynomial with the provided coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 2nd order monomial.\r\n * @param {Number} b The coefficient of the 1st order monomial.\r\n * @param {Number} c The coefficient of the 0th order monomial.\r\n * @returns {Number[]} The real valued roots.\r\n */\r\nQuadraticRealPolynomial.computeRealRoots = function (a, b, c) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (typeof a !== \"number\") {\r\n    throw new DeveloperError(\"a is a required number.\");\r\n  }\r\n  if (typeof b !== \"number\") {\r\n    throw new DeveloperError(\"b is a required number.\");\r\n  }\r\n  if (typeof c !== \"number\") {\r\n    throw new DeveloperError(\"c is a required number.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var ratio;\r\n  if (a === 0.0) {\r\n    if (b === 0.0) {\r\n      // Constant function: c = 0.\r\n      return [];\r\n    }\r\n\r\n    // Linear function: b * x + c = 0.\r\n    return [-c / b];\r\n  } else if (b === 0.0) {\r\n    if (c === 0.0) {\r\n      // 2nd order monomial: a * x^2 = 0.\r\n      return [0.0, 0.0];\r\n    }\r\n\r\n    var cMagnitude = Math.abs(c);\r\n    var aMagnitude = Math.abs(a);\r\n\r\n    if (\r\n      cMagnitude < aMagnitude &&\r\n      cMagnitude / aMagnitude < CesiumMath.EPSILON14\r\n    ) {\r\n      // c ~= 0.0.\r\n      // 2nd order monomial: a * x^2 = 0.\r\n      return [0.0, 0.0];\r\n    } else if (\r\n      cMagnitude > aMagnitude &&\r\n      aMagnitude / cMagnitude < CesiumMath.EPSILON14\r\n    ) {\r\n      // a ~= 0.0.\r\n      // Constant function: c = 0.\r\n      return [];\r\n    }\r\n\r\n    // a * x^2 + c = 0\r\n    ratio = -c / a;\r\n\r\n    if (ratio < 0.0) {\r\n      // Both roots are complex.\r\n      return [];\r\n    }\r\n\r\n    // Both roots are real.\r\n    var root = Math.sqrt(ratio);\r\n    return [-root, root];\r\n  } else if (c === 0.0) {\r\n    // a * x^2 + b * x = 0\r\n    ratio = -b / a;\r\n    if (ratio < 0.0) {\r\n      return [ratio, 0.0];\r\n    }\r\n\r\n    return [0.0, ratio];\r\n  }\r\n\r\n  // a * x^2 + b * x + c = 0\r\n  var b2 = b * b;\r\n  var four_ac = 4.0 * a * c;\r\n  var radicand = addWithCancellationCheck(b2, -four_ac, CesiumMath.EPSILON14);\r\n\r\n  if (radicand < 0.0) {\r\n    // Both roots are complex.\r\n    return [];\r\n  }\r\n\r\n  var q =\r\n    -0.5 *\r\n    addWithCancellationCheck(\r\n      b,\r\n      CesiumMath.sign(b) * Math.sqrt(radicand),\r\n      CesiumMath.EPSILON14\r\n    );\r\n  if (b > 0.0) {\r\n    return [q / a, c / q];\r\n  }\r\n\r\n  return [c / q, q / a];\r\n};\r\nexport default QuadraticRealPolynomial;\r\n","import DeveloperError from \"./DeveloperError.js\";\r\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\r\n\r\n/**\r\n * Defines functions for 3rd order polynomial functions of one variable with only real coefficients.\r\n *\r\n * @namespace CubicRealPolynomial\r\n */\r\nvar CubicRealPolynomial = {};\r\n\r\n/**\r\n * Provides the discriminant of the cubic equation from the supplied coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 3rd order monomial.\r\n * @param {Number} b The coefficient of the 2nd order monomial.\r\n * @param {Number} c The coefficient of the 1st order monomial.\r\n * @param {Number} d The coefficient of the 0th order monomial.\r\n * @returns {Number} The value of the discriminant.\r\n */\r\nCubicRealPolynomial.computeDiscriminant = function (a, b, c, d) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (typeof a !== \"number\") {\r\n    throw new DeveloperError(\"a is a required number.\");\r\n  }\r\n  if (typeof b !== \"number\") {\r\n    throw new DeveloperError(\"b is a required number.\");\r\n  }\r\n  if (typeof c !== \"number\") {\r\n    throw new DeveloperError(\"c is a required number.\");\r\n  }\r\n  if (typeof d !== \"number\") {\r\n    throw new DeveloperError(\"d is a required number.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var a2 = a * a;\r\n  var b2 = b * b;\r\n  var c2 = c * c;\r\n  var d2 = d * d;\r\n\r\n  var discriminant =\r\n    18.0 * a * b * c * d +\r\n    b2 * c2 -\r\n    27.0 * a2 * d2 -\r\n    4.0 * (a * c2 * c + b2 * b * d);\r\n  return discriminant;\r\n};\r\n\r\nfunction computeRealRoots(a, b, c, d) {\r\n  var A = a;\r\n  var B = b / 3.0;\r\n  var C = c / 3.0;\r\n  var D = d;\r\n\r\n  var AC = A * C;\r\n  var BD = B * D;\r\n  var B2 = B * B;\r\n  var C2 = C * C;\r\n  var delta1 = A * C - B2;\r\n  var delta2 = A * D - B * C;\r\n  var delta3 = B * D - C2;\r\n\r\n  var discriminant = 4.0 * delta1 * delta3 - delta2 * delta2;\r\n  var temp;\r\n  var temp1;\r\n\r\n  if (discriminant < 0.0) {\r\n    var ABar;\r\n    var CBar;\r\n    var DBar;\r\n\r\n    if (B2 * BD >= AC * C2) {\r\n      ABar = A;\r\n      CBar = delta1;\r\n      DBar = -2.0 * B * delta1 + A * delta2;\r\n    } else {\r\n      ABar = D;\r\n      CBar = delta3;\r\n      DBar = -D * delta2 + 2.0 * C * delta3;\r\n    }\r\n\r\n    var s = DBar < 0.0 ? -1.0 : 1.0; // This is not Math.Sign()!\r\n    var temp0 = -s * Math.abs(ABar) * Math.sqrt(-discriminant);\r\n    temp1 = -DBar + temp0;\r\n\r\n    var x = temp1 / 2.0;\r\n    var p = x < 0.0 ? -Math.pow(-x, 1.0 / 3.0) : Math.pow(x, 1.0 / 3.0);\r\n    var q = temp1 === temp0 ? -p : -CBar / p;\r\n\r\n    temp = CBar <= 0.0 ? p + q : -DBar / (p * p + q * q + CBar);\r\n\r\n    if (B2 * BD >= AC * C2) {\r\n      return [(temp - B) / A];\r\n    }\r\n\r\n    return [-D / (temp + C)];\r\n  }\r\n\r\n  var CBarA = delta1;\r\n  var DBarA = -2.0 * B * delta1 + A * delta2;\r\n\r\n  var CBarD = delta3;\r\n  var DBarD = -D * delta2 + 2.0 * C * delta3;\r\n\r\n  var squareRootOfDiscriminant = Math.sqrt(discriminant);\r\n  var halfSquareRootOf3 = Math.sqrt(3.0) / 2.0;\r\n\r\n  var theta = Math.abs(Math.atan2(A * squareRootOfDiscriminant, -DBarA) / 3.0);\r\n  temp = 2.0 * Math.sqrt(-CBarA);\r\n  var cosine = Math.cos(theta);\r\n  temp1 = temp * cosine;\r\n  var temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\r\n\r\n  var numeratorLarge = temp1 + temp3 > 2.0 * B ? temp1 - B : temp3 - B;\r\n  var denominatorLarge = A;\r\n\r\n  var root1 = numeratorLarge / denominatorLarge;\r\n\r\n  theta = Math.abs(Math.atan2(D * squareRootOfDiscriminant, -DBarD) / 3.0);\r\n  temp = 2.0 * Math.sqrt(-CBarD);\r\n  cosine = Math.cos(theta);\r\n  temp1 = temp * cosine;\r\n  temp3 = temp * (-cosine / 2.0 - halfSquareRootOf3 * Math.sin(theta));\r\n\r\n  var numeratorSmall = -D;\r\n  var denominatorSmall = temp1 + temp3 < 2.0 * C ? temp1 + C : temp3 + C;\r\n\r\n  var root3 = numeratorSmall / denominatorSmall;\r\n\r\n  var E = denominatorLarge * denominatorSmall;\r\n  var F =\r\n    -numeratorLarge * denominatorSmall - denominatorLarge * numeratorSmall;\r\n  var G = numeratorLarge * numeratorSmall;\r\n\r\n  var root2 = (C * F - B * G) / (-B * F + C * E);\r\n\r\n  if (root1 <= root2) {\r\n    if (root1 <= root3) {\r\n      if (root2 <= root3) {\r\n        return [root1, root2, root3];\r\n      }\r\n      return [root1, root3, root2];\r\n    }\r\n    return [root3, root1, root2];\r\n  }\r\n  if (root1 <= root3) {\r\n    return [root2, root1, root3];\r\n  }\r\n  if (root2 <= root3) {\r\n    return [root2, root3, root1];\r\n  }\r\n  return [root3, root2, root1];\r\n}\r\n\r\n/**\r\n * Provides the real valued roots of the cubic polynomial with the provided coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 3rd order monomial.\r\n * @param {Number} b The coefficient of the 2nd order monomial.\r\n * @param {Number} c The coefficient of the 1st order monomial.\r\n * @param {Number} d The coefficient of the 0th order monomial.\r\n * @returns {Number[]} The real valued roots.\r\n */\r\nCubicRealPolynomial.computeRealRoots = function (a, b, c, d) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (typeof a !== \"number\") {\r\n    throw new DeveloperError(\"a is a required number.\");\r\n  }\r\n  if (typeof b !== \"number\") {\r\n    throw new DeveloperError(\"b is a required number.\");\r\n  }\r\n  if (typeof c !== \"number\") {\r\n    throw new DeveloperError(\"c is a required number.\");\r\n  }\r\n  if (typeof d !== \"number\") {\r\n    throw new DeveloperError(\"d is a required number.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var roots;\r\n  var ratio;\r\n  if (a === 0.0) {\r\n    // Quadratic function: b * x^2 + c * x + d = 0.\r\n    return QuadraticRealPolynomial.computeRealRoots(b, c, d);\r\n  } else if (b === 0.0) {\r\n    if (c === 0.0) {\r\n      if (d === 0.0) {\r\n        // 3rd order monomial: a * x^3 = 0.\r\n        return [0.0, 0.0, 0.0];\r\n      }\r\n\r\n      // a * x^3 + d = 0\r\n      ratio = -d / a;\r\n      var root =\r\n        ratio < 0.0 ? -Math.pow(-ratio, 1.0 / 3.0) : Math.pow(ratio, 1.0 / 3.0);\r\n      return [root, root, root];\r\n    } else if (d === 0.0) {\r\n      // x * (a * x^2 + c) = 0.\r\n      roots = QuadraticRealPolynomial.computeRealRoots(a, 0, c);\r\n\r\n      // Return the roots in ascending order.\r\n      if (roots.Length === 0) {\r\n        return [0.0];\r\n      }\r\n      return [roots[0], 0.0, roots[1]];\r\n    }\r\n\r\n    // Deflated cubic polynomial: a * x^3 + c * x + d= 0.\r\n    return computeRealRoots(a, 0, c, d);\r\n  } else if (c === 0.0) {\r\n    if (d === 0.0) {\r\n      // x^2 * (a * x + b) = 0.\r\n      ratio = -b / a;\r\n      if (ratio < 0.0) {\r\n        return [ratio, 0.0, 0.0];\r\n      }\r\n      return [0.0, 0.0, ratio];\r\n    }\r\n    // a * x^3 + b * x^2 + d = 0.\r\n    return computeRealRoots(a, b, 0, d);\r\n  } else if (d === 0.0) {\r\n    // x * (a * x^2 + b * x + c) = 0\r\n    roots = QuadraticRealPolynomial.computeRealRoots(a, b, c);\r\n\r\n    // Return the roots in ascending order.\r\n    if (roots.length === 0) {\r\n      return [0.0];\r\n    } else if (roots[1] <= 0.0) {\r\n      return [roots[0], roots[1], 0.0];\r\n    } else if (roots[0] >= 0.0) {\r\n      return [0.0, roots[0], roots[1]];\r\n    }\r\n    return [roots[0], 0.0, roots[1]];\r\n  }\r\n\r\n  return computeRealRoots(a, b, c, d);\r\n};\r\nexport default CubicRealPolynomial;\r\n","import CubicRealPolynomial from \"./CubicRealPolynomial.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\r\n\r\n/**\r\n * Defines functions for 4th order polynomial functions of one variable with only real coefficients.\r\n *\r\n * @namespace QuarticRealPolynomial\r\n */\r\nvar QuarticRealPolynomial = {};\r\n\r\n/**\r\n * Provides the discriminant of the quartic equation from the supplied coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 4th order monomial.\r\n * @param {Number} b The coefficient of the 3rd order monomial.\r\n * @param {Number} c The coefficient of the 2nd order monomial.\r\n * @param {Number} d The coefficient of the 1st order monomial.\r\n * @param {Number} e The coefficient of the 0th order monomial.\r\n * @returns {Number} The value of the discriminant.\r\n */\r\nQuarticRealPolynomial.computeDiscriminant = function (a, b, c, d, e) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (typeof a !== \"number\") {\r\n    throw new DeveloperError(\"a is a required number.\");\r\n  }\r\n  if (typeof b !== \"number\") {\r\n    throw new DeveloperError(\"b is a required number.\");\r\n  }\r\n  if (typeof c !== \"number\") {\r\n    throw new DeveloperError(\"c is a required number.\");\r\n  }\r\n  if (typeof d !== \"number\") {\r\n    throw new DeveloperError(\"d is a required number.\");\r\n  }\r\n  if (typeof e !== \"number\") {\r\n    throw new DeveloperError(\"e is a required number.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var a2 = a * a;\r\n  var a3 = a2 * a;\r\n  var b2 = b * b;\r\n  var b3 = b2 * b;\r\n  var c2 = c * c;\r\n  var c3 = c2 * c;\r\n  var d2 = d * d;\r\n  var d3 = d2 * d;\r\n  var e2 = e * e;\r\n  var e3 = e2 * e;\r\n\r\n  var discriminant =\r\n    b2 * c2 * d2 -\r\n    4.0 * b3 * d3 -\r\n    4.0 * a * c3 * d2 +\r\n    18 * a * b * c * d3 -\r\n    27.0 * a2 * d2 * d2 +\r\n    256.0 * a3 * e3 +\r\n    e *\r\n      (18.0 * b3 * c * d -\r\n        4.0 * b2 * c3 +\r\n        16.0 * a * c2 * c2 -\r\n        80.0 * a * b * c2 * d -\r\n        6.0 * a * b2 * d2 +\r\n        144.0 * a2 * c * d2) +\r\n    e2 *\r\n      (144.0 * a * b2 * c -\r\n        27.0 * b2 * b2 -\r\n        128.0 * a2 * c2 -\r\n        192.0 * a2 * b * d);\r\n  return discriminant;\r\n};\r\n\r\nfunction original(a3, a2, a1, a0) {\r\n  var a3Squared = a3 * a3;\r\n\r\n  var p = a2 - (3.0 * a3Squared) / 8.0;\r\n  var q = a1 - (a2 * a3) / 2.0 + (a3Squared * a3) / 8.0;\r\n  var r =\r\n    a0 -\r\n    (a1 * a3) / 4.0 +\r\n    (a2 * a3Squared) / 16.0 -\r\n    (3.0 * a3Squared * a3Squared) / 256.0;\r\n\r\n  // Find the roots of the cubic equations:  h^6 + 2 p h^4 + (p^2 - 4 r) h^2 - q^2 = 0.\r\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(\r\n    1.0,\r\n    2.0 * p,\r\n    p * p - 4.0 * r,\r\n    -q * q\r\n  );\r\n\r\n  if (cubicRoots.length > 0) {\r\n    var temp = -a3 / 4.0;\r\n\r\n    // Use the largest positive root.\r\n    var hSquared = cubicRoots[cubicRoots.length - 1];\r\n\r\n    if (Math.abs(hSquared) < CesiumMath.EPSILON14) {\r\n      // y^4 + p y^2 + r = 0.\r\n      var roots = QuadraticRealPolynomial.computeRealRoots(1.0, p, r);\r\n\r\n      if (roots.length === 2) {\r\n        var root0 = roots[0];\r\n        var root1 = roots[1];\r\n\r\n        var y;\r\n        if (root0 >= 0.0 && root1 >= 0.0) {\r\n          var y0 = Math.sqrt(root0);\r\n          var y1 = Math.sqrt(root1);\r\n\r\n          return [temp - y1, temp - y0, temp + y0, temp + y1];\r\n        } else if (root0 >= 0.0 && root1 < 0.0) {\r\n          y = Math.sqrt(root0);\r\n          return [temp - y, temp + y];\r\n        } else if (root0 < 0.0 && root1 >= 0.0) {\r\n          y = Math.sqrt(root1);\r\n          return [temp - y, temp + y];\r\n        }\r\n      }\r\n      return [];\r\n    } else if (hSquared > 0.0) {\r\n      var h = Math.sqrt(hSquared);\r\n\r\n      var m = (p + hSquared - q / h) / 2.0;\r\n      var n = (p + hSquared + q / h) / 2.0;\r\n\r\n      // Now solve the two quadratic factors:  (y^2 + h y + m)(y^2 - h y + n);\r\n      var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, h, m);\r\n      var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, -h, n);\r\n\r\n      if (roots1.length !== 0) {\r\n        roots1[0] += temp;\r\n        roots1[1] += temp;\r\n\r\n        if (roots2.length !== 0) {\r\n          roots2[0] += temp;\r\n          roots2[1] += temp;\r\n\r\n          if (roots1[1] <= roots2[0]) {\r\n            return [roots1[0], roots1[1], roots2[0], roots2[1]];\r\n          } else if (roots2[1] <= roots1[0]) {\r\n            return [roots2[0], roots2[1], roots1[0], roots1[1]];\r\n          } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\r\n            return [roots2[0], roots1[0], roots1[1], roots2[1]];\r\n          } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\r\n            return [roots1[0], roots2[0], roots2[1], roots1[1]];\r\n          } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\r\n            return [roots2[0], roots1[0], roots2[1], roots1[1]];\r\n          }\r\n          return [roots1[0], roots2[0], roots1[1], roots2[1]];\r\n        }\r\n        return roots1;\r\n      }\r\n\r\n      if (roots2.length !== 0) {\r\n        roots2[0] += temp;\r\n        roots2[1] += temp;\r\n\r\n        return roots2;\r\n      }\r\n      return [];\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\nfunction neumark(a3, a2, a1, a0) {\r\n  var a1Squared = a1 * a1;\r\n  var a2Squared = a2 * a2;\r\n  var a3Squared = a3 * a3;\r\n\r\n  var p = -2.0 * a2;\r\n  var q = a1 * a3 + a2Squared - 4.0 * a0;\r\n  var r = a3Squared * a0 - a1 * a2 * a3 + a1Squared;\r\n\r\n  var cubicRoots = CubicRealPolynomial.computeRealRoots(1.0, p, q, r);\r\n\r\n  if (cubicRoots.length > 0) {\r\n    // Use the most positive root\r\n    var y = cubicRoots[0];\r\n\r\n    var temp = a2 - y;\r\n    var tempSquared = temp * temp;\r\n\r\n    var g1 = a3 / 2.0;\r\n    var h1 = temp / 2.0;\r\n\r\n    var m = tempSquared - 4.0 * a0;\r\n    var mError = tempSquared + 4.0 * Math.abs(a0);\r\n\r\n    var n = a3Squared - 4.0 * y;\r\n    var nError = a3Squared + 4.0 * Math.abs(y);\r\n\r\n    var g2;\r\n    var h2;\r\n\r\n    if (y < 0.0 || m * nError < n * mError) {\r\n      var squareRootOfN = Math.sqrt(n);\r\n      g2 = squareRootOfN / 2.0;\r\n      h2 = squareRootOfN === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfN;\r\n    } else {\r\n      var squareRootOfM = Math.sqrt(m);\r\n      g2 = squareRootOfM === 0.0 ? 0.0 : (a3 * h1 - a1) / squareRootOfM;\r\n      h2 = squareRootOfM / 2.0;\r\n    }\r\n\r\n    var G;\r\n    var g;\r\n    if (g1 === 0.0 && g2 === 0.0) {\r\n      G = 0.0;\r\n      g = 0.0;\r\n    } else if (CesiumMath.sign(g1) === CesiumMath.sign(g2)) {\r\n      G = g1 + g2;\r\n      g = y / G;\r\n    } else {\r\n      g = g1 - g2;\r\n      G = y / g;\r\n    }\r\n\r\n    var H;\r\n    var h;\r\n    if (h1 === 0.0 && h2 === 0.0) {\r\n      H = 0.0;\r\n      h = 0.0;\r\n    } else if (CesiumMath.sign(h1) === CesiumMath.sign(h2)) {\r\n      H = h1 + h2;\r\n      h = a0 / H;\r\n    } else {\r\n      h = h1 - h2;\r\n      H = a0 / h;\r\n    }\r\n\r\n    // Now solve the two quadratic factors:  (y^2 + G y + H)(y^2 + g y + h);\r\n    var roots1 = QuadraticRealPolynomial.computeRealRoots(1.0, G, H);\r\n    var roots2 = QuadraticRealPolynomial.computeRealRoots(1.0, g, h);\r\n\r\n    if (roots1.length !== 0) {\r\n      if (roots2.length !== 0) {\r\n        if (roots1[1] <= roots2[0]) {\r\n          return [roots1[0], roots1[1], roots2[0], roots2[1]];\r\n        } else if (roots2[1] <= roots1[0]) {\r\n          return [roots2[0], roots2[1], roots1[0], roots1[1]];\r\n        } else if (roots1[0] >= roots2[0] && roots1[1] <= roots2[1]) {\r\n          return [roots2[0], roots1[0], roots1[1], roots2[1]];\r\n        } else if (roots2[0] >= roots1[0] && roots2[1] <= roots1[1]) {\r\n          return [roots1[0], roots2[0], roots2[1], roots1[1]];\r\n        } else if (roots1[0] > roots2[0] && roots1[0] < roots2[1]) {\r\n          return [roots2[0], roots1[0], roots2[1], roots1[1]];\r\n        }\r\n        return [roots1[0], roots2[0], roots1[1], roots2[1]];\r\n      }\r\n      return roots1;\r\n    }\r\n    if (roots2.length !== 0) {\r\n      return roots2;\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * Provides the real valued roots of the quartic polynomial with the provided coefficients.\r\n *\r\n * @param {Number} a The coefficient of the 4th order monomial.\r\n * @param {Number} b The coefficient of the 3rd order monomial.\r\n * @param {Number} c The coefficient of the 2nd order monomial.\r\n * @param {Number} d The coefficient of the 1st order monomial.\r\n * @param {Number} e The coefficient of the 0th order monomial.\r\n * @returns {Number[]} The real valued roots.\r\n */\r\nQuarticRealPolynomial.computeRealRoots = function (a, b, c, d, e) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (typeof a !== \"number\") {\r\n    throw new DeveloperError(\"a is a required number.\");\r\n  }\r\n  if (typeof b !== \"number\") {\r\n    throw new DeveloperError(\"b is a required number.\");\r\n  }\r\n  if (typeof c !== \"number\") {\r\n    throw new DeveloperError(\"c is a required number.\");\r\n  }\r\n  if (typeof d !== \"number\") {\r\n    throw new DeveloperError(\"d is a required number.\");\r\n  }\r\n  if (typeof e !== \"number\") {\r\n    throw new DeveloperError(\"e is a required number.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (Math.abs(a) < CesiumMath.EPSILON15) {\r\n    return CubicRealPolynomial.computeRealRoots(b, c, d, e);\r\n  }\r\n  var a3 = b / a;\r\n  var a2 = c / a;\r\n  var a1 = d / a;\r\n  var a0 = e / a;\r\n\r\n  var k = a3 < 0.0 ? 1 : 0;\r\n  k += a2 < 0.0 ? k + 1 : k;\r\n  k += a1 < 0.0 ? k + 1 : k;\r\n  k += a0 < 0.0 ? k + 1 : k;\r\n\r\n  switch (k) {\r\n    case 0:\r\n      return original(a3, a2, a1, a0);\r\n    case 1:\r\n      return neumark(a3, a2, a1, a0);\r\n    case 2:\r\n      return neumark(a3, a2, a1, a0);\r\n    case 3:\r\n      return original(a3, a2, a1, a0);\r\n    case 4:\r\n      return original(a3, a2, a1, a0);\r\n    case 5:\r\n      return neumark(a3, a2, a1, a0);\r\n    case 6:\r\n      return original(a3, a2, a1, a0);\r\n    case 7:\r\n      return original(a3, a2, a1, a0);\r\n    case 8:\r\n      return neumark(a3, a2, a1, a0);\r\n    case 9:\r\n      return original(a3, a2, a1, a0);\r\n    case 10:\r\n      return original(a3, a2, a1, a0);\r\n    case 11:\r\n      return neumark(a3, a2, a1, a0);\r\n    case 12:\r\n      return original(a3, a2, a1, a0);\r\n    case 13:\r\n      return original(a3, a2, a1, a0);\r\n    case 14:\r\n      return original(a3, a2, a1, a0);\r\n    case 15:\r\n      return original(a3, a2, a1, a0);\r\n    default:\r\n      return undefined;\r\n  }\r\n};\r\nexport default QuarticRealPolynomial;\r\n","import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\n\r\n/**\r\n * Represents a ray that extends infinitely from the provided origin in the provided direction.\r\n * @alias Ray\r\n * @constructor\r\n *\r\n * @param {Cartesian3} [origin=Cartesian3.ZERO] The origin of the ray.\r\n * @param {Cartesian3} [direction=Cartesian3.ZERO] The direction of the ray.\r\n */\r\nfunction Ray(origin, direction) {\r\n  direction = Cartesian3.clone(defaultValue(direction, Cartesian3.ZERO));\r\n  if (!Cartesian3.equals(direction, Cartesian3.ZERO)) {\r\n    Cartesian3.normalize(direction, direction);\r\n  }\r\n\r\n  /**\r\n   * The origin of the ray.\r\n   * @type {Cartesian3}\r\n   * @default {@link Cartesian3.ZERO}\r\n   */\r\n  this.origin = Cartesian3.clone(defaultValue(origin, Cartesian3.ZERO));\r\n\r\n  /**\r\n   * The direction of the ray.\r\n   * @type {Cartesian3}\r\n   */\r\n  this.direction = direction;\r\n}\r\n\r\n/**\r\n * Duplicates a Ray instance.\r\n *\r\n * @param {Ray} ray The ray to duplicate.\r\n * @param {Ray} [result] The object onto which to store the result.\r\n * @returns {Ray} The modified result parameter or a new Ray instance if one was not provided. (Returns undefined if ray is undefined)\r\n */\r\nRay.clone = function (ray, result) {\r\n  if (!defined(ray)) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    return new Ray(ray.origin, ray.direction);\r\n  }\r\n  result.origin = Cartesian3.clone(ray.origin);\r\n  result.direction = Cartesian3.clone(ray.direction);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the point along the ray given by r(t) = o + t*d,\r\n * where o is the origin of the ray and d is the direction.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Number} t A scalar value.\r\n * @param {Cartesian3} [result] The object in which the result will be stored.\r\n * @returns {Cartesian3} The modified result parameter, or a new instance if none was provided.\r\n *\r\n * @example\r\n * //Get the first intersection point of a ray and an ellipsoid.\r\n * var intersection = Cesium.IntersectionTests.rayEllipsoid(ray, ellipsoid);\r\n * var point = Cesium.Ray.getPoint(ray, intersection.start);\r\n */\r\nRay.getPoint = function (ray, t, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"ray\", ray);\r\n  Check.typeOf.number(\"t\", t);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  result = Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n  return Cartesian3.add(ray.origin, result, result);\r\n};\r\nexport default Ray;\r\n","import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Interval from \"./Interval.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport QuadraticRealPolynomial from \"./QuadraticRealPolynomial.js\";\r\nimport QuarticRealPolynomial from \"./QuarticRealPolynomial.js\";\r\nimport Ray from \"./Ray.js\";\r\n\r\n/**\r\n * Functions for computing the intersection between geometries such as rays, planes, triangles, and ellipsoids.\r\n *\r\n * @namespace IntersectionTests\r\n */\r\nvar IntersectionTests = {};\r\n\r\n/**\r\n * Computes the intersection of a ray and a plane.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Plane} plane The plane.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n */\r\nIntersectionTests.rayPlane = function (ray, plane, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(ray)) {\r\n    throw new DeveloperError(\"ray is required.\");\r\n  }\r\n  if (!defined(plane)) {\r\n    throw new DeveloperError(\"plane is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  var origin = ray.origin;\r\n  var direction = ray.direction;\r\n  var normal = plane.normal;\r\n  var denominator = Cartesian3.dot(normal, direction);\r\n\r\n  if (Math.abs(denominator) < CesiumMath.EPSILON15) {\r\n    // Ray is parallel to plane.  The ray may be in the polygon's plane.\r\n    return undefined;\r\n  }\r\n\r\n  var t = (-plane.distance - Cartesian3.dot(normal, origin)) / denominator;\r\n\r\n  if (t < 0) {\r\n    return undefined;\r\n  }\r\n\r\n  result = Cartesian3.multiplyByScalar(direction, t, result);\r\n  return Cartesian3.add(origin, result, result);\r\n};\r\n\r\nvar scratchEdge0 = new Cartesian3();\r\nvar scratchEdge1 = new Cartesian3();\r\nvar scratchPVec = new Cartesian3();\r\nvar scratchTVec = new Cartesian3();\r\nvar scratchQVec = new Cartesian3();\r\n\r\n/**\r\n * Computes the intersection of a ray and a triangle as a parametric distance along the input ray. The result is negative when the triangle is behind the ray.\r\n *\r\n * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\r\n * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\r\n *\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Cartesian3} p0 The first vertex of the triangle.\r\n * @param {Cartesian3} p1 The second vertex of the triangle.\r\n * @param {Cartesian3} p2 The third vertex of the triangle.\r\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n *                  and return undefined for intersections with the back face.\r\n * @returns {Number} The intersection as a parametric distance along the ray, or undefined if there is no intersection.\r\n */\r\nIntersectionTests.rayTriangleParametric = function (\r\n  ray,\r\n  p0,\r\n  p1,\r\n  p2,\r\n  cullBackFaces\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(ray)) {\r\n    throw new DeveloperError(\"ray is required.\");\r\n  }\r\n  if (!defined(p0)) {\r\n    throw new DeveloperError(\"p0 is required.\");\r\n  }\r\n  if (!defined(p1)) {\r\n    throw new DeveloperError(\"p1 is required.\");\r\n  }\r\n  if (!defined(p2)) {\r\n    throw new DeveloperError(\"p2 is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  cullBackFaces = defaultValue(cullBackFaces, false);\r\n\r\n  var origin = ray.origin;\r\n  var direction = ray.direction;\r\n\r\n  var edge0 = Cartesian3.subtract(p1, p0, scratchEdge0);\r\n  var edge1 = Cartesian3.subtract(p2, p0, scratchEdge1);\r\n\r\n  var p = Cartesian3.cross(direction, edge1, scratchPVec);\r\n  var det = Cartesian3.dot(edge0, p);\r\n\r\n  var tvec;\r\n  var q;\r\n\r\n  var u;\r\n  var v;\r\n  var t;\r\n\r\n  if (cullBackFaces) {\r\n    if (det < CesiumMath.EPSILON6) {\r\n      return undefined;\r\n    }\r\n\r\n    tvec = Cartesian3.subtract(origin, p0, scratchTVec);\r\n    u = Cartesian3.dot(tvec, p);\r\n    if (u < 0.0 || u > det) {\r\n      return undefined;\r\n    }\r\n\r\n    q = Cartesian3.cross(tvec, edge0, scratchQVec);\r\n\r\n    v = Cartesian3.dot(direction, q);\r\n    if (v < 0.0 || u + v > det) {\r\n      return undefined;\r\n    }\r\n\r\n    t = Cartesian3.dot(edge1, q) / det;\r\n  } else {\r\n    if (Math.abs(det) < CesiumMath.EPSILON6) {\r\n      return undefined;\r\n    }\r\n    var invDet = 1.0 / det;\r\n\r\n    tvec = Cartesian3.subtract(origin, p0, scratchTVec);\r\n    u = Cartesian3.dot(tvec, p) * invDet;\r\n    if (u < 0.0 || u > 1.0) {\r\n      return undefined;\r\n    }\r\n\r\n    q = Cartesian3.cross(tvec, edge0, scratchQVec);\r\n\r\n    v = Cartesian3.dot(direction, q) * invDet;\r\n    if (v < 0.0 || u + v > 1.0) {\r\n      return undefined;\r\n    }\r\n\r\n    t = Cartesian3.dot(edge1, q) * invDet;\r\n  }\r\n\r\n  return t;\r\n};\r\n\r\n/**\r\n * Computes the intersection of a ray and a triangle as a Cartesian3 coordinate.\r\n *\r\n * Implements {@link https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf|\r\n * Fast Minimum Storage Ray/Triangle Intersection} by Tomas Moller and Ben Trumbore.\r\n *\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Cartesian3} p0 The first vertex of the triangle.\r\n * @param {Cartesian3} p1 The second vertex of the triangle.\r\n * @param {Cartesian3} p2 The third vertex of the triangle.\r\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n *                  and return undefined for intersections with the back face.\r\n * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n */\r\nIntersectionTests.rayTriangle = function (\r\n  ray,\r\n  p0,\r\n  p1,\r\n  p2,\r\n  cullBackFaces,\r\n  result\r\n) {\r\n  var t = IntersectionTests.rayTriangleParametric(\r\n    ray,\r\n    p0,\r\n    p1,\r\n    p2,\r\n    cullBackFaces\r\n  );\r\n  if (!defined(t) || t < 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n  return Cartesian3.add(ray.origin, result, result);\r\n};\r\n\r\nvar scratchLineSegmentTriangleRay = new Ray();\r\n\r\n/**\r\n * Computes the intersection of a line segment and a triangle.\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Cartesian3} v0 The an end point of the line segment.\r\n * @param {Cartesian3} v1 The other end point of the line segment.\r\n * @param {Cartesian3} p0 The first vertex of the triangle.\r\n * @param {Cartesian3} p1 The second vertex of the triangle.\r\n * @param {Cartesian3} p2 The third vertex of the triangle.\r\n * @param {Boolean} [cullBackFaces=false] If <code>true</code>, will only compute an intersection with the front face of the triangle\r\n *                  and return undefined for intersections with the back face.\r\n * @param {Cartesian3} [result] The <code>Cartesian3</code> onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersections.\r\n */\r\nIntersectionTests.lineSegmentTriangle = function (\r\n  v0,\r\n  v1,\r\n  p0,\r\n  p1,\r\n  p2,\r\n  cullBackFaces,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(v0)) {\r\n    throw new DeveloperError(\"v0 is required.\");\r\n  }\r\n  if (!defined(v1)) {\r\n    throw new DeveloperError(\"v1 is required.\");\r\n  }\r\n  if (!defined(p0)) {\r\n    throw new DeveloperError(\"p0 is required.\");\r\n  }\r\n  if (!defined(p1)) {\r\n    throw new DeveloperError(\"p1 is required.\");\r\n  }\r\n  if (!defined(p2)) {\r\n    throw new DeveloperError(\"p2 is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var ray = scratchLineSegmentTriangleRay;\r\n  Cartesian3.clone(v0, ray.origin);\r\n  Cartesian3.subtract(v1, v0, ray.direction);\r\n  Cartesian3.normalize(ray.direction, ray.direction);\r\n\r\n  var t = IntersectionTests.rayTriangleParametric(\r\n    ray,\r\n    p0,\r\n    p1,\r\n    p2,\r\n    cullBackFaces\r\n  );\r\n  if (!defined(t) || t < 0.0 || t > Cartesian3.distance(v0, v1)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  Cartesian3.multiplyByScalar(ray.direction, t, result);\r\n  return Cartesian3.add(ray.origin, result, result);\r\n};\r\n\r\nfunction solveQuadratic(a, b, c, result) {\r\n  var det = b * b - 4.0 * a * c;\r\n  if (det < 0.0) {\r\n    return undefined;\r\n  } else if (det > 0.0) {\r\n    var denom = 1.0 / (2.0 * a);\r\n    var disc = Math.sqrt(det);\r\n    var root0 = (-b + disc) * denom;\r\n    var root1 = (-b - disc) * denom;\r\n\r\n    if (root0 < root1) {\r\n      result.root0 = root0;\r\n      result.root1 = root1;\r\n    } else {\r\n      result.root0 = root1;\r\n      result.root1 = root0;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  var root = -b / (2.0 * a);\r\n  if (root === 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  result.root0 = result.root1 = root;\r\n  return result;\r\n}\r\n\r\nvar raySphereRoots = {\r\n  root0: 0.0,\r\n  root1: 0.0,\r\n};\r\n\r\nfunction raySphere(ray, sphere, result) {\r\n  if (!defined(result)) {\r\n    result = new Interval();\r\n  }\r\n\r\n  var origin = ray.origin;\r\n  var direction = ray.direction;\r\n\r\n  var center = sphere.center;\r\n  var radiusSquared = sphere.radius * sphere.radius;\r\n\r\n  var diff = Cartesian3.subtract(origin, center, scratchPVec);\r\n\r\n  var a = Cartesian3.dot(direction, direction);\r\n  var b = 2.0 * Cartesian3.dot(direction, diff);\r\n  var c = Cartesian3.magnitudeSquared(diff) - radiusSquared;\r\n\r\n  var roots = solveQuadratic(a, b, c, raySphereRoots);\r\n  if (!defined(roots)) {\r\n    return undefined;\r\n  }\r\n\r\n  result.start = roots.root0;\r\n  result.stop = roots.root1;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Computes the intersection points of a ray with a sphere.\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {BoundingSphere} sphere The sphere.\r\n * @param {Interval} [result] The result onto which to store the result.\r\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n */\r\nIntersectionTests.raySphere = function (ray, sphere, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(ray)) {\r\n    throw new DeveloperError(\"ray is required.\");\r\n  }\r\n  if (!defined(sphere)) {\r\n    throw new DeveloperError(\"sphere is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  result = raySphere(ray, sphere, result);\r\n  if (!defined(result) || result.stop < 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  result.start = Math.max(result.start, 0.0);\r\n  return result;\r\n};\r\n\r\nvar scratchLineSegmentRay = new Ray();\r\n\r\n/**\r\n * Computes the intersection points of a line segment with a sphere.\r\n * @memberof IntersectionTests\r\n *\r\n * @param {Cartesian3} p0 An end point of the line segment.\r\n * @param {Cartesian3} p1 The other end point of the line segment.\r\n * @param {BoundingSphere} sphere The sphere.\r\n * @param {Interval} [result] The result onto which to store the result.\r\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n */\r\nIntersectionTests.lineSegmentSphere = function (p0, p1, sphere, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(p0)) {\r\n    throw new DeveloperError(\"p0 is required.\");\r\n  }\r\n  if (!defined(p1)) {\r\n    throw new DeveloperError(\"p1 is required.\");\r\n  }\r\n  if (!defined(sphere)) {\r\n    throw new DeveloperError(\"sphere is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var ray = scratchLineSegmentRay;\r\n  Cartesian3.clone(p0, ray.origin);\r\n  var direction = Cartesian3.subtract(p1, p0, ray.direction);\r\n\r\n  var maxT = Cartesian3.magnitude(direction);\r\n  Cartesian3.normalize(direction, direction);\r\n\r\n  result = raySphere(ray, sphere, result);\r\n  if (!defined(result) || result.stop < 0.0 || result.start > maxT) {\r\n    return undefined;\r\n  }\r\n\r\n  result.start = Math.max(result.start, 0.0);\r\n  result.stop = Math.min(result.stop, maxT);\r\n  return result;\r\n};\r\n\r\nvar scratchQ = new Cartesian3();\r\nvar scratchW = new Cartesian3();\r\n\r\n/**\r\n * Computes the intersection points of a ray with an ellipsoid.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n * @returns {Interval} The interval containing scalar points along the ray or undefined if there are no intersections.\r\n */\r\nIntersectionTests.rayEllipsoid = function (ray, ellipsoid) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(ray)) {\r\n    throw new DeveloperError(\"ray is required.\");\r\n  }\r\n  if (!defined(ellipsoid)) {\r\n    throw new DeveloperError(\"ellipsoid is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var inverseRadii = ellipsoid.oneOverRadii;\r\n  var q = Cartesian3.multiplyComponents(inverseRadii, ray.origin, scratchQ);\r\n  var w = Cartesian3.multiplyComponents(inverseRadii, ray.direction, scratchW);\r\n\r\n  var q2 = Cartesian3.magnitudeSquared(q);\r\n  var qw = Cartesian3.dot(q, w);\r\n\r\n  var difference, w2, product, discriminant, temp;\r\n\r\n  if (q2 > 1.0) {\r\n    // Outside ellipsoid.\r\n    if (qw >= 0.0) {\r\n      // Looking outward or tangent (0 intersections).\r\n      return undefined;\r\n    }\r\n\r\n    // qw < 0.0.\r\n    var qw2 = qw * qw;\r\n    difference = q2 - 1.0; // Positively valued.\r\n    w2 = Cartesian3.magnitudeSquared(w);\r\n    product = w2 * difference;\r\n\r\n    if (qw2 < product) {\r\n      // Imaginary roots (0 intersections).\r\n      return undefined;\r\n    } else if (qw2 > product) {\r\n      // Distinct roots (2 intersections).\r\n      discriminant = qw * qw - product;\r\n      temp = -qw + Math.sqrt(discriminant); // Avoid cancellation.\r\n      var root0 = temp / w2;\r\n      var root1 = difference / temp;\r\n      if (root0 < root1) {\r\n        return new Interval(root0, root1);\r\n      }\r\n\r\n      return {\r\n        start: root1,\r\n        stop: root0,\r\n      };\r\n    }\r\n    // qw2 == product.  Repeated roots (2 intersections).\r\n    var root = Math.sqrt(difference / w2);\r\n    return new Interval(root, root);\r\n  } else if (q2 < 1.0) {\r\n    // Inside ellipsoid (2 intersections).\r\n    difference = q2 - 1.0; // Negatively valued.\r\n    w2 = Cartesian3.magnitudeSquared(w);\r\n    product = w2 * difference; // Negatively valued.\r\n\r\n    discriminant = qw * qw - product;\r\n    temp = -qw + Math.sqrt(discriminant); // Positively valued.\r\n    return new Interval(0.0, temp / w2);\r\n  }\r\n  // q2 == 1.0. On ellipsoid.\r\n  if (qw < 0.0) {\r\n    // Looking inward.\r\n    w2 = Cartesian3.magnitudeSquared(w);\r\n    return new Interval(0.0, -qw / w2);\r\n  }\r\n\r\n  // qw >= 0.0.  Looking outward or tangent.\r\n  return undefined;\r\n};\r\n\r\nfunction addWithCancellationCheck(left, right, tolerance) {\r\n  var difference = left + right;\r\n  if (\r\n    CesiumMath.sign(left) !== CesiumMath.sign(right) &&\r\n    Math.abs(difference / Math.max(Math.abs(left), Math.abs(right))) < tolerance\r\n  ) {\r\n    return 0.0;\r\n  }\r\n\r\n  return difference;\r\n}\r\n\r\nfunction quadraticVectorExpression(A, b, c, x, w) {\r\n  var xSquared = x * x;\r\n  var wSquared = w * w;\r\n\r\n  var l2 = (A[Matrix3.COLUMN1ROW1] - A[Matrix3.COLUMN2ROW2]) * wSquared;\r\n  var l1 =\r\n    w *\r\n    (x *\r\n      addWithCancellationCheck(\r\n        A[Matrix3.COLUMN1ROW0],\r\n        A[Matrix3.COLUMN0ROW1],\r\n        CesiumMath.EPSILON15\r\n      ) +\r\n      b.y);\r\n  var l0 =\r\n    A[Matrix3.COLUMN0ROW0] * xSquared +\r\n    A[Matrix3.COLUMN2ROW2] * wSquared +\r\n    x * b.x +\r\n    c;\r\n\r\n  var r1 =\r\n    wSquared *\r\n    addWithCancellationCheck(\r\n      A[Matrix3.COLUMN2ROW1],\r\n      A[Matrix3.COLUMN1ROW2],\r\n      CesiumMath.EPSILON15\r\n    );\r\n  var r0 =\r\n    w *\r\n    (x *\r\n      addWithCancellationCheck(A[Matrix3.COLUMN2ROW0], A[Matrix3.COLUMN0ROW2]) +\r\n      b.z);\r\n\r\n  var cosines;\r\n  var solutions = [];\r\n  if (r0 === 0.0 && r1 === 0.0) {\r\n    cosines = QuadraticRealPolynomial.computeRealRoots(l2, l1, l0);\r\n    if (cosines.length === 0) {\r\n      return solutions;\r\n    }\r\n\r\n    var cosine0 = cosines[0];\r\n    var sine0 = Math.sqrt(Math.max(1.0 - cosine0 * cosine0, 0.0));\r\n    solutions.push(new Cartesian3(x, w * cosine0, w * -sine0));\r\n    solutions.push(new Cartesian3(x, w * cosine0, w * sine0));\r\n\r\n    if (cosines.length === 2) {\r\n      var cosine1 = cosines[1];\r\n      var sine1 = Math.sqrt(Math.max(1.0 - cosine1 * cosine1, 0.0));\r\n      solutions.push(new Cartesian3(x, w * cosine1, w * -sine1));\r\n      solutions.push(new Cartesian3(x, w * cosine1, w * sine1));\r\n    }\r\n\r\n    return solutions;\r\n  }\r\n\r\n  var r0Squared = r0 * r0;\r\n  var r1Squared = r1 * r1;\r\n  var l2Squared = l2 * l2;\r\n  var r0r1 = r0 * r1;\r\n\r\n  var c4 = l2Squared + r1Squared;\r\n  var c3 = 2.0 * (l1 * l2 + r0r1);\r\n  var c2 = 2.0 * l0 * l2 + l1 * l1 - r1Squared + r0Squared;\r\n  var c1 = 2.0 * (l0 * l1 - r0r1);\r\n  var c0 = l0 * l0 - r0Squared;\r\n\r\n  if (c4 === 0.0 && c3 === 0.0 && c2 === 0.0 && c1 === 0.0) {\r\n    return solutions;\r\n  }\r\n\r\n  cosines = QuarticRealPolynomial.computeRealRoots(c4, c3, c2, c1, c0);\r\n  var length = cosines.length;\r\n  if (length === 0) {\r\n    return solutions;\r\n  }\r\n\r\n  for (var i = 0; i < length; ++i) {\r\n    var cosine = cosines[i];\r\n    var cosineSquared = cosine * cosine;\r\n    var sineSquared = Math.max(1.0 - cosineSquared, 0.0);\r\n    var sine = Math.sqrt(sineSquared);\r\n\r\n    //var left = l2 * cosineSquared + l1 * cosine + l0;\r\n    var left;\r\n    if (CesiumMath.sign(l2) === CesiumMath.sign(l0)) {\r\n      left = addWithCancellationCheck(\r\n        l2 * cosineSquared + l0,\r\n        l1 * cosine,\r\n        CesiumMath.EPSILON12\r\n      );\r\n    } else if (CesiumMath.sign(l0) === CesiumMath.sign(l1 * cosine)) {\r\n      left = addWithCancellationCheck(\r\n        l2 * cosineSquared,\r\n        l1 * cosine + l0,\r\n        CesiumMath.EPSILON12\r\n      );\r\n    } else {\r\n      left = addWithCancellationCheck(\r\n        l2 * cosineSquared + l1 * cosine,\r\n        l0,\r\n        CesiumMath.EPSILON12\r\n      );\r\n    }\r\n\r\n    var right = addWithCancellationCheck(r1 * cosine, r0, CesiumMath.EPSILON15);\r\n    var product = left * right;\r\n\r\n    if (product < 0.0) {\r\n      solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n    } else if (product > 0.0) {\r\n      solutions.push(new Cartesian3(x, w * cosine, w * -sine));\r\n    } else if (sine !== 0.0) {\r\n      solutions.push(new Cartesian3(x, w * cosine, w * -sine));\r\n      solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n      ++i;\r\n    } else {\r\n      solutions.push(new Cartesian3(x, w * cosine, w * sine));\r\n    }\r\n  }\r\n\r\n  return solutions;\r\n}\r\n\r\nvar firstAxisScratch = new Cartesian3();\r\nvar secondAxisScratch = new Cartesian3();\r\nvar thirdAxisScratch = new Cartesian3();\r\nvar referenceScratch = new Cartesian3();\r\nvar bCart = new Cartesian3();\r\nvar bScratch = new Matrix3();\r\nvar btScratch = new Matrix3();\r\nvar diScratch = new Matrix3();\r\nvar dScratch = new Matrix3();\r\nvar cScratch = new Matrix3();\r\nvar tempMatrix = new Matrix3();\r\nvar aScratch = new Matrix3();\r\nvar sScratch = new Cartesian3();\r\nvar closestScratch = new Cartesian3();\r\nvar surfPointScratch = new Cartographic();\r\n\r\n/**\r\n * Provides the point along the ray which is nearest to the ellipsoid.\r\n *\r\n * @param {Ray} ray The ray.\r\n * @param {Ellipsoid} ellipsoid The ellipsoid.\r\n * @returns {Cartesian3} The nearest planetodetic point on the ray.\r\n */\r\nIntersectionTests.grazingAltitudeLocation = function (ray, ellipsoid) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(ray)) {\r\n    throw new DeveloperError(\"ray is required.\");\r\n  }\r\n  if (!defined(ellipsoid)) {\r\n    throw new DeveloperError(\"ellipsoid is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var position = ray.origin;\r\n  var direction = ray.direction;\r\n\r\n  if (!Cartesian3.equals(position, Cartesian3.ZERO)) {\r\n    var normal = ellipsoid.geodeticSurfaceNormal(position, firstAxisScratch);\r\n    if (Cartesian3.dot(direction, normal) >= 0.0) {\r\n      // The location provided is the closest point in altitude\r\n      return position;\r\n    }\r\n  }\r\n\r\n  var intersects = defined(this.rayEllipsoid(ray, ellipsoid));\r\n\r\n  // Compute the scaled direction vector.\r\n  var f = ellipsoid.transformPositionToScaledSpace(direction, firstAxisScratch);\r\n\r\n  // Constructs a basis from the unit scaled direction vector. Construct its rotation and transpose.\r\n  var firstAxis = Cartesian3.normalize(f, f);\r\n  var reference = Cartesian3.mostOrthogonalAxis(f, referenceScratch);\r\n  var secondAxis = Cartesian3.normalize(\r\n    Cartesian3.cross(reference, firstAxis, secondAxisScratch),\r\n    secondAxisScratch\r\n  );\r\n  var thirdAxis = Cartesian3.normalize(\r\n    Cartesian3.cross(firstAxis, secondAxis, thirdAxisScratch),\r\n    thirdAxisScratch\r\n  );\r\n  var B = bScratch;\r\n  B[0] = firstAxis.x;\r\n  B[1] = firstAxis.y;\r\n  B[2] = firstAxis.z;\r\n  B[3] = secondAxis.x;\r\n  B[4] = secondAxis.y;\r\n  B[5] = secondAxis.z;\r\n  B[6] = thirdAxis.x;\r\n  B[7] = thirdAxis.y;\r\n  B[8] = thirdAxis.z;\r\n\r\n  var B_T = Matrix3.transpose(B, btScratch);\r\n\r\n  // Get the scaling matrix and its inverse.\r\n  var D_I = Matrix3.fromScale(ellipsoid.radii, diScratch);\r\n  var D = Matrix3.fromScale(ellipsoid.oneOverRadii, dScratch);\r\n\r\n  var C = cScratch;\r\n  C[0] = 0.0;\r\n  C[1] = -direction.z;\r\n  C[2] = direction.y;\r\n  C[3] = direction.z;\r\n  C[4] = 0.0;\r\n  C[5] = -direction.x;\r\n  C[6] = -direction.y;\r\n  C[7] = direction.x;\r\n  C[8] = 0.0;\r\n\r\n  var temp = Matrix3.multiply(\r\n    Matrix3.multiply(B_T, D, tempMatrix),\r\n    C,\r\n    tempMatrix\r\n  );\r\n  var A = Matrix3.multiply(Matrix3.multiply(temp, D_I, aScratch), B, aScratch);\r\n  var b = Matrix3.multiplyByVector(temp, position, bCart);\r\n\r\n  // Solve for the solutions to the expression in standard form:\r\n  var solutions = quadraticVectorExpression(\r\n    A,\r\n    Cartesian3.negate(b, firstAxisScratch),\r\n    0.0,\r\n    0.0,\r\n    1.0\r\n  );\r\n\r\n  var s;\r\n  var altitude;\r\n  var length = solutions.length;\r\n  if (length > 0) {\r\n    var closest = Cartesian3.clone(Cartesian3.ZERO, closestScratch);\r\n    var maximumValue = Number.NEGATIVE_INFINITY;\r\n\r\n    for (var i = 0; i < length; ++i) {\r\n      s = Matrix3.multiplyByVector(\r\n        D_I,\r\n        Matrix3.multiplyByVector(B, solutions[i], sScratch),\r\n        sScratch\r\n      );\r\n      var v = Cartesian3.normalize(\r\n        Cartesian3.subtract(s, position, referenceScratch),\r\n        referenceScratch\r\n      );\r\n      var dotProduct = Cartesian3.dot(v, direction);\r\n\r\n      if (dotProduct > maximumValue) {\r\n        maximumValue = dotProduct;\r\n        closest = Cartesian3.clone(s, closest);\r\n      }\r\n    }\r\n\r\n    var surfacePoint = ellipsoid.cartesianToCartographic(\r\n      closest,\r\n      surfPointScratch\r\n    );\r\n    maximumValue = CesiumMath.clamp(maximumValue, 0.0, 1.0);\r\n    altitude =\r\n      Cartesian3.magnitude(\r\n        Cartesian3.subtract(closest, position, referenceScratch)\r\n      ) * Math.sqrt(1.0 - maximumValue * maximumValue);\r\n    altitude = intersects ? -altitude : altitude;\r\n    surfacePoint.height = altitude;\r\n    return ellipsoid.cartographicToCartesian(surfacePoint, new Cartesian3());\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nvar lineSegmentPlaneDifference = new Cartesian3();\r\n\r\n/**\r\n * Computes the intersection of a line segment and a plane.\r\n *\r\n * @param {Cartesian3} endPoint0 An end point of the line segment.\r\n * @param {Cartesian3} endPoint1 The other end point of the line segment.\r\n * @param {Plane} plane The plane.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The intersection point or undefined if there is no intersection.\r\n *\r\n * @example\r\n * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\r\n * var normal = ellipsoid.geodeticSurfaceNormal(origin);\r\n * var plane = Cesium.Plane.fromPointNormal(origin, normal);\r\n *\r\n * var p0 = new Cesium.Cartesian3(...);\r\n * var p1 = new Cesium.Cartesian3(...);\r\n *\r\n * // find the intersection of the line segment from p0 to p1 and the tangent plane at origin.\r\n * var intersection = Cesium.IntersectionTests.lineSegmentPlane(p0, p1, plane);\r\n */\r\nIntersectionTests.lineSegmentPlane = function (\r\n  endPoint0,\r\n  endPoint1,\r\n  plane,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(endPoint0)) {\r\n    throw new DeveloperError(\"endPoint0 is required.\");\r\n  }\r\n  if (!defined(endPoint1)) {\r\n    throw new DeveloperError(\"endPoint1 is required.\");\r\n  }\r\n  if (!defined(plane)) {\r\n    throw new DeveloperError(\"plane is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  var difference = Cartesian3.subtract(\r\n    endPoint1,\r\n    endPoint0,\r\n    lineSegmentPlaneDifference\r\n  );\r\n  var normal = plane.normal;\r\n  var nDotDiff = Cartesian3.dot(normal, difference);\r\n\r\n  // check if the segment and plane are parallel\r\n  if (Math.abs(nDotDiff) < CesiumMath.EPSILON6) {\r\n    return undefined;\r\n  }\r\n\r\n  var nDotP0 = Cartesian3.dot(normal, endPoint0);\r\n  var t = -(plane.distance + nDotP0) / nDotDiff;\r\n\r\n  // intersection only if t is in [0, 1]\r\n  if (t < 0.0 || t > 1.0) {\r\n    return undefined;\r\n  }\r\n\r\n  // intersection is endPoint0 + t * (endPoint1 - endPoint0)\r\n  Cartesian3.multiplyByScalar(difference, t, result);\r\n  Cartesian3.add(endPoint0, result, result);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the intersection of a triangle and a plane\r\n *\r\n * @param {Cartesian3} p0 First point of the triangle\r\n * @param {Cartesian3} p1 Second point of the triangle\r\n * @param {Cartesian3} p2 Third point of the triangle\r\n * @param {Plane} plane Intersection plane\r\n * @returns {Object} An object with properties <code>positions</code> and <code>indices</code>, which are arrays that represent three triangles that do not cross the plane. (Undefined if no intersection exists)\r\n *\r\n * @example\r\n * var origin = Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883);\r\n * var normal = ellipsoid.geodeticSurfaceNormal(origin);\r\n * var plane = Cesium.Plane.fromPointNormal(origin, normal);\r\n *\r\n * var p0 = new Cesium.Cartesian3(...);\r\n * var p1 = new Cesium.Cartesian3(...);\r\n * var p2 = new Cesium.Cartesian3(...);\r\n *\r\n * // convert the triangle composed of points (p0, p1, p2) to three triangles that don't cross the plane\r\n * var triangles = Cesium.IntersectionTests.trianglePlaneIntersection(p0, p1, p2, plane);\r\n */\r\nIntersectionTests.trianglePlaneIntersection = function (p0, p1, p2, plane) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(p0) || !defined(p1) || !defined(p2) || !defined(plane)) {\r\n    throw new DeveloperError(\"p0, p1, p2, and plane are required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var planeNormal = plane.normal;\r\n  var planeD = plane.distance;\r\n  var p0Behind = Cartesian3.dot(planeNormal, p0) + planeD < 0.0;\r\n  var p1Behind = Cartesian3.dot(planeNormal, p1) + planeD < 0.0;\r\n  var p2Behind = Cartesian3.dot(planeNormal, p2) + planeD < 0.0;\r\n  // Given these dots products, the calls to lineSegmentPlaneIntersection\r\n  // always have defined results.\r\n\r\n  var numBehind = 0;\r\n  numBehind += p0Behind ? 1 : 0;\r\n  numBehind += p1Behind ? 1 : 0;\r\n  numBehind += p2Behind ? 1 : 0;\r\n\r\n  var u1, u2;\r\n  if (numBehind === 1 || numBehind === 2) {\r\n    u1 = new Cartesian3();\r\n    u2 = new Cartesian3();\r\n  }\r\n\r\n  if (numBehind === 1) {\r\n    if (p0Behind) {\r\n      IntersectionTests.lineSegmentPlane(p0, p1, plane, u1);\r\n      IntersectionTests.lineSegmentPlane(p0, p2, plane, u2);\r\n\r\n      return {\r\n        positions: [p0, p1, p2, u1, u2],\r\n        indices: [\r\n          // Behind\r\n          0,\r\n          3,\r\n          4,\r\n\r\n          // In front\r\n          1,\r\n          2,\r\n          4,\r\n          1,\r\n          4,\r\n          3,\r\n        ],\r\n      };\r\n    } else if (p1Behind) {\r\n      IntersectionTests.lineSegmentPlane(p1, p2, plane, u1);\r\n      IntersectionTests.lineSegmentPlane(p1, p0, plane, u2);\r\n\r\n      return {\r\n        positions: [p0, p1, p2, u1, u2],\r\n        indices: [\r\n          // Behind\r\n          1,\r\n          3,\r\n          4,\r\n\r\n          // In front\r\n          2,\r\n          0,\r\n          4,\r\n          2,\r\n          4,\r\n          3,\r\n        ],\r\n      };\r\n    } else if (p2Behind) {\r\n      IntersectionTests.lineSegmentPlane(p2, p0, plane, u1);\r\n      IntersectionTests.lineSegmentPlane(p2, p1, plane, u2);\r\n\r\n      return {\r\n        positions: [p0, p1, p2, u1, u2],\r\n        indices: [\r\n          // Behind\r\n          2,\r\n          3,\r\n          4,\r\n\r\n          // In front\r\n          0,\r\n          1,\r\n          4,\r\n          0,\r\n          4,\r\n          3,\r\n        ],\r\n      };\r\n    }\r\n  } else if (numBehind === 2) {\r\n    if (!p0Behind) {\r\n      IntersectionTests.lineSegmentPlane(p1, p0, plane, u1);\r\n      IntersectionTests.lineSegmentPlane(p2, p0, plane, u2);\r\n\r\n      return {\r\n        positions: [p0, p1, p2, u1, u2],\r\n        indices: [\r\n          // Behind\r\n          1,\r\n          2,\r\n          4,\r\n          1,\r\n          4,\r\n          3,\r\n\r\n          // In front\r\n          0,\r\n          3,\r\n          4,\r\n        ],\r\n      };\r\n    } else if (!p1Behind) {\r\n      IntersectionTests.lineSegmentPlane(p2, p1, plane, u1);\r\n      IntersectionTests.lineSegmentPlane(p0, p1, plane, u2);\r\n\r\n      return {\r\n        positions: [p0, p1, p2, u1, u2],\r\n        indices: [\r\n          // Behind\r\n          2,\r\n          0,\r\n          4,\r\n          2,\r\n          4,\r\n          3,\r\n\r\n          // In front\r\n          1,\r\n          3,\r\n          4,\r\n        ],\r\n      };\r\n    } else if (!p2Behind) {\r\n      IntersectionTests.lineSegmentPlane(p0, p2, plane, u1);\r\n      IntersectionTests.lineSegmentPlane(p1, p2, plane, u2);\r\n\r\n      return {\r\n        positions: [p0, p1, p2, u1, u2],\r\n        indices: [\r\n          // Behind\r\n          0,\r\n          1,\r\n          4,\r\n          0,\r\n          4,\r\n          3,\r\n\r\n          // In front\r\n          2,\r\n          3,\r\n          4,\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  // if numBehind is 3, the triangle is completely behind the plane;\r\n  // otherwise, it is completely in front (numBehind is 0).\r\n  return undefined;\r\n};\r\nexport default IntersectionTests;\r\n"],"names":["QuadraticRealPolynomial","addWithCancellationCheck","left","right","tolerance","difference","CesiumMath","sign","Math","abs","max","computeDiscriminant","a","b","c","DeveloperError","computeRealRoots","ratio","cMagnitude","aMagnitude","EPSILON14","root","sqrt","radicand","q","CubicRealPolynomial","d","temp","temp1","A","B","C","D","AC","BD","B2","C2","delta1","delta2","delta3","discriminant","ABar","CBar","DBar","temp0","x","p","pow","CBarA","DBarA","CBarD","DBarD","squareRootOfDiscriminant","halfSquareRootOf3","theta","atan2","cosine","cos","temp3","sin","numeratorLarge","denominatorLarge","root1","numeratorSmall","denominatorSmall","root3","F","root2","b2","c2","roots","Length","length","QuarticRealPolynomial","original","a3","a2","a1","a0","a3Squared","r","cubicRoots","hSquared","y","root0","y0","y1","h","m","n","roots1","roots2","neumark","g2","h2","G","g","H","tempSquared","g1","h1","mError","nError","squareRootOfN","squareRootOfM","Ray","origin","direction","Cartesian3","clone","defaultValue","ZERO","equals","normalize","this","e","b3","c3","d2","d3","e2","EPSILON15","k","ray","result","defined","getPoint","t","Check","typeOf","object","number","multiplyByScalar","add","IntersectionTests","plane","normal","denominator","dot","distance","scratchEdge0","scratchEdge1","scratchPVec","scratchTVec","scratchQVec","rayTriangleParametric","p0","p1","p2","cullBackFaces","tvec","u","v","edge0","subtract","edge1","cross","det","EPSILON6","invDet","rayTriangle","scratchLineSegmentTriangleRay","lineSegmentTriangle","v0","v1","raySphereRoots","raySphere","sphere","Interval","center","radiusSquared","radius","diff","denom","disc","solveQuadratic","magnitudeSquared","start","stop","scratchLineSegmentRay","lineSegmentSphere","maxT","magnitude","min","scratchQ","scratchW","rayEllipsoid","ellipsoid","w2","product","inverseRadii","oneOverRadii","multiplyComponents","w","q2","qw","qw2","firstAxisScratch","secondAxisScratch","thirdAxisScratch","referenceScratch","bCart","bScratch","Matrix3","btScratch","diScratch","dScratch","cScratch","tempMatrix","aScratch","sScratch","closestScratch","surfPointScratch","Cartographic","grazingAltitudeLocation","position","geodeticSurfaceNormal","intersects","f","transformPositionToScaledSpace","firstAxis","reference","mostOrthogonalAxis","secondAxis","thirdAxis","z","B_T","transpose","D_I","fromScale","radii","s","altitude","multiply","multiplyByVector","solutions","cosines","xSquared","wSquared","l2","COLUMN1ROW1","COLUMN2ROW2","l1","COLUMN1ROW0","COLUMN0ROW1","l0","COLUMN0ROW0","r1","COLUMN2ROW1","COLUMN1ROW2","r0","COLUMN2ROW0","COLUMN0ROW2","cosine0","sine0","push","cosine1","sine1","r0Squared","r1Squared","r0r1","c4","c1","c0","i","cosineSquared","sineSquared","sine","EPSILON12","quadraticVectorExpression","negate","closest","maximumValue","Number","NEGATIVE_INFINITY","dotProduct","surfacePoint","cartesianToCartographic","clamp","height","cartographicToCartesian","lineSegmentPlaneDifference","lineSegmentPlane","endPoint0","endPoint1","nDotDiff","nDotP0","trianglePlaneIntersection","u1","u2","planeNormal","planeD","p0Behind","p1Behind","p2Behind","numBehind","positions","indices"],"mappings":"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"}