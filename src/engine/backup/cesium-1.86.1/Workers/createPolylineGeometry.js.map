{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Color from \"./Color.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryType from \"./GeometryType.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nvar scratchInterpolateColorsArray = [];\r\n\r\nfunction interpolateColors(p0, p1, color0, color1, numPoints) {\r\n  var colors = scratchInterpolateColorsArray;\r\n  colors.length = numPoints;\r\n  var i;\r\n\r\n  var r0 = color0.red;\r\n  var g0 = color0.green;\r\n  var b0 = color0.blue;\r\n  var a0 = color0.alpha;\r\n\r\n  var r1 = color1.red;\r\n  var g1 = color1.green;\r\n  var b1 = color1.blue;\r\n  var a1 = color1.alpha;\r\n\r\n  if (Color.equals(color0, color1)) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      colors[i] = Color.clone(color0);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  var redPerVertex = (r1 - r0) / numPoints;\r\n  var greenPerVertex = (g1 - g0) / numPoints;\r\n  var bluePerVertex = (b1 - b0) / numPoints;\r\n  var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n  for (i = 0; i < numPoints; i++) {\r\n    colors[i] = new Color(\r\n      r0 + i * redPerVertex,\r\n      g0 + i * greenPerVertex,\r\n      b0 + i * bluePerVertex,\r\n      a0 + i * alphaPerVertex\r\n    );\r\n  }\r\n\r\n  return colors;\r\n}\r\n\r\n/**\r\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n * and each additional position defines a line segment from the previous position. The polyline is capable of\r\n * displaying with a material.\r\n *\r\n * @alias PolylineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n * @param {Number} [options.width=1.0] The width in pixels.\r\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n *\r\n * @exception {DeveloperError} At least two positions are required.\r\n * @exception {DeveloperError} width must be greater than or equal to one.\r\n * @exception {DeveloperError} colors has an invalid length.\r\n *\r\n * @see PolylineGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\r\n *\r\n * @example\r\n * // A polyline with two connected line segments\r\n * var polyline = new Cesium.PolylineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     0.0, 0.0,\r\n *     5.0, 0.0,\r\n *     5.0, 5.0\r\n *   ]),\r\n *   width : 10.0\r\n * });\r\n * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\r\n */\r\nfunction PolylineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var positions = options.positions;\r\n  var colors = options.colors;\r\n  var width = defaultValue(options.width, 1.0);\r\n  var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions) || positions.length < 2) {\r\n    throw new DeveloperError(\"At least two positions are required.\");\r\n  }\r\n  if (typeof width !== \"number\") {\r\n    throw new DeveloperError(\"width must be a number\");\r\n  }\r\n  if (\r\n    defined(colors) &&\r\n    ((colorsPerVertex && colors.length < positions.length) ||\r\n      (!colorsPerVertex && colors.length < positions.length - 1))\r\n  ) {\r\n    throw new DeveloperError(\"colors has an invalid length.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._positions = positions;\r\n  this._colors = colors;\r\n  this._width = width;\r\n  this._colorsPerVertex = colorsPerVertex;\r\n  this._vertexFormat = VertexFormat.clone(\r\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\r\n  );\r\n\r\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._workerName = \"createPolylineGeometry\";\r\n\r\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n  numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var i;\r\n\r\n  var positions = value._positions;\r\n  var length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  var colors = value._colors;\r\n  length = defined(colors) ? colors.length : 0.0;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n    Color.pack(colors[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._width;\r\n  array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._arcType;\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n  positions: undefined,\r\n  colors: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  width: undefined,\r\n  colorsPerVertex: undefined,\r\n  arcType: undefined,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\r\n */\r\nPolylineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var i;\r\n\r\n  var length = array[startingIndex++];\r\n  var positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n    colors[i] = Color.unpack(array, startingIndex);\r\n  }\r\n\r\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  var vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  var width = array[startingIndex++];\r\n  var colorsPerVertex = array[startingIndex++] === 1.0;\r\n  var arcType = array[startingIndex++];\r\n  var granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.colors = colors;\r\n    scratchOptions.width = width;\r\n    scratchOptions.colorsPerVertex = colorsPerVertex;\r\n    scratchOptions.arcType = arcType;\r\n    scratchOptions.granularity = granularity;\r\n    return new PolylineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._colors = colors;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._width = width;\r\n  result._colorsPerVertex = colorsPerVertex;\r\n  result._arcType = arcType;\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchPosition = new Cartesian3();\r\nvar scratchPrevPosition = new Cartesian3();\r\nvar scratchNextPosition = new Cartesian3();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineGeometry} polylineGeometry A description of the polyline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineGeometry.createGeometry = function (polylineGeometry) {\r\n  var width = polylineGeometry._width;\r\n  var vertexFormat = polylineGeometry._vertexFormat;\r\n  var colors = polylineGeometry._colors;\r\n  var colorsPerVertex = polylineGeometry._colorsPerVertex;\r\n  var arcType = polylineGeometry._arcType;\r\n  var granularity = polylineGeometry._granularity;\r\n  var ellipsoid = polylineGeometry._ellipsoid;\r\n\r\n  var i;\r\n  var j;\r\n  var k;\r\n\r\n  var removedIndices = [];\r\n  var positions = arrayRemoveDuplicates(\r\n    polylineGeometry._positions,\r\n    Cartesian3.equalsEpsilon,\r\n    false,\r\n    removedIndices\r\n  );\r\n\r\n  if (defined(colors) && removedIndices.length > 0) {\r\n    var removedArrayIndex = 0;\r\n    var nextRemovedIndex = removedIndices[0];\r\n    colors = colors.filter(function (color, index) {\r\n      var remove = false;\r\n      if (colorsPerVertex) {\r\n        remove =\r\n          index === nextRemovedIndex || (index === 0 && nextRemovedIndex === 1);\r\n      } else {\r\n        remove = index + 1 === nextRemovedIndex;\r\n      }\r\n\r\n      if (remove) {\r\n        removedArrayIndex++;\r\n        nextRemovedIndex = removedIndices[removedArrayIndex];\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n  }\r\n\r\n  var positionsLength = positions.length;\r\n\r\n  // A width of a pixel or less is not a valid geometry, but in order to support external data\r\n  // that may have errors we treat this as an empty geometry.\r\n  if (positionsLength < 2 || width <= 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\r\n    var subdivisionSize;\r\n    var numberOfPointsFunction;\r\n    if (arcType === ArcType.GEODESIC) {\r\n      subdivisionSize = CesiumMath.chordLength(\r\n        granularity,\r\n        ellipsoid.maximumRadius\r\n      );\r\n      numberOfPointsFunction = PolylinePipeline.numberOfPoints;\r\n    } else {\r\n      subdivisionSize = granularity;\r\n      numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\r\n    }\r\n\r\n    var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n\r\n    if (defined(colors)) {\r\n      var colorLength = 1;\r\n      for (i = 0; i < positionsLength - 1; ++i) {\r\n        colorLength += numberOfPointsFunction(\r\n          positions[i],\r\n          positions[i + 1],\r\n          subdivisionSize\r\n        );\r\n      }\r\n\r\n      var newColors = new Array(colorLength);\r\n      var newColorIndex = 0;\r\n\r\n      for (i = 0; i < positionsLength - 1; ++i) {\r\n        var p0 = positions[i];\r\n        var p1 = positions[i + 1];\r\n        var c0 = colors[i];\r\n\r\n        var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\r\n        if (colorsPerVertex && i < colorLength) {\r\n          var c1 = colors[i + 1];\r\n          var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\r\n          var interpolatedColorsLength = interpolatedColors.length;\r\n          for (j = 0; j < interpolatedColorsLength; ++j) {\r\n            newColors[newColorIndex++] = interpolatedColors[j];\r\n          }\r\n        } else {\r\n          for (j = 0; j < numColors; ++j) {\r\n            newColors[newColorIndex++] = Color.clone(c0);\r\n          }\r\n        }\r\n      }\r\n\r\n      newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\r\n      colors = newColors;\r\n\r\n      scratchInterpolateColorsArray.length = 0;\r\n    }\r\n\r\n    if (arcType === ArcType.GEODESIC) {\r\n      positions = PolylinePipeline.generateCartesianArc({\r\n        positions: positions,\r\n        minDistance: subdivisionSize,\r\n        ellipsoid: ellipsoid,\r\n        height: heights,\r\n      });\r\n    } else {\r\n      positions = PolylinePipeline.generateCartesianRhumbArc({\r\n        positions: positions,\r\n        granularity: subdivisionSize,\r\n        ellipsoid: ellipsoid,\r\n        height: heights,\r\n      });\r\n    }\r\n  }\r\n\r\n  positionsLength = positions.length;\r\n  var size = positionsLength * 4.0 - 4.0;\r\n\r\n  var finalPositions = new Float64Array(size * 3);\r\n  var prevPositions = new Float64Array(size * 3);\r\n  var nextPositions = new Float64Array(size * 3);\r\n  var expandAndWidth = new Float32Array(size * 2);\r\n  var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n  var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\r\n\r\n  var positionIndex = 0;\r\n  var expandAndWidthIndex = 0;\r\n  var stIndex = 0;\r\n  var colorIndex = 0;\r\n  var position;\r\n\r\n  for (j = 0; j < positionsLength; ++j) {\r\n    if (j === 0) {\r\n      position = scratchCartesian3;\r\n      Cartesian3.subtract(positions[0], positions[1], position);\r\n      Cartesian3.add(positions[0], position, position);\r\n    } else {\r\n      position = positions[j - 1];\r\n    }\r\n\r\n    Cartesian3.clone(position, scratchPrevPosition);\r\n    Cartesian3.clone(positions[j], scratchPosition);\r\n\r\n    if (j === positionsLength - 1) {\r\n      position = scratchCartesian3;\r\n      Cartesian3.subtract(\r\n        positions[positionsLength - 1],\r\n        positions[positionsLength - 2],\r\n        position\r\n      );\r\n      Cartesian3.add(positions[positionsLength - 1], position, position);\r\n    } else {\r\n      position = positions[j + 1];\r\n    }\r\n\r\n    Cartesian3.clone(position, scratchNextPosition);\r\n\r\n    var color0, color1;\r\n    if (defined(finalColors)) {\r\n      if (j !== 0 && !colorsPerVertex) {\r\n        color0 = colors[j - 1];\r\n      } else {\r\n        color0 = colors[j];\r\n      }\r\n\r\n      if (j !== positionsLength - 1) {\r\n        color1 = colors[j];\r\n      }\r\n    }\r\n\r\n    var startK = j === 0 ? 2 : 0;\r\n    var endK = j === positionsLength - 1 ? 2 : 4;\r\n\r\n    for (k = startK; k < endK; ++k) {\r\n      Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\r\n      Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\r\n      Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\r\n      positionIndex += 3;\r\n\r\n      var direction = k - 2 < 0 ? -1.0 : 1.0;\r\n      expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1; // expand direction\r\n      expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n      if (vertexFormat.st) {\r\n        st[stIndex++] = j / (positionsLength - 1);\r\n        st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\r\n      }\r\n\r\n      if (defined(finalColors)) {\r\n        var color = k < 2 ? color0 : color1;\r\n\r\n        finalColors[colorIndex++] = Color.floatToByte(color.red);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.green);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.blue);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.alpha);\r\n      }\r\n    }\r\n  }\r\n\r\n  var attributes = new GeometryAttributes();\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: finalPositions,\r\n  });\r\n\r\n  attributes.prevPosition = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: prevPositions,\r\n  });\r\n\r\n  attributes.nextPosition = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: nextPositions,\r\n  });\r\n\r\n  attributes.expandAndWidth = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: 2,\r\n    values: expandAndWidth,\r\n  });\r\n\r\n  if (vertexFormat.st) {\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: st,\r\n    });\r\n  }\r\n\r\n  if (defined(finalColors)) {\r\n    attributes.color = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 4,\r\n      values: finalColors,\r\n      normalize: true,\r\n    });\r\n  }\r\n\r\n  var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n  var index = 0;\r\n  var indicesIndex = 0;\r\n  var length = positionsLength - 1.0;\r\n  for (j = 0; j < length; ++j) {\r\n    indices[indicesIndex++] = index;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 1;\r\n\r\n    indices[indicesIndex++] = index + 1;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 3;\r\n\r\n    index += 4;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: BoundingSphere.fromPoints(positions),\r\n    geometryType: GeometryType.POLYLINES,\r\n  });\r\n};\r\nexport default PolylineGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolylineGeometry from \"../Core/PolylineGeometry.js\";\r\n\r\nfunction createPolylineGeometry(polylineGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\r\n  }\r\n  polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\r\n  return PolylineGeometry.createGeometry(polylineGeometry);\r\n}\r\nexport default createPolylineGeometry;\r\n"],"names":["scratchInterpolateColorsArray","interpolateColors","p0","p1","color0","color1","numPoints","i","colors","length","r0","red","g0","green","b0","blue","a0","alpha","r1","g1","b1","a1","Color","equals","clone","redPerVertex","greenPerVertex","bluePerVertex","alphaPerVertex","PolylineGeometry","options","positions","defaultValue","EMPTY_OBJECT","width","colorsPerVertex","defined","DeveloperError","this","_positions","_colors","_width","_colorsPerVertex","_vertexFormat","VertexFormat","vertexFormat","DEFAULT","_arcType","arcType","ArcType","GEODESIC","_granularity","granularity","CesiumMath","RADIANS_PER_DEGREE","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","numComponents","Cartesian3","packedLength","pack","value","array","startingIndex","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","undefined","unpack","result","Array","scratchCartesian3","scratchPosition","scratchPrevPosition","scratchNextPosition","createGeometry","polylineGeometry","j","k","removedIndices","arrayRemoveDuplicates","equalsEpsilon","removedArrayIndex","nextRemovedIndex","filter","color","index","positionsLength","RHUMB","subdivisionSize","numberOfPointsFunction","chordLength","maximumRadius","PolylinePipeline","numberOfPoints","numberOfPointsRhumbLine","heights","extractHeights","colorLength","newColors","newColorIndex","c0","numColors","interpolatedColors","interpolatedColorsLength","generateCartesianArc","minDistance","height","generateCartesianRhumbArc","position","size","finalPositions","Float64Array","prevPositions","nextPositions","expandAndWidth","Float32Array","st","finalColors","Uint8Array","positionIndex","expandAndWidthIndex","stIndex","colorIndex","subtract","add","endK","direction","Math","max","floatToByte","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","prevPosition","nextPosition","FLOAT","UNSIGNED_BYTE","normalize","indices","IndexDatatype","createTypedArray","indicesIndex","Geometry","primitiveType","PrimitiveType","TRIANGLES","boundingSphere","BoundingSphere","fromPoints","geometryType","GeometryType","POLYLINES","offset"],"mappings":"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"}